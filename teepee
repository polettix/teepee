#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.0.1';
use List::Util qw< reduce >;
use I18N::Langinfo qw(langinfo CODESET);

use Template::Perlish qw< render >;

my %config = (
   define => [],
   input  => [],
   output => '-',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     define|d=s@
     format|f=s
     input|i=s@
     output|o=s
     template|t=s
     text|T=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

# Script implementation here
my $vars     = read_inputs(\%config);
my $template = read_template(\%config);
my $ofh      = get_output_fh($config{output});
print {$ofh} render($template, $vars);

sub get_output_fh {
   my ($filename) = @_;
   my $fh = \*STDOUT;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '<', $filename
        or die "output open('$filename'): $OS_ERROR\n";
   }
   binmode $fh, ':encoding(UTF-8)';
   return $fh;
} ## end sub get_output_fh

sub read_template {
   my $cfg = shift;

   return octets_to_characters(slurp_octets($cfg->{template}))
     unless exists $cfg->{text};

   require I18N::Langinfo;
   require Encode;
   my $codeset = I18N::Langinfo::langinfo(I18N::Langinfo::CODESET());
   return Encode::decode($codeset, $cfg->{text});
} ## end sub read_template

sub read_inputs {
   my $cfg = shift;
   my %retval;

   my @inputs = @{$cfg->{input}};
   @inputs = '-' unless @inputs;
   for my $filename (@inputs) {
      my $data = read_input($filename, $cfg->{format});
      %retval = (%retval, %$data);
   }

   for my $item (@{$cfg->{define}}) {
      my ($key, $value) = split /=/, $item, 2;
      my $pointer = pointer_to_element(\%retval, split /\./, $key);
      $$pointer = $value;
   }

   return \%retval;
} ## end sub read_inputs

sub read_input {
   my ($filename, $format) = @_;
   my $octets = slurp_octets($filename);
   $format ||= detect_format($filename, $octets);
   die "undefined input format\n" unless defined $format;
   my $function = {
      yaml => \&read_input_yaml,
      yml  => \&read_input_yaml,
      json => \&read_input_json,
      jsn  => \&read_input_json,
   }->{lc($format)};
   die "cannot read input format $format\n" unless defined $function;
   return $function->($octets);
} ## end sub read_input

sub octets_to_characters {
   require Encode;
   return Encode::decode('UTF-8', $_[0]);
}

sub slurp_octets {
   my ($filename) = @_;
   die "undefined filename\n" unless defined $filename;
   my $fh = \*STDIN;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '<', $filename
        or die "input open('$filename'): $OS_ERROR\n";
   }
   binmode $fh, ':raw';
   local $/;
   return <$fh>;
} ## end sub slurp_octets

sub read_input_yaml {
   require YAML::Tiny;
   return YAML::Tiny::Load(octets_to_characters($_[0]));
} ## end sub read_input_yaml

sub read_input_json {
   require JSON::PP;
   return JSON::PP::decode_json($_[0]);
} ## end sub read_input_json

sub detect_format {
   my $filename = shift;
   return 'yaml' if $filename =~ m{\. ya?ml \z}imxs;
   return 'json' if $filename =~ m{\. jso?n \z}imxs;

   # try with content
   return 'json' if $_[0] =~ m/\A{/mxs;
   return 'yaml' if $_[0] =~ m{\A---}mxs;

   # bail out
   die "cannot infer format for file '$filename'\n";
} ## end sub detect_format

sub pointer_to_element {
   return reduce {
      ($b =~ m{\A(?: 0 | [1-9]\d* )\z}mxs) ? \($$a->[$b]) : \($$a->{$b});
   }, \shift, @_;
}

__END__

=head1 NAME

teepee - extract data from structures

=head1 HURRY UP!

Get the bundled version like this:

   curl -LO https://github.com/polettix/teepee/raw/master/bundle/teepee

or this

   wget https://github.com/polettix/teepee/raw/master/bundle/teepee

=head1 VERSION


   shell$ teepee --version


=head1 USAGE

   teepee [--usage] [--help] [--man] [--version]

   teepee [-d|--define key=value]
          [-f|--format input-format]
          [-i|--input filename]
          [-o|--output filename]
          [-t|--template filename]
          [-T|--text string]

=head1 EXAMPLES

   shell$ teepee -i data.yml -t template.file -o generated
   
   shell$ teepee -i data.json -T 'hello [% customer.name %]'


=head1 DESCRIPTION

C<teepee> allows you to generate data according to a template. Data is
extracted from data structures available in JSON or YAML format, read
from files or from standard input. This should make it easy to extract
the needed data e.g. out of the output from some tool that provides you
structured JSON or YAML text in output.

Input data structures can be provided via option L<-i | --input>. You
can provide more than one input; in this case, they will be read in
order and merged together. Merging in this case means that whatever is
present in a file provided later in the command line supersedes
whatevever was previously available. If you set the input filename as
C<->, the input will be read from standard input.

You can provide input definitions from the command line too, via option
L</--define>. In this case, you can provide the "path" into the
data structure separating items with a dot C<.>. Any key part that
resembles an integer index starting from 0 will be interpreted as an
array index, otherwise it will be considered a hash key. Definitions
with this options always supersede those read from input files.

The input format can be either specified explicitly via option
L</--format> or deduced implicitly. The heuristic will first check the
file name, then the contents. Suggestion is to specify it if you happen
to know, expecially for programmatic usage.

The template to be expanded can be provided either from a file (via
option L</--template>) or from the command-line directly (via
option L</--text>). Templates can be written according to what
L<Template::Perlish> provides.

All files are supposed to be UTF-8 encoded. When the template is
provided from the command line, module L<I18N::Langinfo> is used to
auto-detect the terminal setting and try to do the right things. If in
doubt, just use a UTF-8 encoded file for your template.

Output is sent to either standard output (by default or if you set the
filename to C<->) or to the filename specified via option C</--output>.
Output will be printed assuming that the receiving end is UTF-8 capable.


=head1 OPTIONS

=over

=item -d

=item --define

   -d key=value
   --define key=value

add the definition of an element in the input data. The following
algorithm applies:

=over

=item *

input definition C<key=value> is split at the first C<=> sign found.
This means that the C<key> cannot contain C<=> signs, while the value
can;

=item *

the C<key> part is divided into sub-keys splitting using the C<.> dot
character. This means that sub-keys cannot contain dots.

=item *

each sub-key is used to traverse the input data, with auto-vivification
when necessary.

=item *

sub-keys that are non-negative integers (i.e. either 0 or any positive
integer) are regarded as array indexes. Otherwise, the sub-key is
regarded as a hash key.

=item *

the C<value> part is assigned as the element I<pointed> by the last
sub-key.

=back

=item -f

=item --format

   -f <yaml|yml|json|jsn>
   --format <yaml|yml|json|jsn>

set the format for input data files. It can be one of C<yml>, C<yaml>,
C<json> or C<jsn> in whatever case.

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item -i

=item --input

   -i filename
   --input filename

an input file carrying data for expansion. This option can be set
multiple times, which will trigger (shallow) merging of the data
structures.

If set as C<->, standard input will be read.

Note: only allowed data structures are hashes at the top level.

=item --man

print out the full documentation for the script.

=item -o 

=item --output

   -o filename
   --output filename

set the output channel where data will be sent. By default it is set to
C<->, which means standard output.

Data will be printed assuming the channel is UTF-8 capable.

=item -t 

=item --template

   -t filename
   --template filename

set the input template filename. The input file is assumed to be UTF-8
encoded.

Templates are assumed to be valid L<Template::Perlish> template files,
see that module's documentation for additional help. The default opener
and closer are assumed.

=item -T 

=item --text

set the template to expand directly on the command line.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

=head1 DIAGNOSTICS

=over

=item C<< output open('%s'): %s >>

errors while opening the output channel, second placeholder carries the
error from the operating system.

=item C<< undefined input format >>

auto-detection of input format failed. You can use option L</--format>
to specify the input format.

=item C<< cannot read input format %s >>

the provided input format is not recognised, see L</--format> for the
allowed values.

=item C<< undefined filename >>

the filename provided for input reading is not defined. This applies
both to data and template inputs.

=item C<< input open('%s'): %s >>

errors while opening an input file, second placeholder carries the
error from the operating system.

=item C<< cannot infer format for file '%s' >>

heuristic to infer the format of the file failed. You can specify the
format to be used using L</--format>

=back


=head1 CONFIGURATION AND ENVIRONMENT

teepee requires no configuration files or environment variables.


=head1 DEPENDENCIES

=over

=item *

L<JSON::PP>

=item *

L<Template::Perlish>

=item *

L<YAML::Tiny>

=back

The bundled version contains all the needed modules.

=head1 BUGS AND LIMITATIONS

No bugs have been reported. Auto-detection of local should probably
extend to output encoding when printing to standard output, as opposed
to assuming UTF-8 is fine.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
