#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.4.0';
use List::Util qw< reduce >;
use I18N::Langinfo qw(langinfo CODESET);
use Scalar::Util qw< refaddr blessed >;

use Template::Perlish 1.41 qw< render >;
use Data::Crumbr;

my @YAML_MODULES = qw<
  YAML::XS
  YAML::Syck
  YAML::Tiny
>;
my @JSON_MODULES = qw<
  Cpanel::JSON::XS
  JSON::XS
  JSON::PP
>;

my %config = (
   'auto-key-prefix' => '_',
   'auto-key-suffix' => '_',
   binmode           => ':encoding(UTF-8)',
   'default-key'     => '_',
   define            => [],
   input             => [],
   output            => '-',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     auto-key|A!
     auto-key-prefix|P=s
     auto-key-suffix|S=s
     binmode|b=s
     default-key|K=s
     define|d=s@
     format|f=s
     function|F=s
     input|i=s@
     newline|n!
     no-input|N!
     output|o=s
     template|t=s
     text|T=s
     variable|v=s
     >,
     'immediate|I=s@' => sub { push @{$config{input}},          \$_[1]  },
     'json|jsn|j=s@'  => sub { push @{$config{input}}, [json =>  $_[1]] },
     'JSON|JSN|J=s@'  => sub { push @{$config{input}}, [json => \$_[1]] },
     'yaml|yml|y=s@'  => sub { push @{$config{input}}, [yaml =>  $_[1]] },
     'YAML|YML|Y=s@'  => sub { push @{$config{input}}, [yaml => \$_[1]] },
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

$config{newline} = 1
  if $ENV{TEEPEE_NEWLINE} && !defined $config{newline};

# Script implementation here
my ($vars, $has_auto_keys) = read_inputs(\%config);
my $template = read_template(\%config);
{
   no warnings 'once';
   my $crumbr = sub {
      my ($profile, $variables) = @_;
      $profile ||= 'URI';
      my @output;
      Data::Crumbr::crumbr(
         profile => $profile,
         encoder => {output => \*STDOUT},
      )->($variables || $vars);
   };
   my $ic = sub {
      return $_[0] if @_;
      return $vars unless $has_auto_keys;

      # shallow copy will suffice here
      my %retval = %$vars;
      delete $retval{$config{'default-key'}};
      return \%retval;
   };
   *Template::Perlish::crumbr_as    = $crumbr;
   *Template::Perlish::crumbr       = sub { $crumbr->('URI', @_) };
   *Template::Perlish::uri_crumbr   = sub { $crumbr->('URI', @_) };
   *Template::Perlish::exact_crumbr = sub { $crumbr->('Default', @_) };
   *Template::Perlish::json_crumbr  = sub { $crumbr->('JSON', @_) };
   *Template::Perlish::JSON         = sub { JSON($ic->(@_)) };
   *Template::Perlish::YAML         = sub { YAML($ic->(@_)) };
}
my $ofh = get_output_fh($config{output}, $config{binmode});
my $output = render($template, $vars);
print {$ofh} $output if defined $output;
print {$ofh} "\n"    if $config{newline};

sub get_output_fh {
   my ($filename, $binmode) = @_;

   my $fh = \*STDOUT;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '>', $filename
        or die "output open('$filename'): $OS_ERROR\n";
   }

   $binmode = ':raw' if $binmode eq '';
   binmode $fh, $binmode;

   return $fh;
} ## end sub get_output_fh

sub read_template {
   my $cfg = shift;

   $cfg->{text} = "[%= $cfg->{function} %]"
     if exists $cfg->{function};
   $cfg->{text} = "[% $cfg->{variable} %]"
     if exists $cfg->{variable};
   return octets_to_characters(slurp_octets($cfg->{template}))
     unless exists $cfg->{text};

   require I18N::Langinfo;
   require Encode;
   my $codeset = I18N::Langinfo::langinfo(I18N::Langinfo::CODESET());
   return Encode::decode($codeset, $cfg->{text});
} ## end sub read_template

sub read_inputs {
   my $cfg = shift;
   my ($retval, $retvalref);

   my @inputs = @{$cfg->{input}};
   @inputs = '-' if (! scalar(@inputs)) && (! $cfg->{'no-input'});
   my $counter = 0;
   for my $input (@inputs) {
      my ($format, $filename) = (ref($input) eq 'ARRAY')
         ? @$input : (undef, $input);
      my $data = read_input($filename, $format || $cfg->{format});
      if ($cfg->{'auto-key'}) {
         my $prefix = $cfg->{'auto-key-prefix'};
         my $suffix = $cfg->{'auto-key-suffix'};
         $retval->{"$prefix$counter$suffix"} = $data;
         $retval->{$cfg->{'default-key'}} = $data;
         ++$counter;
         $retvalref = 'HASH';
      }
      elsif (! defined $retval) {
         $retval = $data;
         $retvalref = ref $retval;
      }
      elsif ((ref($data) eq 'HASH') && ($retvalref eq 'HASH')){
         %$retval = (%$retval, %$data);
      }
      else {
         pod2usage(
            message => 'only one single input with ARRAY, or use auto-key',
            -verbose => 99, -sections => 'USAGE');
      } ## end else [ if ((ref($data) eq 'HASH'...))]
   } ## end for my $filename (@inputs)

   for my $item (@{$cfg->{define}}) {
      my ($key, $value) = ref($item) ? @$item : split /=/, $item, 2;
      my $path = Template::Perlish::crumble($key);
      my $pointer = Template::Perlish::traverse(\$retval, $key)
       or pod2usage(
         message => "invalid definition key <$key>",
         -verbose => 99, -sections => 'USAGE');
      $$pointer = $value;
   }

   return ($retval, $counter);
} ## end sub read_inputs

sub read_input {
   my ($filename, $format) = @_;
   my $octets = slurp_octets($filename);
   $format ||= detect_format($filename, $octets);
   die "undefined input format\n" unless defined $format;
   my $function = {
      yaml => \&read_input_yaml,
      yml  => \&read_input_yaml,
      json => \&read_input_json,
      jsn  => \&read_input_json,
   }->{lc($format)};
   die "cannot read input format $format\n" unless defined $function;
   return $function->($octets);
} ## end sub read_input

sub octets_to_characters {
   require Encode;
   return Encode::decode('UTF-8', $_[0]);
}

sub slurp_octets {
   my ($filename) = @_;
   die "undefined filename\n" unless defined $filename;
   my $fh = \*STDIN;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '<', $filename
        or die "input open('$filename'): $OS_ERROR\n";
   }
   binmode $fh, ':raw';
   local $/;
   return <$fh>;
} ## end sub slurp_octets

sub load_any {
   for my $candidate (@_) {
      (my $path = "$candidate.pm") =~ s{(?: :: | ')}{/}gmxs;
      eval { require $path; 1 } and return $candidate;
   }
   die "$EVAL_ERROR\n";
} ## end sub load_any

sub read_input_yaml {
   my $module = load_any(@YAML_MODULES);

   if ($module eq 'YAML::Tiny') {

      # octets are needed here...
      return YAML::Tiny::Load(octets_to_characters($_[0]));

   } ## end if ($module eq 'YAML::Tiny')
   elsif ($module eq 'YAML::Syck') {

      # YAML::Syck::Load seems to cope with octets and characters
      # we'll use octets here. Anyway, we want characters back.
      local $YAML::Syck::ImplicitUnicode;
      $YAML::Syck::ImplicitUnicode = 1;
      return YAML::Syck::Load($_[0]);

   } ## end elsif ($module eq 'YAML::Syck')
   else {

      # assuming we just needs calling Load() here
      return $module->can('Load')->($_[0]);

   } ## end else [ if ($module eq 'YAML::Tiny')]
} ## end sub read_input_yaml

sub read_input_json {
   my $module = load_any(@JSON_MODULES);
   return $module->can('decode_json')->($_[0]);
}

sub detect_format {
   my $filename = shift;
   return 'yaml' if $filename =~ m{\. ya?ml \z}imxs;
   return 'json' if $filename =~ m{\. jso?n \z}imxs;

   # try with content
   return 'json' if $_[0] =~ m/\A\s*[\{\[]/mxs;
   return 'yaml' if $_[0] =~ m{\A---}mxs;

   # bail out
   die "cannot infer format for file '$filename'\n";
} ## end sub detect_format

sub JSON {
   my $module = load_any(@JSON_MODULES);
   return $module->new()->pretty()->encode(shift);
}

sub YAML {
   require Storable;
   my $ref    = cleanup(Storable::dclone(shift));
   my $module = load_any(@YAML_MODULES);
   if ($module eq 'YAML::Tiny') {
      return YAML::Tiny::Dump($ref);
   }
   elsif ($module eq 'YAML::Syck') {
      local $YAML::Syck::ImplicitUnicode;
      $YAML::Syck::ImplicitUnicode = 1;
      return YAML::Syck::Dump($ref);
   }
   else {
      return octets_to_characters($module->can('Dump')->($ref));
   }
} ## end sub YAML

sub isa_any {
   my ($object, @candidates) = @_;
   for my $candidate (@candidates) {
      return 1 if $object->isa($candidate);
   }
   return;
} ## end sub isa_any

sub cleanup {
   my $ref = shift;
   traverse(
      $ref,
      {},
      sub {
         return unless blessed $_[0];
         if (
            isa_any(
               $_[0], qw<
                 Cpanel::JSON::XS::Boolean
                 JSON::XS::Boolean
                 JSON::PP::Boolean
                 >
            )
           )
         {
            $_[0] = $_[0] ? 'true' : 'false';
         } ## end if (isa_any($_[0], qw<...))
         else {
            $_[0] = "$_[0]";
         }
      }
   );
   return $ref;
} ## end sub cleanup

sub traverse {
   my ($ref, $track, $action) = @_;
   my $type = ref($ref) or return;
   die "circular structure not allowed\n"
     if $track->{refaddr($ref)}++;
   if ($type eq 'HASH') {
      for my $v (values %$ref) {
         $action->($v);
         traverse($v, $track, $action);
      }
   } ## end if ($type eq 'HASH')
   elsif ($type eq 'ARRAY') {
      for my $v (@$ref) {
         $action->($v);
         traverse($v, $track, $action);
      }
   } ## end elsif ($type eq 'ARRAY')
   return;
} ## end sub traverse

__END__

=encoding UTF-8

=head1 NAME

teepee - extract data from structures

=head1 HURRY UP!

Get the bundled version like this:

   curl -LO https://github.com/polettix/teepee/raw/master/bundle/teepee

or this

   wget https://github.com/polettix/teepee/raw/master/bundle/teepee

or just click here: L<https://github.com/polettix/teepee/raw/master/bundle/teepee>

=head1 USAGE

   teepee [--usage] [--help] [--man] [--version]

   teepee [-A|--auto-key]
          [-P|--auto-key-prefix string]
          [-S|--auto-key-suffix string]
          [-b|--binmode setting]
          [-K|--default-key string]
          [-d|--define key=value]
          [-f|--format input-format]
          [-F|--function spec]
          [-I|--immediate text]
          [-i|--input filename]
          [-j|--jsn|--json filename]
          [-J|--JSN|--JSON text]
          [-n|--newline|--no-newline]
          [-N|--no-input]
          [-o|--output filename]
          [-t|--template filename]
          [-T|--text string]
          [-v|--variable string]
          [-y|--yml|--yaml filename]
          [-Y|--YML|--YAML text]

=head1 EXAMPLES

   shell$ teepee -i data.yml -t template.file -o generated
   
   shell$ teepee -i data.json -T 'hello [% customer.name %]'


=head1 DESCRIPTION

C<teepee> allows you to generate data according to a template. Data is
extracted from data structures available in JSON or YAML format, read
from files or from standard input. This should make it easy to extract
the needed data e.g. out of the output from some tool that provides you
structured JSON or YAML text in output.

=head2 Options Overview

Input data structures can be provided via option L<-i | --input>. You
can provide more than one input; in this case, they will be read in
order and merged together. Merging in this case means that whatever is
present in a file provided later in the command line supersedes
whatevever was previously available. If you set the input filename as
C<->, the input will be read from standard input.

You can provide input definitions from the command line too, via option
L</--define>. In this case, you can provide the "path" into the
data structure separating items with a dot C<.>. Any key part that
resembles an integer index starting from 0 will be interpreted as an
array index, otherwise it will be considered a hash key. Definitions
with this options always supersede those read from input files.

The input format can be either specified explicitly via option
L</--format> or deduced implicitly. The heuristic will first check the
file name, then the contents. Suggestion is to specify it if you happen
to know, expecially for programmatic usage.

The template to be expanded can be provided either from a file (via
option L</--template>) or from the command-line directly (via option
L</--text>). Templates can be written according to what
L<Template::Perlish> provides. As quick, specialized alternatives to
L</--text>, you can also use L</--function> and L</--variable>.

All files are supposed to be UTF-8 encoded. When the template is
provided from the command line, module L<I18N::Langinfo> is used to
auto-detect the terminal setting and try to do the right things. If in
doubt, just use a UTF-8 encoded file for your template.

Output is sent to either standard output (by default or if you set the
filename to C<->) or to the filename specified via option C</--output>.
Output will be printed assuming that the receiving end is UTF-8 capable.

=head2 Reading Inputs

It's worth noting that input data might come into three forms,
independently of the input format: I<hash> (i.e. I<object> in JSON),
I<array> or I<scalar>. Whatever the input, a big I<hash>/I<object> is
built and eventually consumed by the templates; every time the top-level
element in the input is not a I<hash>, the following applies:
applies:

=over

=item *

a (hopefully) unique key is generated joining L</--auto-key-prefix>, an
increasing integer number starting from C<0>, and L<--auto-key-suffix>.
The value is associated to this key in the top level hash.

=item *

the last value read in this way is always associated to key
L</--default-key>.

=back

By default, the three options are set to the string C<_> (one single
underscore).

For example, if you have two input files with two arrays inside:

   # first input, JSON format
   [ "one", "two", "three" ]

   # second input, JSON format
   [ 1, 2, 3 ]

the resulting overall hash read will be the following when the two
inputs are read in the order above:

   {
      _0_ => [ 'one', 'two', 'three' ],
      _1_ => [ 1, 2, 3 ],
      _   => [ 1, 2, 3 ],
   }

You can change the different options to be able to mix the input arrays
with hashes and preserve key uniqueness.

If you specify input option L<--auto-key>, the above algorithm will
always be applied, also for hash inputs. This allows you get input from
multiple sources without the risk of having keys trump on each other
(which might be or not what you want).


=head2 Writing Templates

Templates for extracting data are written according to what
Template::Perlish provides. You should take a look at its documentation
at L<https://metacpan.org/pod/Template::Perlish>. Only a few tricks will
be reported here, just to get your feet wet.


We will suppose to have the following data, represented as YAML:

   ---
   key1: value1
   key2: value2
   array:
      - first
      - second
      - third
      -
         k1: v1
         k2: v2
   hash:
      one: two
      three: four
      five:
         - a
         - b
         - 'see...'
      'complex key': whatever

Values that are neither hashes/objects nor arrays will be called
I<scalars>.

So, we have a hash at the top level, with four keys (C<key1>, C<key2>,
C<array> and C<hash>), two of which are scalars, one is an array and one
is a hash. The array contains four items, the last of which is a hash
with two keys (C<k1> and C<k2>). The hash contains three keys, the first
two (C<one> and C<three>) associated to a scalar value, the last one
being an array with three strings inside.

If you want to just access scalar variable pointed by key C<three>
inside C<hash>, it is sufficient to provide the I<path> to that value as
a sequence of keys starting from the top level and separated by a dot,
like this:

   [% hash.three %]

If you want to access an array's element, the trick is similar but you
will have to use the index (starting from 0) instead of the key. So, for
example, the C<b> in the second array would be accessed like this:

   [% hash.five.1 %]

and the C<v1> like this:

   [% array.3.k1 %]

Please note that, by default, the keys that you can concatenate can only
contain alphanumeric values, plus the underscore. What if you want to
access C<whatever> then? You can insert non-alphanumeric characters
using quotes, like this:

   [% hash.'complex key' %]

As you can imagine, there are ways to also cope with keys that have
quotes inside, so refer to Template::Perlish if you need to know more.

Besides just accessing scalar values, you might want to add some logic
to your templates. You can do this by simply writing Perl code, because
whatever is not recognised as a valid I<path of keys> is considered Perl
code and evaluated accordingly:

   current time: [% print scalar localtime() %]

There is even a shortcut to just print the output of an expression, so
the above example can be written like this:

   current time: [%= scalar localtime() %]

(note that there is an equal sign just after the template opening).

When you are writing Perl code, you can access the data structure
through the hash variable C<%variables>, so the following are
equivalent:

   [% hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]

but of course you can do fancier things with the second one, like this:

   uppercase: [%= uc $variables{hash}{'complex key'} %]

Accessing variables like this can be boring if you have a deeply nested
data structure, because it's a lot of typing and a lot of curly
brackets. To save typing and time, you can use the shortcut function
C<V>, so the following are equivalent:

   [%  hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]
   [%= V("hash.'complex key'") %]

As you are probably guessing, C<V> uses the same algorithm as just
putting a plain sequence of path elements, including its restrictions on
non-alphanumeric characters. This is considered a feature, because it
adds consistency.

Just like you can access any variable with C<V>, you also have a few
additional functions at your disposal for some common tasks. For
example, sometimes you will want to iterate over an array and find just
those elements that have some characteristics, e.g. restricting only to
elements that are hashes containing the C<k1> key. The long version is
this, of course:

   [%
      for my $item (@{$variables{array}}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

You can use the C<V> shortcut, of course:

   [%
      for my $item (@{V('array')}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

although in this case you would probably use C<A> instead:

   [%
      for my $item (A 'array') {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

This takes the element at path C<array> from C<%variables>, expands it
as an array and... well, what you do with it is completely up to you, of
course.

=head2 Pretty Printing

Sometimes, especially in an interactive session, you might just want to
take a look at the data structure you have to traverse; this is where
I<pretty-printing> comes handy.

YAML is already quite readable by its own, so chances are that you might
want to have some pretty-printing when your data is represented in
campact JSON format.

There are two functions for pretty-printing: L</YAML> and L</JSON>. As
you might have guessed, they print out the input data structure
respectively as YAML and JSON (so they can also be used to transform one
into the other, of course). It suffices to use the C</-F> option to get
their services:

   # pretty-print JSON as JSON
   $ teepee -FJSON <input.json

   # just dump as YAML
   $ teepee -FYAML <input.whatever

Note that if your input is not an hash, or you are using L</--auto-key>,
your data structure will contain multiple references to the same
objects, which by default is considered a I<circular data reference>.
C<teepee> solves this problem by eliminating the L</--default-key> from
the input hash before doing the pretty-printing.

This will anyway give you something that is different from the real
input data, because of the embedding into the top-level hash.  If you
just want the original data, you can do as follows (this will work only
for the last read input data of course):

   # pretty-print JSON as JSON
   $ teepee -F'JSON(V("_"))' <input.json

   # just dump as YAML
   $ teepee -F'YAML(V("_"))' <input.whatever

This isolates the last read input with an auto-generated key (with
C<V("_")>) and pretty-prints that (passing to the relevant function,
i.e. either C<JSON> or C<YAML>).

=head2 Feeling Better With C<grep>?

If you're not very comfortable with Perl... you should. There are a lot
of very good resources out there to learn it, the most outstanding
and readily available example is probably Modern Perl
(L<http://onyxneon.com/books/modern_perl/index.html>, look for both the
printed and online version).

Anyway, if you're in a hurry and you prefer to use C<grep>/C<sed> and
all other classical Unix tools, you can turn on I<crumbr> mode and play
with its output.

To understand what crumbr does, let's start from an example, i.e. let's
see what this does when applied to the example data structure described
in L</Writing Templates>. The template is quite straightforward in this
case:

   $ teepee -T '[%= crumbr(); %]' -i data.yml

and the output is the following:

   array/0 "first"
   array/1 "second"
   array/2 "third"
   array/3/k1 "v1"
   array/3/k2 "v2"
   hash/complex%20key "whatever"
   hash/five/0 "a"
   hash/five/1 "b"
   hash/five/2 "see..."
   hash/one "two"
   hash/three "four"
   key1 "value1"
   key2 "value2"

Every leaf node is represented on a single line of its own. Each line
contains a URI-shaped path, a space, and a JSON-encoded representation
of the value. Hash keys are sorted lexicographically, array keys are
sorted numerically.

So, are we still looking at the values pointed by key C<k1> inside any
hash under the top-level array? This is how you do it:

   $ teepee -T '[%= crumbr(); %]' -i data.yml \
     | grep '^array/[0-9][0-9]*/k1 '

You get the idea. Typing (or even remembering) that template might be
cumbersome, which is why there is a shorthand option L</-F> that lets
you just write this instead:

   $ teepee -Fcrumbr -i data.yml | grep '^array/[0-9][0-9]*/k1'

See L</--function>/L</-F> for the available functions in addition to
C<crumbr>. We will use this short form from now on.

Why the JSON encoding in the output? Aren't those double quotes
annoying? The answer is probably yes, but they are also needed. In fact,
there are a few cases where you will I<not> see them, namely:

=over

=item * B<< empty arrays >>

are represented as C<[]>, without quotes

=item * B<< empty hashes >>

are represented as C<{}>, without quotes

=item * B<< null/undefined values >>

are represented as I<null>, without quotes (as opposed to
the string I<"null">, that has the quotes).

=back

Example:

   $ cat sample.yaml
   ---
   'plain-value': ciao
   'null-value': ~
   'empty-array': []
   'empty-hash': {}

   $ teepee -Fcrumbr <sample.yaml
   empty-array []
   empty-hash {}
   null-value null
   plain-value "ciao"

You have probably noticed that this does not allow you to clearly
distinguish between hash/object keys and array indexes. Hopefully this
does not concern you because you have a sane input data structure, but
in case you want to remove any space for misunderstanding, you can use
C<exact_crumbr> instead:

   $ teepee -Fexact_crumbr -i data.yml
   {"array"}[0]:"first"
   {"array"}[1]:"second"
   {"array"}[2]:"third"
   {"array"}[3]{"k1"}:"v1"
   {"array"}[3]{"k2"}:"v2"
   {"hash"}{"complex key"}:"whatever"
   {"hash"}{"five"}[0]:"a"
   {"hash"}{"five"}[1]:"b"
   {"hash"}{"five"}[2]:"see..."
   {"hash"}{"one"}:"two"
   {"hash"}{"three"}:"four"
   {"key1"}:"value1"
   {"key2"}:"value2"

If you like, or need, to play with I<JSON subsets> instead, you might
find C<json_crumbr> interesting:

   $ teepee -Fjson_crumbr -i data.yml
   {"array":["first"]}
   {"array":["second"]}
   {"array":["third"]}
   {"array":[{"k1":"v1"}]}
   {"array":[{"k2":"v2"}]}
   {"hash":{"complex key":"whatever"}}
   {"hash":{"five":["a"]}}
   {"hash":{"five":["b"]}}
   {"hash":{"five":["see..."]}}
   {"hash":{"one":"two"}}
   {"hash":{"three":"four"}}
   {"key1":"value1"}
   {"key2":"value2"}

In this case, each line is a valid JSON data structure with one single
leaf value only.

=head1 OPTIONS

=over

=item -A

=item --auto-key

=item --no-auto-key

   -A
   --auto-key
   --no-auto-key

When set (first two options), every input is put into its own sub-value
inside the top-level hash. See L</--auto-key-prefix>,
L<--auto-key-suffix> and L</default-key> for options related to
automatic keys generation.

Defaults to a false value, i.e. hashes will be merged together in the
top level hash, and only array/scalar values will get an automatically
generated key.

=item -P

=item --auto-key-prefix

   -P ITEM-
   --auto-key-prefix ITEM-

Prefix to be applied when auto-generating a key for inserting an input
into the top-level hash. This applies to input top-level arrays/scalars,
unless when C<--auto-key> is set in which case it applies to all
top-level inputs.

Defaults to the single underscore character C<_>.

=item -S

=item --auto-key-suffix

   -S _mine
   --auto-key-suffix _mine

Suffix to be applied when auto-generating a key for inserting an input
into the top-level hash. This applies to input top-level arrays/scalars,
unless when C<--auto-key> is set in which case it applies to all
top-level inputs.

Defaults to the single underscore character C<_>.


=item -b

=item --binmode

   -b setting
   --binmode setting

set the output encoding using the same rules as Perl's C<binmode>
function. Defaults to C<:encoding(UTF-8)>. When left empty, it is
considered equivalent to C<:raw>.

=item -K

=item --default-key

   -K mykey
   --default-key mykey

Key associated to the last top-level input that needs key
auto-generation (depends on L</--auto-key>).

Defaults to the single underscore character C<_>.

=item -d

=item --define

   -d key=value
   --define key=value

add the definition of an element in the input data. The following
algorithm applies:

=over

=item *

input definition C<key=value> is split at the first C<=> sign found.
This means that the C<key> cannot contain C<=> signs, while the value
can;

=item *

the C<key> part is divided into sub-keys splitting using the C<.> dot
character. This means that sub-keys cannot contain dots.

=item *

each sub-key is used to traverse the input data, with auto-vivification
when necessary.

=item *

sub-keys that are non-negative integers (i.e. either 0 or any positive
integer) are regarded as array indexes. Otherwise, the sub-key is
regarded as a hash key.

=item *

the C<value> part is assigned as the element I<pointed> by the last
sub-key.

=back

=item -f

=item --format

   -f <yaml|yml|json|jsn>
   --format <yaml|yml|json|jsn>

set the (default) format for input data files. It can be one of C<yml>,
C<yaml>, C<json> or C<jsn> in whatever case. You can also set the format
in a fine-grained way using either L</--json> or L</--yaml> options.

=item -F

=item --function

   -F spec
   --function spec

set template to a function. This is equivalent to specifying:

   -T '[%= spec %]'

except that it is more concise. You can of course put whatever in
C<spec>, so you are not constrained on using a single function.

Currently available functions are:

=over

=item - C<crumbr_as(type)>

where C<type> can be C<URI>, C<Default> or C<JSON>;

=item - C<crumbr>

alias to C<uri_crumbr>

=item - C<uri_crumbr>

use crumbr with the C<URI> alternative

=item - C<exact_crumbr>

use crumbr with the I<exact> C<Default> alternative

=item - C<json_crumbr>

use crumbr with the C<JSON> alternative

=item - C<JSON>

dumps the input as pretty-printed JSON (so this is more readable)

=item - C<YAML>

dumps the input as YAML (so this is more readable)

=back

The functions above work, by default, on the overall input data. You can
pass an optional (additional) parameter with the data structure you want
it to work upon, e.g. if you just want to pretty-print an item you can
do this:

   $ teepee -i input.json -F'YAML(V("some.inner.hash"))'

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item -I

=item --immediate

   -I '{"ciao":"a tutti"}'
   --immediate '{"hey":"joe"}'

immediate input, whose content is directly in the command line
parameter. Does auto-detection and complies with L</--format> as
L</--input>.

=item -i

=item --input

   -i filename
   --input filename

an input file carrying data for expansion. This option can be set
multiple times, which will trigger (shallow) merging of the data
structures.

If set as C<->, standard input will be read.

Note: only allowed data structures are hashes at the top level.

=item -j

=item --jsn

=item --json

   -j input.json
   --jsn some.json
   --json other.json

add an input file indicating that its format is JSON.

=item -J

=item --JSN

=item --JSON

   -J '{"ciao":"a tutti"}'
   --JSN '{"hi":"there"}'
   --JSON '{"hey":"joe"}'

immediate input, whose content is directly in the command line
parameter, read as JSON.

Note that the case of the option is all uppercase, as opposed to
L</--json>.

This can come handy when you have read your data structure in a shell
variable, and don't want to do tricks with redirections.

=item --man

print out the full documentation for the script.

=item -n

=item --newline

=item --no-newline

the first two forms set C<teepee> to always print a newline at the end.
This should make it easier to use in the command line, especially for
casually printing variables on the shell.

The last form is the negation, i.e. newline printing is disabled. This
can come handy when you set the environment variable L</TEEPEE_NEWLINE>
to a non-false value, but you want to disable the newline printing in
one call.

=item -N

=item --no-input

   -N
   --no-input

boolean option to signal that there is no input at all. This is handy if
you just want to expand a template based on a few variables set directly
on the command line, for example:

   # both "n" for newline and "N" for no-input, then multiple defines
   $ teepee -nN -d a=b -d c=d -T '[% a %] -> [% c %]'
   b -> d


=item -o 

=item --output

   -o filename
   --output filename

set the output channel where data will be sent. By default it is set to
C<->, which means standard output.

Data will be printed assuming the channel is UTF-8 capable.

=item -t 

=item --template

   -t filename
   --template filename

set the input template filename. The input file is assumed to be UTF-8
encoded.

Templates are assumed to be valid L<Template::Perlish> template files,
see that module's documentation for additional help. The default opener
and closer are assumed.

=item -T 

=item --text

set the template to expand directly on the command line.

=item --usage

print a concise usage line and exit.

=item -v string

=item --variable string

   -v some.data.inside
   --variable some.data.inside

expand a variable directly. This is equivalent to specifying:

   -T '[% some.data.inside %]'

but more concise.

=item --version

print the version of the script.

=item -y

=item --yml

=item --yaml

   -y input.yaml
   --yml some.yaml
   --yaml other.yaml

add an input file indicating that its format is YAML.

=item -Y

=item --YML

=item --YAML

   -Y '"ciao": "a tutti"'
   --YML '"hi": "there"'
   --YAML '"hey": "joe"'

immediate input, whose content is directly in the command line
parameter, read as YAML.

Note that the case of the option is all uppercase, as opposed to
L</--yaml>.

This can come handy when you have read your data structure in a shell
variable, and don't want to do tricks with redirections.


=back

=head1 DIAGNOSTICS

=over

=item C<< output open('%s'): %s >>

errors while opening the output channel, second placeholder carries the
error from the operating system.

=item C<< undefined input format >>

auto-detection of input format failed. You can use option L</--format>
to specify the input format.

=item C<< cannot read input format %s >>

the provided input format is not recognised, see L</--format> for the
allowed values.

=item C<< undefined filename >>

the filename provided for input reading is not defined. This applies
both to data and template inputs.

=item C<< input open('%s'): %s >>

errors while opening an input file, second placeholder carries the
error from the operating system.

=item C<< cannot infer format for file '%s' >>

heuristic to infer the format of the file failed. You can specify the
format to be used using L</--format>

=back


=head1 CONFIGURATION AND ENVIRONMENT

teepee requires no configuration files.

The following environment variables are supported:

=over

=item B<< TEEPEE_NEWLINE >>

when set to a true value, it has the same effect of option
L</--newline>. Anyway, the command line always overrides the environment
variable, so if option L</--no-newline> is set, the newline printig will
be disabled anyway.

=back


=head1 DEPENDENCIES

=over

=item *

L<Data::Crumbr> (and sons)

=item *

L<JSON::PP> (with L<JSON::PP::Boolean>)

=item *

L<Mo> (with L<Mo::default> and L<Mo::coerce>)

=item *

L<Template::Perlish>

=item *

L<YAML::Tiny>

=back

The bundled version contains all the needed modules, without
documentation. The following licensing terms apply to the included
modules:

=over

=item L<Data::Crumbr>

Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=item L<JSON::PP>

Copyright 2007-2014 by Makamaka Hannyaharamitu

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=item L<Mo>

Copyright (c) 2011-2013. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See http://www.perl.com/perl/misc/Artistic.html

=item L<Template::Perlish>

Copyright (c) 2008-2015 by Flavio Poletti polettix@cpan.org.

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=item L<YAML::Tiny>

Copyright 2006 - 2013 Adam Kennedy.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

The full text of the license can be found in the LICENSE file available
at https://metacpan.org/source/ETHER/YAML-Tiny-1.69/LICENSE.


=back




=head1 BUGS AND LIMITATIONS

No bugs have been reported. Auto-detection of local should probably
extend to output encoding when printing to standard output, as opposed
to assuming UTF-8 is fine.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
