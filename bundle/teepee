#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.0.1';
use List::Util qw< reduce >;
use I18N::Langinfo qw(langinfo CODESET);
use Scalar::Util qw< refaddr blessed >;

# __MOBUNDLE_INCLUSION__
BEGIN {
   my %file_for = (
# __MOBUNDLE_FILES__


# __MOBUNDLE_FILE__

      'Data/Crumbr.pm' => <<'END_OF_FILE',
 package Data::Crumbr;
 $Data::Crumbr::VERSION = '0.1.0';
 # ABSTRACT: Render data structures for easy searching and parsing
 
 # Inlined Mo
 use Mo qw< default coerce >;
 
 use 5.018;
 use strict;
 use warnings;
 use Carp;
 use English qw< -no_match_vars >;
 use Exporter qw< import >;
 use Scalar::Util qw< blessed >;
 
 our @EXPORT      = qw< crumbr >;
 our @EXPORT_OK   = @EXPORT;
 our %EXPORT_TAGS = (all => [@EXPORT_OK]);
 
 has encoder => (
    default => sub { __encoder() },
    coerce  => \&__encoder,
 );
 
 sub __load_class {
    my ($class) = @_;
    (my $packname = "$class.pm") =~ s{::}{/}gmxs;
    require $packname;
    return $class;
 } ## end sub __load_class
 
 sub crumbr {
    my %args = (@_ && ref($_[0])) ? %{$_[0]} : @_;
    if (defined(my $name = delete $args{profile})) {
       my $class   = __PACKAGE__ . "::Default::$name";
       my $profile = __load_class($class)->profile();
       my $encoder = delete($args{encoder}) // {};
       %$encoder = (
          %$profile,
          %$encoder,    # allow some overriding
          class => '::Default',    # but not on this one
       );
       %args = (encoder => $encoder);
    } ## end if (defined(my $name =...))
    my $wh = __PACKAGE__->new(%args);
    return sub { $wh->encode(@_) };
 } ## end sub crumbr
 
 sub __encoder {
    my ($e) = @_;
    if (!blessed($e)) {
       my ($class, @parameters) = $e;
       if (ref($e) eq 'HASH') {
          $class      = delete $e->{class};
          @parameters = %$e;
       }
       $class = '::Default' unless defined $class;
       $class = __PACKAGE__ . $class
         if substr($class, 0, 2) eq '::';
       $e = __load_class($class)->new(@parameters);
    } ## end if (!blessed($e))
    return $e;
 } ## end sub __encoder
 
 sub encode {
    my ($self, $data) = @_;
    my $encoder = $self->encoder();
    $encoder->reset();
 
    my @stack = ({closers => ''}, {data => $data, type => ref($data)},);
  ITERATION:
    while (@stack > 1) {    # frame #0 is dummy
       my $frame = $stack[-1];
       if ($frame->{type} eq 'ARRAY') {
          if (!scalar(@{$frame->{data}})) {
             $encoder->array_leaf(\@stack);
          }
          else {
             my $iterator = $frame->{iterator} //=
               $encoder->array_keys_iterator($frame->{data});
             if (defined(my $key = $iterator->())) {
                $frame->{encoded} = $encoder->array_key($key);
                $frame->{closers} =
                  $encoder->array_close() . $stack[-2]{closers};
                my $child_data = $frame->{data}[$key];
                push @stack,
                  {
                   data => $child_data,
                   type => ref($child_data),
                  };
                next ITERATION;
             } ## end if (defined(my $key = ...))
          } ## end else [ if (!scalar(@{$frame->...}))]
       } ## end if ($frame->{type} eq ...)
       elsif ($frame->{type} eq 'HASH') {
          if (!scalar(keys %{$frame->{data}})) {
             $encoder->hash_leaf(\@stack);
          }
          else {
             my $iterator = $frame->{iterator} //=
               $encoder->hash_keys_iterator($frame->{data});
             if (defined(my $key = $iterator->())) {
                $frame->{encoded} = $encoder->hash_key($key);
                $frame->{closers} =
                  $encoder->hash_close() . $stack[-2]{closers};
                my $child_data = $frame->{data}{$key};
                push @stack,
                  {
                   data => $child_data,
                   type => ref($child_data),
                  };
                next ITERATION;
             } ## end if (defined(my $key = ...))
          } ## end else [ if (!scalar(keys %{$frame...}))]
       } ## end elsif ($frame->{type} eq ...)
       else {    # treat as leaf scalar
          $encoder->scalar_leaf(\@stack);
       }
 
       # only leaves or end-of-container arrive here
       pop @stack;
    } ## end ITERATION: while (@stack > 1)
 
    return $encoder->result();
 } ## end sub encode
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr - Render data structures for easy searching and parsing
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 SYNOPSIS
 
    use Data::Crumber; # imports `crumbr`
 
    # some data to work with
    my $data = { what => 'ever', hey => 'you' };
 
    # crumbr provides an anonyous sub back. This has defaults
    my $csub = crumbr();
 
    # use it to encode the data
    my $encoded = $crumbr->($data);
    # {"here"}{"hey"}:"you"
    # {"here"}{"what"}:"ever"
 
    # URI profile simplifies things but loses something
    $encoded = crumbr(profile => 'URI')->($data);
    # here/hey "you"
    # here/what "ever"
 
    # JSON profile produces valid JSON "slices"
    $encoded = crumbr(profile => 'JSON')->($data);
    # {"here":{"hey":"you"}}
    # {"here":{"what":"ever"}}
 
    # Object Oriented Interface
    my $crobj = Data::Crumbr->new();
    $encoded = $crobj->encode($data); # same as default
 
 =head1 DESCRIPTION
 
 Data::Crumbr lets you render data structures in a way that can then be
 easily searched and parsed in "slices". The basic idea is that data
 shaped in this way will then be easily filtered in the shell for
 extracting interesting parts.
 
 The input data structure is traversed is if it is a tree (so no
 circular structures please!), and a I<record> is generated for each leaf
 in the tree. Depending on the backend and the configurations, the full
 path from the root to the parent of the leaf is represented as a
 sequence of keys (which can be hash keys or array indexes) followed by
 the value. This should make your life easier e.g. in the shell, so that
 you can specify the full path to the data structure part you're
 interested into with common Unix tools like C<grep> and/or C<sed>.
 
 =head2 Example
 
 Suppose you have the following data structure in Perl:
 
    my $data = {
       one => '1',
       two => 2,
       three => 3.1,
       four => '4.0',
       true => \1,
       false => \0,
       array => [
          qw< what ever >,
          { inner => 'part', empty => [] }
        ],
       hash => {
          'with ♜' => {},
          ar => [ 1..3 ],
          something => "funny \x{263A} ☻",
       },
    };
 
 If you encode this e.g. in JSON, it will be easy to parse with
 the right program, but not from the shell, even if you pretty
 print it:
 
    {
       "hash" : {
          "something" : "funny ☺ ☻",
          "with ♜" : {},
          "ar" : [
             1,
             2,
             3
          ]
       },
       "one" : "1",
       "array" : [
          "what",
          "ever",
          {
             "inner" : "part",
             "empty" : []
          }
       ],
       "four" : "4.0",
       "true" : true,
       "two" : 2,
       "three" : 3.1,
       "false" : false
    }
 
 How do you get the second item in the array C<ar>i inside the
 hash C<hash>? Would you do better with YAML instead?
 
    ---
    array:
      - what
      - ever
      - empty: []
        inner: part
    false: !!perl/ref
      =: 0
    four: 4.0
    hash:
      ar:
        - 1
        - 2
        - 3
      something: funny ☺ ☻
      with ♜: {}
    one: 1
    three: 3.1
    true: !!perl/ref
      =: 1
    two: 2
 
 Not really. Data::Crumbr lets you represent the data in a
 more verbose but easily consumable way for the shell. Hence,
 this:
 
    use Data::Crumbr;
    print crumbr()->($data), "\n";
 
 will give you this:
 
    {"array"}[0]:"what"
    {"array"}[1]:"ever"
    {"array"}[2]{"empty"}:[]
    {"array"}[2]{"inner"}:"part"
    {"false"}:false
    {"four"}:"4.0"
    {"hash"}{"ar"}[0]:1
    {"hash"}{"ar"}[1]:2
    {"hash"}{"ar"}[2]:3
    {"hash"}{"something"}:"funny \u263A \u263B"
    {"hash"}{"with \u265C"}:{}
    {"one"}:"1"
    {"three"}:3.1
    {"true"}:true
    {"two"}:2
 
 Now it should pretty easy for a shell program to get at the
 data, e.g. with this C<sed> substitution:
 
    sed -ne 's/^{"hash"}{"ar"}\[2\]://p'
 
 =head2 Profiles
 
 If you don't like the default encoding, you can get a different
 one by using a I<profile>. This is a set of configurations for
 C<Data::Crumbr::Default>, which is a pretty generic class for
 representing a wide class of possible record-oriented encodings.
 
 A C<Data::Crumbr::Default> encoder is defined in terms of the following
 parameters:
 
 =over
 
 =item C<array_open>
 
 sequence to put when an array is opened
 
 =item C<array_close>
 
 sequence to put when an array is closed
 
 =item C<array_key_prefix>
 
 sequence to put before an array's index
 
 =item C<array_key_suffix>
 
 sequence to put after an array's index
 
 =item C<array_key_encoder>
 
 a reference to a function that encodes an array's index
 
 =item C<hash_open>
 
 sequence to put when a hash is opened
 
 =item C<hash_close>
 
 sequence to put when a hash is closed
 
 =item C<hash_key_prefix>
 
 sequence to put before a hash's key
 
 =item C<hash_key_suffix>
 
 sequence to put after a hash's key
 
 =item C<hash_key_encoder>
 
 a reference to a function that encodes a hash's key
 
 =item C<value_encoder>
 
 a reference to a function that encodes a leaf value
 
 =item C<keys_separator>
 
 sequence to separate the keys breadcrumb
 
 =item C<value_separator>
 
 sequence to separate the keys from the value
 
 =back
 
 By default, Data::Crumbr ships with the following profiles:
 
 =over
 
 =item B<< Default >>
 
 i.e. the profile you get by default, and what you saw in action in the
 example above. It has the following settings:
 
 =over
 
 =item *
 
 no openers and closers:
 
    array_open  => ''
    array_close => ''
    hash_open   => ''
    hash_close  => ''
 
 =item *
 
 array keys are printed verbatim, surrounded by square brackets:
 
    array_key_prefix  => '['
    array_key_suffix  => ']'
    array_key_encoder => Data::Crumbr::Util::id_encoder
 
 =item *
 
 hash keys encoded as JSON strings, surrounded by curly brackets:
 
    hash_key_prefix   => '['
    hash_key_suffix   => ']'
    hash_key_encoder  => Data::Crumbr::Util::json_leaf_encoder
 
 =item *
 
 no separator between keys (because they already stand out very clearly,
 but a colon to separate the sequence of keys from the value:
 
    keys_separator  => ''
    value_separator => ':'
 
 =item *
 
 leaf values encoded as JSON scalars:
 
    value_encoder => Data::Crumbr::Util::json_leaf_encoder
 
 =back
 
 This is quite verbose, but lets you specify very precisely what you are
 looking for because the hash keys stand out clearly with respect to
 array identifiers, i.e. there's no chance that you will mistake an array
 index for a hash key (because they are embedded in different bracket
 types).
 
 =item B<< JSON >>
 
 this profile always provides you compact JSON-compliant string
 representations that contain only one single leaf value.
 
 It has the following characteristics:
 
 =over
 
 =item *
 
 openers and closers are what you would expect for JSON objects and
 arrays:
 
    array_open  => '['
    array_close => ']'
    hash_open   => '{'
    hash_close  => '}'
 
 =item *
 
 there is only one non-empty suffix, i.e. the hash key suffix, so that
 we can separate the hash key from the value with C<:> according to JSON:
 
    array_key_prefix => ''
    array_key_suffix => ''
    hash_key_prefix  => ''
    hash_key_suffix  => ':'
 
 =item *
 
 array keys are not printed:
 
    array_key_encoder => sub { }
 
 =item *
 
 hash keys are JSON encoded:
 
    hash_key_encoder  => Data::Crumbr::Util::json_encoder()
 
 =item *
 
 no separators are needed:
 
    keys_separator  => ''
    value_separator => ''
 
 =item *
 
 leaf values encoded as JSON scalars:
 
    value_encoder => Data::Crumbr::Util::json_leaf_encoder
 
 =back
 
 =item B<< URI >>
 
 this is the simplest of the profiles, and sacrifices the possibility to
 distinguish between hash and array keys to the altar of simplicity.
 
 It has the following characteristics:
 
 =over
 
 =item *
 
 no openers, closers, prefixes or suffixes:
 
    array_open  => ''
    array_close => ''
    array_key_prefix => ''
    array_key_suffix => ''
 
    hash_open   => ''
    hash_close  => ''
    hash_key_prefix => ''
    hash_key_suffix => ''
 
 =item *
 
 array keys are printed verbatim
 
 =item *
 
 hash keys are URI encoded
 
    hash_key_encoder  => Data::Crumbr::Util::uri_encoder
 
 =item *
 
 keys are separated by a slash character C</> and values are separated by
 a single space C< >:
 
    keys_separator  => '/'
    value_separator => ' '
 
 =item *
 
 leaf values encoded as JSON scalars:
 
    value_encoder => Data::Crumbr::Util::json_leaf_encoder
 
 =back
 
 =back
 
 =head1 INTERFACE
 
 There are two ways to use Data::Crumber: a function C<crumbr>,
 that is exported by default, and the object-oriented interface.
 
 =over
 
 =item B<< crumbr >>
 
    $subref = crumbr(%args); # OR
    $subref = crumbr(\%args);
 
 get a I<crumbr> generator based on provided C<%args>.
 
 Returns a reference to a sub, which can then be called upon a data
 structure in order to get the I<crumbed> version.
 
 The input arguments can be:
 
 =over
 
 =item C<< encoder >>
 
 details about the encoder, see L</Profiles> for the available key-value
 pairs. In addition, you can also set the following:
 
 =over
 
 =item C<< output >>
 
 the output channel to use for sending encoded data. This can be:
 
 =over
 
 =item * I<filename>
 
 this will be opened in raw mode and used to send the output
 
 =item * I<filehandle>
 
 used directly
 
 =item * I<array reference>
 
 each output line will be pushed as a new element in the array
 
 =item * I<object reference>
 
 which is assumed to support the C<print()> method, that will be called
 with each generated line
 
 =item * I<sub reference>
 
 which will be called with each generated line
 
 =back
 
 =back
 
 =item C<< profile >>
 
 the name of a profile to use as a base - see L</Profiles>. Settings in
 the profile are always overridden by corresponding ones in the provided
 encoder, if any.
 
 =back
 
 =item B<< encode >>
 
    $dc->encode($data_structure);
 
 generate the encoding for the provided C<$data_structure>. Output is
 generated depending on how it is specified, see L</crumbr> above.
 
 =item B<< new >>
 
    my $dc = Data::Crumber->new(encoder => \%args);
 
 create a new instance of C<Data::Crumbr>. Data provided for the
 C<encoder> parameter (i.e. C<%args>) are those discussed in
 L</Profiles>.
 
 The new instance can then be used to encode data using the C</encode>
 method.
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default;
 $Data::Crumbr::Default::VERSION = '0.1.0';
 # ABSTRACT: Default renderer for Data::Crumbr
 
 use Mo qw< default coerce >;
 
 use 5.018;
 use strict;
 use warnings;
 use Carp;
 use English qw< -no_match_vars >;
 use Scalar::Util qw< blessed >;
 use Data::Crumbr::Util;
 
 my $jenc = Data::Crumbr::Util::json_leaf_encoder();
 my $ienc = Data::Crumbr::Util::id_encoder();
 
 has array_open        => (default => sub { '' });
 has array_close       => (default => sub { '' });
 has array_key_prefix  => (default => sub { '[' });
 has array_key_suffix  => (default => sub { ']' });
 has array_key_encoder => (default => sub { $ienc });
 has hash_open         => (default => sub { '' });
 has hash_close        => (default => sub { '' });
 has hash_key_prefix   => (default => sub { '{' });
 has hash_key_suffix   => (default => sub { '}' });
 has hash_key_encoder  => (default => sub { $jenc });
 has value_encoder     => (default => sub { $jenc });
 has keys_separator    => (default => sub { '' });
 has value_separator   => (default => sub { ':' });
 
 has output => (
    default => sub { __output() },
    coerce  => \&__output,
 );
 
 sub __output {
    my ($output) = @_;
    $output //= [];
    my $reftype = ref $output;
 
    if (!$reftype) {    # filename, transform into filehandle
       my $fh = \*STDOUT;
       if ($output ne '-') {
          $fh = undef;
          open $fh, '>', $output
            or croak "open('$output'): $OS_ERROR";
       }
       binmode $fh, ':raw'
         or croak "binmode() on $output: $OS_ERROR";
       $reftype = ref($output = $fh);
    } ## end if (!$reftype)
 
    return sub {
       return unless @_;
       print {$output} $_[0], "\n";
      }
      if $reftype eq 'GLOB';
 
    return sub {
       return $output unless @_;
       push @$output, $_[0];
      }
      if $reftype eq 'ARRAY';
 
    return sub {
       return unless @_;
       $output->print($_[0]);
      }
      if blessed($output);
 
    return sub {
       return unless @_;
       return $output->($_[0]);
      }
      if $reftype eq 'CODE';
 
    croak "invalid output";
 } ## end sub __output
 
 sub leaf {
    my ($self, $stack) = @_;
 
    my $venc       = $self->value_encoder();
    my @components = $venc->($stack->[-1]{data});
 
    my @keys = map { $_->{encoded} } @$stack;
    shift @keys;    # first item of @$stack is dummy
    pop @keys;      # last item of @$stack is the leaf, drop it
 
    my $closers = '';
    if (@keys) {
       unshift @components, join $self->keys_separator(), @keys;
       $closers = $stack->[-2]{closers};
    }
 
    my $record = join $self->value_separator(), @components;
    $self->output()->($record . $closers);
 } ## end sub leaf
 
 {
    no strict 'refs';
    *scalar_leaf = \&leaf;
    *array_leaf  = \&leaf;
    *hash_leaf   = \&leaf;
 }
 
 sub array_keys_iterator {
    my ($self, $aref) = @_;
    my $i   = 0;
    my $sup = @$aref;
    return sub {
       return if $i >= $sup;
       return $i++;
    };
 } ## end sub array_keys_iterator
 
 sub hash_keys_iterator {
    my ($self, $href) = @_;
    my @keys = sort keys %$href;    # memory intensive...
    return sub { return shift @keys };
 }
 
 sub array_key {
    my ($self, $key) = @_;
    return join '', $self->array_open(),
      $self->array_key_prefix(),
      $self->array_key_encoder()->($key),
      $self->array_key_suffix();
 } ## end sub array_key
 
 sub hash_key {
    my ($self, $key) = @_;
    return join '', $self->hash_open(),
      $self->hash_key_prefix(),
      $self->hash_key_encoder()->($key),
      $self->hash_key_suffix();
 } ## end sub hash_key
 
 sub result {
    my ($self) = @_;
    my $output = $self->output()->()
      or return;
    return join "\n", @$output;
 } ## end sub result
 
 sub reset {
    my ($self) = @_;
    my $output = $self->output()->()
      or return;
    @$output = ();
    return;
 } ## end sub reset
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr::Default - Default renderer for Data::Crumbr
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 DESCRIPTION
 
 This is the default encoder implementation, and most probably the only
 oney you really need. And most probably, you really not need to directly
 use it.
 
 =head1 INTERFACE
 
 =over
 
 =item B<< array_key >>
 
 returns the encoded array key, optionally opening an array and keeping
 into account the prefix, the suffix and the encoder for the key
 
 =item B<< array_keys_iterator >>
 
 returns an iterator sub starting from 0 up to the number of elements in
 the array
 
 =item B<< hash_key >>
 
 returns the encoded hash key, optionally opening an hash and keeping
 into account the prefix, the suffix and the encoder for the key
 
 =item B<< hash_keys_iterator >>
 
 returns an iterator sub that returns each key in the input hash, sorted
 lexicographically
 
 =item B<< leaf >>
 
 =item B<< array_leaf >>
 
 =item B<< hash_leaf >>
 
 =item B<< scalar_leaf >>
 
 this method is called whenever an external iteration component hits a
 leaf and wants to push a new encoded record to the output
 
 =item B<< new >>
 
    my $enc = Data::Crumbr::Default->new(%args);
 
 create a new encoder object
 
 =item B<< reset >>
 
 reset the encoder, i.e. wipe out all the internal state to start a new
 encoding cycle.
 
 =item B<< result >>
 
 get the outcome of the encoding. Not guaranteed to work.
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/Default.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::Default;
 $Data::Crumbr::Default::Default::VERSION = '0.1.0';
 # ABSTRACT: "Default" profile for Data::Crumbr::Default
 
 # Default is default... nothing is set here!
 sub profile { return {}; }
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr::Default::Default - "Default" profile for Data::Crumbr::Default
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 DESCRIPTION
 
 Profile for default (exact) encoder
 
 =head1 INTERFACE
 
 =over
 
 =item B<< profile >>
 
    my $profile = Data::Crumbr::Default::Default->profile();
 
 returns a default profile, i.e. encoder data to be used to instantiate a
 Data::Crumbr::Default encoder. See L</Data::Crumbr> for details about
 this profile.
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/JSON.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::JSON;
 $Data::Crumbr::Default::JSON::VERSION = '0.1.0';
 # ABSTRACT: "JSON" profile for Data::Crumbr::Default
 use Data::Crumbr::Util;
 
 sub profile {
    my $json_encoder = Data::Crumbr::Util::json_leaf_encoder();
    return {
       hash_open       => '{',
       hash_key_prefix => '',
       hash_key_suffix => ':',
       hash_close      => '}',
 
       array_open       => '[',
       array_key_prefix => '',
       array_key_suffix => '',
       array_close      => ']',
 
       keys_separator    => '',
       value_separator   => '',
       array_key_encoder => sub { },
       hash_key_encoder  => $json_encoder,
       value_encoder     => $json_encoder,
    };
 } ## end sub profile
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr::Default::JSON - "JSON" profile for Data::Crumbr::Default
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 DESCRIPTION
 
 Profile for JSON encoder
 
 =head1 INTERFACE
 
 =over
 
 =item B<< profile >>
 
    my $profile = Data::Crumbr::Default::JSON->profile();
 
 returns a default profile, i.e. encoder data to be used to instantiate a
 Data::Crumbr::Default encoder. See L</Data::Crumbr> for details about
 this profile.
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/URI.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::URI;
 $Data::Crumbr::Default::URI::VERSION = '0.1.0';
 # ABSTRACT: "JSON" profile for Data::Crumbr::Default
 use Data::Crumbr::Util;
 
 sub profile {
    my $json_encoder = Data::Crumbr::Util::json_leaf_encoder();
    my $uri_encoder  = Data::Crumbr::Util::uri_encoder();
    return {
       array_open        => '',
       array_close       => '',
       array_key_prefix  => '',
       array_key_suffix  => '',
 
       hash_open         => '',
       hash_close        => '',
       hash_key_prefix   => '',
       hash_key_suffix   => '',
 
       keys_separator    => '/',
       value_separator   => ' ',
 
       array_key_encoder => $uri_encoder,
       hash_key_encoder  => $uri_encoder,
       value_encoder     => $json_encoder,
    };
 } ## end sub profile
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr::Default::URI - "JSON" profile for Data::Crumbr::Default
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 DESCRIPTION
 
 Profile for URI encoder
 
 =head1 INTERFACE
 
 =over
 
 =item B<< profile >>
 
    my $profile = Data::Crumbr::Default::URI->profile();
 
 returns a default profile, i.e. encoder data to be used to instantiate a
 Data::Crumbr::Default encoder. See L</Data::Crumbr> for details about
 this profile.
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Util.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Util;
 $Data::Crumbr::Util::VERSION = '0.1.0';
 # ABSTRACT: utility functions for Data::Crumbr
 use 5.018;
 use strict;
 use Carp;
 use Scalar::Util qw< reftype blessed >;
 
 sub json_leaf_encoder {
    require B;
    return \&_json_leaf_encode;
 }
 
 sub _json_leaf_encode {
    return 'null' unless defined $_[0];
 
    my $reftype = ref($_[0]);
    return '[]' if $reftype eq 'ARRAY';
    return '{}' if $reftype eq 'HASH';
    return (${$_[0]} ? 'true' : 'false')
      if $reftype eq 'SCALAR';
 
    if (my $package = blessed($_[0])) {
       my $reftype = reftype($_[0]);
       return (${$_[0]} ? 'true' : 'false')
         if ($reftype eq 'SCALAR') && ($package =~ /bool/mxsi);
    }
 
    croak "unsupported ref type $reftype" if $reftype;
 
    my $number_flags = B::SVp_IOK() | B::SVp_NOK();
    return $_[0]
      if (B::svref_2object(\$_[0])->FLAGS() & $number_flags)
      && 0 + $_[0] eq $_[0]
      && $_[0] * 0 == 0;
 
    state $slash_escaped = {
       0x22 => '"',
       0x5C => "\\",
       0x2F => '/',
       0x08 => 'b',
       0x0C => 'f',
       0x0A => 'n',
       0x0D => 'r',
       0x09 => 't',
    };
    my $string = join '', map {
       my $cp = ord($_);
 
       if (exists $slash_escaped->{$cp}) {
          "\\$slash_escaped->{$cp}";
       }
       elsif ($cp >= 32 && $cp < 128) {    # ASCII
          $_;
       }
       elsif ($cp < 0x10000) {             # controls & BML
          sprintf "\\u%4.4X", $cp;
       }
       else {                              # beyond BML
          my $hi = ($cp - 0x10000) / 0x400 + 0xD800;
          my $lo = ($cp - 0x10000) % 0x400 + 0xDC00;
          sprintf "\\u%4.4X\\u%4.4X", $hi, $lo;
       }
    } split //, $_[0];
    return qq<"> . $string . qq<">;
 } ## end sub _json_leaf_encode
 
 sub uri_encoder {
    require Encode;
    return \&_uri_encoder;
 }
 
 sub _uri_encoder {
    my $octets = Encode::encode('UTF-8', $_[0], Encode::FB_CROAK());
    state $is_unreserved =
      {map { $_ => 1 } ('a' .. 'z', 'A' .. 'Z', '0' .. '9', qw< - _ . ~ >)};
    return join '',
      map { $is_unreserved->{$_} ? $_ : sprintf('%%%2.2X', ord $_); }
      split //, $octets;
 } ## end sub _uri_encoder
 
 sub id_encoder {
    return sub { $_[0] };
 }
 
 1;
 
 __END__
 
 =pod
 
 =encoding utf-8
 
 =head1 NAME
 
 Data::Crumbr::Util - utility functions for Data::Crumbr
 
 =head1 VERSION
 
 version 0.1.0
 
 =head1 DESCRIPTION
 
 Utility functions for Data::Crumbr.
 
 =head2 INTERFACE
 
 =over
 
 =item B<< id_encoder >>
 
    my $encoder = id_encoder();
 
 trivial encoding function that just returns its first argument (i.e. no
 real encoding is performed).
 
 =item B<< json_leaf_encoder >>
 
    my $encoder = json_leaf_encoder();
 
 encoding function that returns a JSON-compliant value, only for leaf
 values. It works on:
 
 =over
 
 =item *
 
 plain strings, returned after JSON encoding (e.g. tranformation of
 newlines, etc.)
 
 =item *
 
 empty array references, in which case string C<[]> is returned
 
 =item *
 
 empty hash references, in which case string C<{}> is returned
 
 =item *
 
 null values, in which case string C<null> is returned
 
 =back
 
 =item B<< uri_encoder >>
 
    my $encoder = uri_encoder();
 
 encoding function that then encodes strings according to URI encoding
 (i.e. percent-encoding).
 
 =back
 
 =head1 AUTHOR
 
 Flavio Poletti <polettix@cpan.org>
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>
 
 This module is free software.  You can redistribute it and/or
 modify it under the terms of the Artistic License 2.0.
 
 This program is distributed in the hope that it will be useful,
 but without any warranty; without even the implied warranty of
 merchantability or fitness for a particular purpose.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'JSON/PP.pm' => <<'END_OF_FILE',
 package JSON::PP;
 
 # JSON-2.0
 
 use 5.005;
 use strict;
 use base qw(Exporter);
 use overload ();
 
 use Carp ();
 use B ();
 #use Devel::Peek;
 
 $JSON::PP::VERSION = '2.27202';
 
 @JSON::PP::EXPORT = qw(encode_json decode_json from_json to_json);
 
 # instead of hash-access, i tried index-access for speed.
 # but this method is not faster than what i expected. so it will be changed.
 
 use constant P_ASCII                => 0;
 use constant P_LATIN1               => 1;
 use constant P_UTF8                 => 2;
 use constant P_INDENT               => 3;
 use constant P_CANONICAL            => 4;
 use constant P_SPACE_BEFORE         => 5;
 use constant P_SPACE_AFTER          => 6;
 use constant P_ALLOW_NONREF         => 7;
 use constant P_SHRINK               => 8;
 use constant P_ALLOW_BLESSED        => 9;
 use constant P_CONVERT_BLESSED      => 10;
 use constant P_RELAXED              => 11;
 
 use constant P_LOOSE                => 12;
 use constant P_ALLOW_BIGNUM         => 13;
 use constant P_ALLOW_BAREKEY        => 14;
 use constant P_ALLOW_SINGLEQUOTE    => 15;
 use constant P_ESCAPE_SLASH         => 16;
 use constant P_AS_NONBLESSED        => 17;
 
 use constant P_ALLOW_UNKNOWN        => 18;
 
 use constant OLD_PERL => $] < 5.008 ? 1 : 0;
 
 BEGIN {
     my @xs_compati_bit_properties = qw(
             latin1 ascii utf8 indent canonical space_before space_after allow_nonref shrink
             allow_blessed convert_blessed relaxed allow_unknown
     );
     my @pp_bit_properties = qw(
             allow_singlequote allow_bignum loose
             allow_barekey escape_slash as_nonblessed
     );
 
     # Perl version check, Unicode handling is enable?
     # Helper module sets @JSON::PP::_properties.
     if ($] < 5.008 ) {
         my $helper = $] >= 5.006 ? 'JSON::PP::Compat5006' : 'JSON::PP::Compat5005';
         eval qq| require $helper |;
         if ($@) { Carp::croak $@; }
     }
 
     for my $name (@xs_compati_bit_properties, @pp_bit_properties) {
         my $flag_name = 'P_' . uc($name);
 
         eval qq/
             sub $name {
                 my \$enable = defined \$_[1] ? \$_[1] : 1;
 
                 if (\$enable) {
                     \$_[0]->{PROPS}->[$flag_name] = 1;
                 }
                 else {
                     \$_[0]->{PROPS}->[$flag_name] = 0;
                 }
 
                 \$_[0];
             }
 
             sub get_$name {
                 \$_[0]->{PROPS}->[$flag_name] ? 1 : '';
             }
         /;
     }
 
 }
 
 
 
 # Functions
 
 my %encode_allow_method
      = map {($_ => 1)} qw/utf8 pretty allow_nonref latin1 self_encode escape_slash
                           allow_blessed convert_blessed indent indent_length allow_bignum
                           as_nonblessed
                         /;
 my %decode_allow_method
      = map {($_ => 1)} qw/utf8 allow_nonref loose allow_singlequote allow_bignum
                           allow_barekey max_size relaxed/;
 
 
 my $JSON; # cache
 
 sub encode_json ($) { # encode
     ($JSON ||= __PACKAGE__->new->utf8)->encode(@_);
 }
 
 
 sub decode_json { # decode
     ($JSON ||= __PACKAGE__->new->utf8)->decode(@_);
 }
 
 # Obsoleted
 
 sub to_json($) {
    Carp::croak ("JSON::PP::to_json has been renamed to encode_json.");
 }
 
 
 sub from_json($) {
    Carp::croak ("JSON::PP::from_json has been renamed to decode_json.");
 }
 
 
 # Methods
 
 sub new {
     my $class = shift;
     my $self  = {
         max_depth   => 512,
         max_size    => 0,
         indent      => 0,
         FLAGS       => 0,
         fallback      => sub { encode_error('Invalid value. JSON can only reference.') },
         indent_length => 3,
     };
 
     bless $self, $class;
 }
 
 
 sub encode {
     return $_[0]->PP_encode_json($_[1]);
 }
 
 
 sub decode {
     return $_[0]->PP_decode_json($_[1], 0x00000000);
 }
 
 
 sub decode_prefix {
     return $_[0]->PP_decode_json($_[1], 0x00000001);
 }
 
 
 # accessor
 
 
 # pretty printing
 
 sub pretty {
     my ($self, $v) = @_;
     my $enable = defined $v ? $v : 1;
 
     if ($enable) { # indent_length(3) for JSON::XS compatibility
         $self->indent(1)->indent_length(3)->space_before(1)->space_after(1);
     }
     else {
         $self->indent(0)->space_before(0)->space_after(0);
     }
 
     $self;
 }
 
 # etc
 
 sub max_depth {
     my $max  = defined $_[1] ? $_[1] : 0x80000000;
     $_[0]->{max_depth} = $max;
     $_[0];
 }
 
 
 sub get_max_depth { $_[0]->{max_depth}; }
 
 
 sub max_size {
     my $max  = defined $_[1] ? $_[1] : 0;
     $_[0]->{max_size} = $max;
     $_[0];
 }
 
 
 sub get_max_size { $_[0]->{max_size}; }
 
 
 sub filter_json_object {
     $_[0]->{cb_object} = defined $_[1] ? $_[1] : 0;
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub filter_json_single_key_object {
     if (@_ > 1) {
         $_[0]->{cb_sk_object}->{$_[1]} = $_[2];
     }
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub indent_length {
     if (!defined $_[1] or $_[1] > 15 or $_[1] < 0) {
         Carp::carp "The acceptable range of indent_length() is 0 to 15.";
     }
     else {
         $_[0]->{indent_length} = $_[1];
     }
     $_[0];
 }
 
 sub get_indent_length {
     $_[0]->{indent_length};
 }
 
 sub sort_by {
     $_[0]->{sort_by} = defined $_[1] ? $_[1] : 1;
     $_[0];
 }
 
 sub allow_bigint {
     Carp::carp("allow_bigint() is obsoleted. use allow_bignum() insted.");
 }
 
 ###############################
 
 ###
 ### Perl => JSON
 ###
 
 
 { # Convert
 
     my $max_depth;
     my $indent;
     my $ascii;
     my $latin1;
     my $utf8;
     my $space_before;
     my $space_after;
     my $canonical;
     my $allow_blessed;
     my $convert_blessed;
 
     my $indent_length;
     my $escape_slash;
     my $bignum;
     my $as_nonblessed;
 
     my $depth;
     my $indent_count;
     my $keysort;
 
 
     sub PP_encode_json {
         my $self = shift;
         my $obj  = shift;
 
         $indent_count = 0;
         $depth        = 0;
 
         my $idx = $self->{PROPS};
 
         ($ascii, $latin1, $utf8, $indent, $canonical, $space_before, $space_after, $allow_blessed,
             $convert_blessed, $escape_slash, $bignum, $as_nonblessed)
          = @{$idx}[P_ASCII .. P_SPACE_AFTER, P_ALLOW_BLESSED, P_CONVERT_BLESSED,
                     P_ESCAPE_SLASH, P_ALLOW_BIGNUM, P_AS_NONBLESSED];
 
         ($max_depth, $indent_length) = @{$self}{qw/max_depth indent_length/};
 
         $keysort = $canonical ? sub { $a cmp $b } : undef;
 
         if ($self->{sort_by}) {
             $keysort = ref($self->{sort_by}) eq 'CODE' ? $self->{sort_by}
                      : $self->{sort_by} =~ /\D+/       ? $self->{sort_by}
                      : sub { $a cmp $b };
         }
 
         encode_error("hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this)")
              if(!ref $obj and !$idx->[ P_ALLOW_NONREF ]);
 
         my $str  = $self->object_to_json($obj);
 
         $str .= "\n" if ( $indent ); # JSON::XS 2.26 compatible
 
         unless ($ascii or $latin1 or $utf8) {
             utf8::upgrade($str);
         }
 
         if ($idx->[ P_SHRINK ]) {
             utf8::downgrade($str, 1);
         }
 
         return $str;
     }
 
 
     sub object_to_json {
         my ($self, $obj) = @_;
         my $type = ref($obj);
 
         if($type eq 'HASH'){
             return $self->hash_to_json($obj);
         }
         elsif($type eq 'ARRAY'){
             return $self->array_to_json($obj);
         }
         elsif ($type) { # blessed object?
             if (blessed($obj)) {
 
                 return $self->value_to_json($obj) if ( $obj->isa('JSON::PP::Boolean') );
 
                 if ( $convert_blessed and $obj->can('TO_JSON') ) {
                     my $result = $obj->TO_JSON();
                     if ( defined $result and ref( $result ) ) {
                         if ( refaddr( $obj ) eq refaddr( $result ) ) {
                             encode_error( sprintf(
                                 "%s::TO_JSON method returned same object as was passed instead of a new one",
                                 ref $obj
                             ) );
                         }
                     }
 
                     return $self->object_to_json( $result );
                 }
 
                 return "$obj" if ( $bignum and _is_bignum($obj) );
                 return $self->blessed_to_json($obj) if ($allow_blessed and $as_nonblessed); # will be removed.
 
                 encode_error( sprintf("encountered object '%s', but neither allow_blessed "
                     . "nor convert_blessed settings are enabled", $obj)
                 ) unless ($allow_blessed);
 
                 return 'null';
             }
             else {
                 return $self->value_to_json($obj);
             }
         }
         else{
             return $self->value_to_json($obj);
         }
     }
 
 
     sub hash_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
         my $del = ($space_before ? ' ' : '') . ':' . ($space_after ? ' ' : '');
 
         for my $k ( _sort( $obj ) ) {
             if ( OLD_PERL ) { utf8::decode($k) } # key for Perl 5.6 / be optimized
             push @res, string_to_json( $self, $k )
                           .  $del
                           . ( $self->object_to_json( $obj->{$k} ) || $self->value_to_json( $obj->{$k} ) );
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return   '{' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' )  . '}';
     }
 
 
     sub array_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
 
         for my $v (@$obj){
             push @res, $self->object_to_json($v) || $self->value_to_json($v);
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return '[' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' ) . ']';
     }
 
 
     sub value_to_json {
         my ($self, $value) = @_;
 
         return 'null' if(!defined $value);
 
         my $b_obj = B::svref_2object(\$value);  # for round trip problem
         my $flags = $b_obj->FLAGS;
 
         return $value # as is 
             if $flags & ( B::SVp_IOK | B::SVp_NOK ) and !( $flags & B::SVp_POK ); # SvTYPE is IV or NV?
 
         my $type = ref($value);
 
         if(!$type){
             return string_to_json($self, $value);
         }
         elsif( blessed($value) and  $value->isa('JSON::PP::Boolean') ){
             return $$value == 1 ? 'true' : 'false';
         }
         elsif ($type) {
             if ((overload::StrVal($value) =~ /=(\w+)/)[0]) {
                 return $self->value_to_json("$value");
             }
 
             if ($type eq 'SCALAR' and defined $$value) {
                 return   $$value eq '1' ? 'true'
                        : $$value eq '0' ? 'false'
                        : $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ? 'null'
                        : encode_error("cannot encode reference to scalar");
             }
 
              if ( $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ) {
                  return 'null';
              }
              else {
                  if ( $type eq 'SCALAR' or $type eq 'REF' ) {
                     encode_error("cannot encode reference to scalar");
                  }
                  else {
                     encode_error("encountered $value, but JSON can only represent references to arrays or hashes");
                  }
              }
 
         }
         else {
             return $self->{fallback}->($value)
                  if ($self->{fallback} and ref($self->{fallback}) eq 'CODE');
             return 'null';
         }
 
     }
 
 
     my %esc = (
         "\n" => '\n',
         "\r" => '\r',
         "\t" => '\t',
         "\f" => '\f',
         "\b" => '\b',
         "\"" => '\"',
         "\\" => '\\\\',
         "\'" => '\\\'',
     );
 
 
     sub string_to_json {
         my ($self, $arg) = @_;
 
         $arg =~ s/([\x22\x5c\n\r\t\f\b])/$esc{$1}/g;
         $arg =~ s/\//\\\//g if ($escape_slash);
         $arg =~ s/([\x00-\x08\x0b\x0e-\x1f])/'\\u00' . unpack('H2', $1)/eg;
 
         if ($ascii) {
             $arg = JSON_PP_encode_ascii($arg);
         }
 
         if ($latin1) {
             $arg = JSON_PP_encode_latin1($arg);
         }
 
         if ($utf8) {
             utf8::encode($arg);
         }
 
         return '"' . $arg . '"';
     }
 
 
     sub blessed_to_json {
         my $reftype = reftype($_[1]) || '';
         if ($reftype eq 'HASH') {
             return $_[0]->hash_to_json($_[1]);
         }
         elsif ($reftype eq 'ARRAY') {
             return $_[0]->array_to_json($_[1]);
         }
         else {
             return 'null';
         }
     }
 
 
     sub encode_error {
         my $error  = shift;
         Carp::croak "$error";
     }
 
 
     sub _sort {
         defined $keysort ? (sort $keysort (keys %{$_[0]})) : keys %{$_[0]};
     }
 
 
     sub _up_indent {
         my $self  = shift;
         my $space = ' ' x $indent_length;
 
         my ($pre,$post) = ('','');
 
         $post = "\n" . $space x $indent_count;
 
         $indent_count++;
 
         $pre = "\n" . $space x $indent_count;
 
         return ($pre,$post);
     }
 
 
     sub _down_indent { $indent_count--; }
 
 
     sub PP_encode_box {
         {
             depth        => $depth,
             indent_count => $indent_count,
         };
     }
 
 } # Convert
 
 
 sub _encode_ascii {
     join('',
         map {
             $_ <= 127 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_latin1 {
     join('',
         map {
             $_ <= 255 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_surrogates { # from perlunicode
     my $uni = $_[0] - 0x10000;
     return ($uni / 0x400 + 0xD800, $uni % 0x400 + 0xDC00);
 }
 
 
 sub _is_bignum {
     $_[0]->isa('Math::BigInt') or $_[0]->isa('Math::BigFloat');
 }
 
 
 
 #
 # JSON => Perl
 #
 
 my $max_intsize;
 
 BEGIN {
     my $checkint = 1111;
     for my $d (5..64) {
         $checkint .= 1;
         my $int   = eval qq| $checkint |;
         if ($int =~ /[eE]/) {
             $max_intsize = $d - 1;
             last;
         }
     }
 }
 
 { # PARSE 
 
     my %escapes = ( #  by Jeremy Muhlich <jmuhlich [at] bitflood.org>
         b    => "\x8",
         t    => "\x9",
         n    => "\xA",
         f    => "\xC",
         r    => "\xD",
         '\\' => '\\',
         '"'  => '"',
         '/'  => '/',
     );
 
     my $text; # json data
     my $at;   # offset
     my $ch;   # 1chracter
     my $len;  # text length (changed according to UTF8 or NON UTF8)
     # INTERNAL
     my $depth;          # nest counter
     my $encoding;       # json text encoding
     my $is_valid_utf8;  # temp variable
     my $utf8_len;       # utf8 byte length
     # FLAGS
     my $utf8;           # must be utf8
     my $max_depth;      # max nest nubmer of objects and arrays
     my $max_size;
     my $relaxed;
     my $cb_object;
     my $cb_sk_object;
 
     my $F_HOOK;
 
     my $allow_bigint;   # using Math::BigInt
     my $singlequote;    # loosely quoting
     my $loose;          # 
     my $allow_barekey;  # bareKey
 
     # $opt flag
     # 0x00000001 .... decode_prefix
     # 0x10000000 .... incr_parse
 
     sub PP_decode_json {
         my ($self, $opt); # $opt is an effective flag during this decode_json.
 
         ($self, $text, $opt) = @_;
 
         ($at, $ch, $depth) = (0, '', 0);
 
         if ( !defined $text or ref $text ) {
             decode_error("malformed JSON string, neither array, object, number, string or atom");
         }
 
         my $idx = $self->{PROPS};
 
         ($utf8, $relaxed, $loose, $allow_bigint, $allow_barekey, $singlequote)
             = @{$idx}[P_UTF8, P_RELAXED, P_LOOSE .. P_ALLOW_SINGLEQUOTE];
 
         if ( $utf8 ) {
             utf8::downgrade( $text, 1 ) or Carp::croak("Wide character in subroutine entry");
         }
         else {
             utf8::upgrade( $text );
         }
 
         $len = length $text;
 
         ($max_depth, $max_size, $cb_object, $cb_sk_object, $F_HOOK)
              = @{$self}{qw/max_depth  max_size cb_object cb_sk_object F_HOOK/};
 
         if ($max_size > 1) {
             use bytes;
             my $bytes = length $text;
             decode_error(
                 sprintf("attempted decode of JSON text of %s bytes size, but max_size is set to %s"
                     , $bytes, $max_size), 1
             ) if ($bytes > $max_size);
         }
 
         # Currently no effect
         # should use regexp
         my @octets = unpack('C4', $text);
         $encoding =   ( $octets[0] and  $octets[1]) ? 'UTF-8'
                     : (!$octets[0] and  $octets[1]) ? 'UTF-16BE'
                     : (!$octets[0] and !$octets[1]) ? 'UTF-32BE'
                     : ( $octets[2]                ) ? 'UTF-16LE'
                     : (!$octets[2]                ) ? 'UTF-32LE'
                     : 'unknown';
 
         white(); # remove head white space
 
         my $valid_start = defined $ch; # Is there a first character for JSON structure?
 
         my $result = value();
 
         return undef if ( !$result && ( $opt & 0x10000000 ) ); # for incr_parse
 
         decode_error("malformed JSON string, neither array, object, number, string or atom") unless $valid_start;
 
         if ( !$idx->[ P_ALLOW_NONREF ] and !ref $result ) {
                 decode_error(
                 'JSON text must be an object or array (but found number, string, true, false or null,'
                        . ' use allow_nonref to allow this)', 1);
         }
 
         Carp::croak('something wrong.') if $len < $at; # we won't arrive here.
 
         my $consumed = defined $ch ? $at - 1 : $at; # consumed JSON text length
 
         white(); # remove tail white space
 
         if ( $ch ) {
             return ( $result, $consumed ) if ($opt & 0x00000001); # all right if decode_prefix
             decode_error("garbage after JSON object");
         }
 
         ( $opt & 0x00000001 ) ? ( $result, $consumed ) : $result;
     }
 
 
     sub next_chr {
         return $ch = undef if($at >= $len);
         $ch = substr($text, $at++, 1);
     }
 
 
     sub value {
         white();
         return          if(!defined $ch);
         return object() if($ch eq '{');
         return array()  if($ch eq '[');
         return string() if($ch eq '"' or ($singlequote and $ch eq "'"));
         return number() if($ch =~ /[0-9]/ or $ch eq '-');
         return word();
     }
 
     sub string {
         my ($i, $s, $t, $u);
         my $utf16;
         my $is_utf8;
 
         ($is_valid_utf8, $utf8_len) = ('', 0);
 
         $s = ''; # basically UTF8 flag on
 
         if($ch eq '"' or ($singlequote and $ch eq "'")){
             my $boundChar = $ch;
 
             OUTER: while( defined(next_chr()) ){
 
                 if($ch eq $boundChar){
                     next_chr();
 
                     if ($utf16) {
                         decode_error("missing low surrogate character in surrogate pair");
                     }
 
                     utf8::decode($s) if($is_utf8);
 
                     return $s;
                 }
                 elsif($ch eq '\\'){
                     next_chr();
                     if(exists $escapes{$ch}){
                         $s .= $escapes{$ch};
                     }
                     elsif($ch eq 'u'){ # UNICODE handling
                         my $u = '';
 
                         for(1..4){
                             $ch = next_chr();
                             last OUTER if($ch !~ /[0-9a-fA-F]/);
                             $u .= $ch;
                         }
 
                         # U+D800 - U+DBFF
                         if ($u =~ /^[dD][89abAB][0-9a-fA-F]{2}/) { # UTF-16 high surrogate?
                             $utf16 = $u;
                         }
                         # U+DC00 - U+DFFF
                         elsif ($u =~ /^[dD][c-fC-F][0-9a-fA-F]{2}/) { # UTF-16 low surrogate?
                             unless (defined $utf16) {
                                 decode_error("missing high surrogate character in surrogate pair");
                             }
                             $is_utf8 = 1;
                             $s .= JSON_PP_decode_surrogates($utf16, $u) || next;
                             $utf16 = undef;
                         }
                         else {
                             if (defined $utf16) {
                                 decode_error("surrogate pair expected");
                             }
 
                             if ( ( my $hex = hex( $u ) ) > 127 ) {
                                 $is_utf8 = 1;
                                 $s .= JSON_PP_decode_unicode($u) || next;
                             }
                             else {
                                 $s .= chr $hex;
                             }
                         }
 
                     }
                     else{
                         unless ($loose) {
                             $at -= 2;
                             decode_error('illegal backslash escape sequence in string');
                         }
                         $s .= $ch;
                     }
                 }
                 else{
 
                     if ( ord $ch  > 127 ) {
                         if ( $utf8 ) {
                             unless( $ch = is_valid_utf8($ch) ) {
                                 $at -= 1;
                                 decode_error("malformed UTF-8 character in JSON string");
                             }
                             else {
                                 $at += $utf8_len - 1;
                             }
                         }
                         else {
                             utf8::encode( $ch );
                         }
 
                         $is_utf8 = 1;
                     }
 
                     if (!$loose) {
                         if ($ch =~ /[\x00-\x1f\x22\x5c]/)  { # '/' ok
                             $at--;
                             decode_error('invalid character encountered while parsing JSON string');
                         }
                     }
 
                     $s .= $ch;
                 }
             }
         }
 
         decode_error("unexpected end of string while parsing JSON string");
     }
 
 
     sub white {
         while( defined $ch  ){
             if($ch le ' '){
                 next_chr();
             }
             elsif($ch eq '/'){
                 next_chr();
                 if(defined $ch and $ch eq '/'){
                     1 while(defined(next_chr()) and $ch ne "\n" and $ch ne "\r");
                 }
                 elsif(defined $ch and $ch eq '*'){
                     next_chr();
                     while(1){
                         if(defined $ch){
                             if($ch eq '*'){
                                 if(defined(next_chr()) and $ch eq '/'){
                                     next_chr();
                                     last;
                                 }
                             }
                             else{
                                 next_chr();
                             }
                         }
                         else{
                             decode_error("Unterminated comment");
                         }
                     }
                     next;
                 }
                 else{
                     $at--;
                     decode_error("malformed JSON string, neither array, object, number, string or atom");
                 }
             }
             else{
                 if ($relaxed and $ch eq '#') { # correctly?
                     pos($text) = $at;
                     $text =~ /\G([^\n]*(?:\r\n|\r|\n|$))/g;
                     $at = pos($text);
                     next_chr;
                     next;
                 }
 
                 last;
             }
         }
     }
 
 
     sub array {
         my $a  = $_[0] || []; # you can use this code to use another array ref object.
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                     if (++$depth > $max_depth);
 
         next_chr();
         white();
 
         if(defined $ch and $ch eq ']'){
             --$depth;
             next_chr();
             return $a;
         }
         else {
             while(defined($ch)){
                 push @$a, value();
 
                 white();
 
                 if (!defined $ch) {
                     last;
                 }
 
                 if($ch eq ']'){
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq ']') {
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
             }
         }
 
         decode_error(", or ] expected while parsing array");
     }
 
 
     sub object {
         my $o = $_[0] || {}; # you can use this code to use another hash ref object.
         my $k;
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                 if (++$depth > $max_depth);
         next_chr();
         white();
 
         if(defined $ch and $ch eq '}'){
             --$depth;
             next_chr();
             if ($F_HOOK) {
                 return _json_object_hook($o);
             }
             return $o;
         }
         else {
             while (defined $ch) {
                 $k = ($allow_barekey and $ch ne '"' and $ch ne "'") ? bareKey() : string();
                 white();
 
                 if(!defined $ch or $ch ne ':'){
                     $at--;
                     decode_error("':' expected");
                 }
 
                 next_chr();
                 $o->{$k} = value();
                 white();
 
                 last if (!defined $ch);
 
                 if($ch eq '}'){
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq '}') {
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
             }
 
         }
 
         $at--;
         decode_error(", or } expected while parsing object/hash");
     }
 
 
     sub bareKey { # doesn't strictly follow Standard ECMA-262 3rd Edition
         my $key;
         while($ch =~ /[^\x00-\x23\x25-\x2F\x3A-\x40\x5B-\x5E\x60\x7B-\x7F]/){
             $key .= $ch;
             next_chr();
         }
         return $key;
     }
 
 
     sub word {
         my $word =  substr($text,$at-1,4);
 
         if($word eq 'true'){
             $at += 3;
             next_chr;
             return $JSON::PP::true;
         }
         elsif($word eq 'null'){
             $at += 3;
             next_chr;
             return undef;
         }
         elsif($word eq 'fals'){
             $at += 3;
             if(substr($text,$at,1) eq 'e'){
                 $at++;
                 next_chr;
                 return $JSON::PP::false;
             }
         }
 
         $at--; # for decode_error report
 
         decode_error("'null' expected")  if ($word =~ /^n/);
         decode_error("'true' expected")  if ($word =~ /^t/);
         decode_error("'false' expected") if ($word =~ /^f/);
         decode_error("malformed JSON string, neither array, object, number, string or atom");
     }
 
 
     sub number {
         my $n    = '';
         my $v;
 
         # According to RFC4627, hex or oct digts are invalid.
         if($ch eq '0'){
             my $peek = substr($text,$at,1);
             my $hex  = $peek =~ /[xX]/; # 0 or 1
 
             if($hex){
                 decode_error("malformed number (leading zero must not be followed by another digit)");
                 ($n) = ( substr($text, $at+1) =~ /^([0-9a-fA-F]+)/);
             }
             else{ # oct
                 ($n) = ( substr($text, $at) =~ /^([0-7]+)/);
                 if (defined $n and length $n > 1) {
                     decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
             }
 
             if(defined $n and length($n)){
                 if (!$hex and length($n) == 1) {
                    decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
                 $at += length($n) + $hex;
                 next_chr;
                 return $hex ? hex($n) : oct($n);
             }
         }
 
         if($ch eq '-'){
             $n = '-';
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after initial minus)");
             }
         }
 
         while(defined $ch and $ch =~ /\d/){
             $n .= $ch;
             next_chr;
         }
 
         if(defined $ch and $ch eq '.'){
             $n .= '.';
 
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after decimal point)");
             }
             else {
                 $n .= $ch;
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
         }
 
         if(defined $ch and ($ch eq 'e' or $ch eq 'E')){
             $n .= $ch;
             next_chr;
 
             if(defined($ch) and ($ch eq '+' or $ch eq '-')){
                 $n .= $ch;
                 next_chr;
                 if (!defined $ch or $ch =~ /\D/) {
                     decode_error("malformed number (no digits after exp sign)");
                 }
                 $n .= $ch;
             }
             elsif(defined($ch) and $ch =~ /\d/){
                 $n .= $ch;
             }
             else {
                 decode_error("malformed number (no digits after exp sign)");
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
 
         }
 
         $v .= $n;
 
         if ($v !~ /[.eE]/ and length $v > $max_intsize) {
             if ($allow_bigint) { # from Adam Sussman
                 require Math::BigInt;
                 return Math::BigInt->new($v);
             }
             else {
                 return "$v";
             }
         }
         elsif ($allow_bigint) {
             require Math::BigFloat;
             return Math::BigFloat->new($v);
         }
 
         return 0+$v;
     }
 
 
     sub is_valid_utf8 {
 
         $utf8_len = $_[0] =~ /[\x00-\x7F]/  ? 1
                   : $_[0] =~ /[\xC2-\xDF]/  ? 2
                   : $_[0] =~ /[\xE0-\xEF]/  ? 3
                   : $_[0] =~ /[\xF0-\xF4]/  ? 4
                   : 0
                   ;
 
         return unless $utf8_len;
 
         my $is_valid_utf8 = substr($text, $at - 1, $utf8_len);
 
         return ( $is_valid_utf8 =~ /^(?:
              [\x00-\x7F]
             |[\xC2-\xDF][\x80-\xBF]
             |[\xE0][\xA0-\xBF][\x80-\xBF]
             |[\xE1-\xEC][\x80-\xBF][\x80-\xBF]
             |[\xED][\x80-\x9F][\x80-\xBF]
             |[\xEE-\xEF][\x80-\xBF][\x80-\xBF]
             |[\xF0][\x90-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF4][\x80-\x8F][\x80-\xBF][\x80-\xBF]
         )$/x )  ? $is_valid_utf8 : '';
     }
 
 
     sub decode_error {
         my $error  = shift;
         my $no_rep = shift;
         my $str    = defined $text ? substr($text, $at) : '';
         my $mess   = '';
         my $type   = $] >= 5.008           ? 'U*'
                    : $] <  5.006           ? 'C*'
                    : utf8::is_utf8( $str ) ? 'U*' # 5.6
                    : 'C*'
                    ;
 
         for my $c ( unpack( $type, $str ) ) { # emulate pv_uni_display() ?
             $mess .=  $c == 0x07 ? '\a'
                     : $c == 0x09 ? '\t'
                     : $c == 0x0a ? '\n'
                     : $c == 0x0d ? '\r'
                     : $c == 0x0c ? '\f'
                     : $c <  0x20 ? sprintf('\x{%x}', $c)
                     : $c == 0x5c ? '\\\\'
                     : $c <  0x80 ? chr($c)
                     : sprintf('\x{%x}', $c)
                     ;
             if ( length $mess >= 20 ) {
                 $mess .= '...';
                 last;
             }
         }
 
         unless ( length $mess ) {
             $mess = '(end of string)';
         }
 
         Carp::croak (
             $no_rep ? "$error" : "$error, at character offset $at (before \"$mess\")"
         );
 
     }
 
 
     sub _json_object_hook {
         my $o    = $_[0];
         my @ks = keys %{$o};
 
         if ( $cb_sk_object and @ks == 1 and exists $cb_sk_object->{ $ks[0] } and ref $cb_sk_object->{ $ks[0] } ) {
             my @val = $cb_sk_object->{ $ks[0] }->( $o->{$ks[0]} );
             if (@val == 1) {
                 return $val[0];
             }
         }
 
         my @val = $cb_object->($o) if ($cb_object);
         if (@val == 0 or @val > 1) {
             return $o;
         }
         else {
             return $val[0];
         }
     }
 
 
     sub PP_decode_box {
         {
             text    => $text,
             at      => $at,
             ch      => $ch,
             len     => $len,
             depth   => $depth,
             encoding      => $encoding,
             is_valid_utf8 => $is_valid_utf8,
         };
     }
 
 } # PARSE
 
 
 sub _decode_surrogates { # from perlunicode
     my $uni = 0x10000 + (hex($_[0]) - 0xD800) * 0x400 + (hex($_[1]) - 0xDC00);
     my $un  = pack('U*', $uni);
     utf8::encode( $un );
     return $un;
 }
 
 
 sub _decode_unicode {
     my $un = pack('U', hex shift);
     utf8::encode( $un );
     return $un;
 }
 
 #
 # Setup for various Perl versions (the code from JSON::PP58)
 #
 
 BEGIN {
 
     unless ( defined &utf8::is_utf8 ) {
        require Encode;
        *utf8::is_utf8 = *Encode::is_utf8;
     }
 
     if ( $] >= 5.008 ) {
         *JSON::PP::JSON_PP_encode_ascii      = \&_encode_ascii;
         *JSON::PP::JSON_PP_encode_latin1     = \&_encode_latin1;
         *JSON::PP::JSON_PP_decode_surrogates = \&_decode_surrogates;
         *JSON::PP::JSON_PP_decode_unicode    = \&_decode_unicode;
     }
 
     if ($] >= 5.008 and $] < 5.008003) { # join() in 5.8.0 - 5.8.2 is broken.
         package JSON::PP;
         require subs;
         subs->import('join');
         eval q|
             sub join {
                 return '' if (@_ < 2);
                 my $j   = shift;
                 my $str = shift;
                 for (@_) { $str .= $j . $_; }
                 return $str;
             }
         |;
     }
 
 
     sub JSON::PP::incr_parse {
         local $Carp::CarpLevel = 1;
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_parse( @_ );
     }
 
 
     sub JSON::PP::incr_skip {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_skip;
     }
 
 
     sub JSON::PP::incr_reset {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_reset;
     }
 
     eval q{
         sub JSON::PP::incr_text : lvalue {
             $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new;
 
             if ( $_[0]->{_incr_parser}->{incr_parsing} ) {
                 Carp::croak("incr_text can not be called when the incremental parser already started parsing");
             }
             $_[0]->{_incr_parser}->{incr_text};
         }
     } if ( $] >= 5.006 );
 
 } # Setup for various Perl versions (the code from JSON::PP58)
 
 
 ###############################
 # Utilities
 #
 
 BEGIN {
     eval 'require Scalar::Util';
     unless($@){
         *JSON::PP::blessed = \&Scalar::Util::blessed;
         *JSON::PP::reftype = \&Scalar::Util::reftype;
         *JSON::PP::refaddr = \&Scalar::Util::refaddr;
     }
     else{ # This code is from Sclar::Util.
         # warn $@;
         eval 'sub UNIVERSAL::a_sub_not_likely_to_be_here { ref($_[0]) }';
         *JSON::PP::blessed = sub {
             local($@, $SIG{__DIE__}, $SIG{__WARN__});
             ref($_[0]) ? eval { $_[0]->a_sub_not_likely_to_be_here } : undef;
         };
         my %tmap = qw(
             B::NULL   SCALAR
             B::HV     HASH
             B::AV     ARRAY
             B::CV     CODE
             B::IO     IO
             B::GV     GLOB
             B::REGEXP REGEXP
         );
         *JSON::PP::reftype = sub {
             my $r = shift;
 
             return undef unless length(ref($r));
 
             my $t = ref(B::svref_2object($r));
 
             return
                 exists $tmap{$t} ? $tmap{$t}
               : length(ref($$r)) ? 'REF'
               :                    'SCALAR';
         };
         *JSON::PP::refaddr = sub {
           return undef unless length(ref($_[0]));
 
           my $addr;
           if(defined(my $pkg = blessed($_[0]))) {
             $addr .= bless $_[0], 'Scalar::Util::Fake';
             bless $_[0], $pkg;
           }
           else {
             $addr .= $_[0]
           }
 
           $addr =~ /0x(\w+)/;
           local $^W;
           #no warnings 'portable';
           hex($1);
         }
     }
 }
 
 
 # shamely copied and modified from JSON::XS code.
 
 $JSON::PP::true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
 $JSON::PP::false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
 
 sub is_bool { defined $_[0] and UNIVERSAL::isa($_[0], "JSON::PP::Boolean"); }
 
 sub true  { $JSON::PP::true  }
 sub false { $JSON::PP::false }
 sub null  { undef; }
 
 ###############################
 
 package JSON::PP::Boolean;
 
 use overload (
    "0+"     => sub { ${$_[0]} },
    "++"     => sub { $_[0] = ${$_[0]} + 1 },
    "--"     => sub { $_[0] = ${$_[0]} - 1 },
    fallback => 1,
 );
 
 
 ###############################
 
 package JSON::PP::IncrParser;
 
 use strict;
 
 use constant INCR_M_WS   => 0; # initial whitespace skipping
 use constant INCR_M_STR  => 1; # inside string
 use constant INCR_M_BS   => 2; # inside backslash
 use constant INCR_M_JSON => 3; # outside anything, count nesting
 use constant INCR_M_C0   => 4;
 use constant INCR_M_C1   => 5;
 
 $JSON::PP::IncrParser::VERSION = '1.01';
 
 my $unpack_format = $] < 5.006 ? 'C*' : 'U*';
 
 sub new {
     my ( $class ) = @_;
 
     bless {
         incr_nest    => 0,
         incr_text    => undef,
         incr_parsing => 0,
         incr_p       => 0,
     }, $class;
 }
 
 
 sub incr_parse {
     my ( $self, $coder, $text ) = @_;
 
     $self->{incr_text} = '' unless ( defined $self->{incr_text} );
 
     if ( defined $text ) {
         if ( utf8::is_utf8( $text ) and !utf8::is_utf8( $self->{incr_text} ) ) {
             utf8::upgrade( $self->{incr_text} ) ;
             utf8::decode( $self->{incr_text} ) ;
         }
         $self->{incr_text} .= $text;
     }
 
 
     my $max_size = $coder->get_max_size;
 
     if ( defined wantarray ) {
 
         $self->{incr_mode} = INCR_M_WS unless defined $self->{incr_mode};
 
         if ( wantarray ) {
             my @ret;
 
             $self->{incr_parsing} = 1;
 
             do {
                 push @ret, $self->_incr_parse( $coder, $self->{incr_text} );
 
                 unless ( !$self->{incr_nest} and $self->{incr_mode} == INCR_M_JSON ) {
                     $self->{incr_mode} = INCR_M_WS if $self->{incr_mode} != INCR_M_STR;
                 }
 
             } until ( length $self->{incr_text} >= $self->{incr_p} );
 
             $self->{incr_parsing} = 0;
 
             return @ret;
         }
         else { # in scalar context
             $self->{incr_parsing} = 1;
             my $obj = $self->_incr_parse( $coder, $self->{incr_text} );
             $self->{incr_parsing} = 0 if defined $obj; # pointed by Martin J. Evans
             return $obj ? $obj : undef; # $obj is an empty string, parsing was completed.
         }
 
     }
 
 }
 
 
 sub _incr_parse {
     my ( $self, $coder, $text, $skip ) = @_;
     my $p = $self->{incr_p};
     my $restore = $p;
 
     my @obj;
     my $len = length $text;
 
     if ( $self->{incr_mode} == INCR_M_WS ) {
         while ( $len > $p ) {
             my $s = substr( $text, $p, 1 );
             $p++ and next if ( 0x20 >= unpack($unpack_format, $s) );
             $self->{incr_mode} = INCR_M_JSON;
             last;
        }
     }
 
     while ( $len > $p ) {
         my $s = substr( $text, $p++, 1 );
 
         if ( $s eq '"' ) {
             if (substr( $text, $p - 2, 1 ) eq '\\' ) {
                 next;
             }
 
             if ( $self->{incr_mode} != INCR_M_STR  ) {
                 $self->{incr_mode} = INCR_M_STR;
             }
             else {
                 $self->{incr_mode} = INCR_M_JSON;
                 unless ( $self->{incr_nest} ) {
                     last;
                 }
             }
         }
 
         if ( $self->{incr_mode} == INCR_M_JSON ) {
 
             if ( $s eq '[' or $s eq '{' ) {
                 if ( ++$self->{incr_nest} > $coder->get_max_depth ) {
                     Carp::croak('json text or perl structure exceeds maximum nesting level (max_depth set too low?)');
                 }
             }
             elsif ( $s eq ']' or $s eq '}' ) {
                 last if ( --$self->{incr_nest} <= 0 );
             }
             elsif ( $s eq '#' ) {
                 while ( $len > $p ) {
                     last if substr( $text, $p++, 1 ) eq "\n";
                 }
             }
 
         }
 
     }
 
     $self->{incr_p} = $p;
 
     return if ( $self->{incr_mode} == INCR_M_STR and not $self->{incr_nest} );
     return if ( $self->{incr_mode} == INCR_M_JSON and $self->{incr_nest} > 0 );
 
     return '' unless ( length substr( $self->{incr_text}, 0, $p ) );
 
     local $Carp::CarpLevel = 2;
 
     $self->{incr_p} = $restore;
     $self->{incr_c} = $p;
 
     my ( $obj, $tail ) = $coder->PP_decode_json( substr( $self->{incr_text}, 0, $p ), 0x10000001 );
 
     $self->{incr_text} = substr( $self->{incr_text}, $p );
     $self->{incr_p} = 0;
 
     return $obj or '';
 }
 
 
 sub incr_text {
     if ( $_[0]->{incr_parsing} ) {
         Carp::croak("incr_text can not be called when the incremental parser already started parsing");
     }
     $_[0]->{incr_text};
 }
 
 
 sub incr_skip {
     my $self  = shift;
     $self->{incr_text} = substr( $self->{incr_text}, $self->{incr_c} );
     $self->{incr_p} = 0;
 }
 
 
 sub incr_reset {
     my $self = shift;
     $self->{incr_text}    = undef;
     $self->{incr_p}       = 0;
     $self->{incr_mode}    = 0;
     $self->{incr_nest}    = 0;
     $self->{incr_parsing} = 0;
 }
 
 ###############################
 
 
 1;
 __END__
 =pod
 
 =head1 NAME
 
 JSON::PP - JSON::XS compatible pure-Perl module.
 
 =head1 SYNOPSIS
 
  use JSON::PP;
 
  # exported functions, they croak on error
  # and expect/generate UTF-8
 
  $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
  $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;
 
  # OO-interface
 
  $coder = JSON::PP->new->ascii->pretty->allow_nonref;
  
  $json_text   = $json->encode( $perl_scalar );
  $perl_scalar = $json->decode( $json_text );
  
  $pretty_printed = $json->pretty->encode( $perl_scalar ); # pretty-printing
  
  # Note that JSON version 2.0 and above will automatically use
  # JSON::XS or JSON::PP, so you should be able to just:
  
  use JSON;
 
 
 =head1 VERSION
 
     2.27202
 
 L<JSON::XS> 2.27 (~2.30) compatible.
 
 =head1 NOTE
 
 JSON::PP had been inculded in JSON distribution (CPAN module).
 It was a perl core module in Perl 5.14.
 
 =head1 DESCRIPTION
 
 This module is L<JSON::XS> compatible pure Perl module.
 (Perl 5.8 or later is recommended)
 
 JSON::XS is the fastest and most proper JSON module on CPAN.
 It is written by Marc Lehmann in C, so must be compiled and
 installed in the used environment.
 
 JSON::PP is a pure-Perl module and has compatibility to JSON::XS.
 
 
 =head2 FEATURES
 
 =over
 
 =item * correct unicode handling
 
 This module knows how to handle Unicode (depending on Perl version).
 
 See to L<JSON::XS/A FEW NOTES ON UNICODE AND PERL> and L<UNICODE HANDLING ON PERLS>.
 
 
 =item * round-trip integrity
 
 When you serialise a perl data structure using only data types supported
 by JSON and Perl, the deserialised data structure is identical on the Perl
 level. (e.g. the string "2.0" doesn't suddenly become "2" just because
 it looks like a number). There I<are> minor exceptions to this, read the
 MAPPING section below to learn about those.
 
 
 =item * strict checking of JSON correctness
 
 There is no guessing, no generating of illegal JSON texts by default,
 and only JSON is accepted as input by default (the latter is a security feature).
 But when some options are set, loose chcking features are available.
 
 =back
 
 =head1 FUNCTIONAL INTERFACE
 
 Some documents are copied and modified from L<JSON::XS/FUNCTIONAL INTERFACE>.
 
 =head2 encode_json
 
     $json_text = encode_json $perl_scalar
 
 Converts the given Perl data structure to a UTF-8 encoded, binary string.
 
 This function call is functionally identical to:
 
     $json_text = JSON::PP->new->utf8->encode($perl_scalar)
 
 =head2 decode_json
 
     $perl_scalar = decode_json $json_text
 
 The opposite of C<encode_json>: expects an UTF-8 (binary) string and tries
 to parse that as an UTF-8 encoded JSON text, returning the resulting
 reference.
 
 This function call is functionally identical to:
 
     $perl_scalar = JSON::PP->new->utf8->decode($json_text)
 
 =head2 JSON::PP::is_bool
 
     $is_boolean = JSON::PP::is_bool($scalar)
 
 Returns true if the passed scalar represents either JSON::PP::true or
 JSON::PP::false, two constants that act like C<1> and C<0> respectively
 and are also used to represent JSON C<true> and C<false> in Perl strings.
 
 =head2 JSON::PP::true
 
 Returns JSON true value which is blessed object.
 It C<isa> JSON::PP::Boolean object.
 
 =head2 JSON::PP::false
 
 Returns JSON false value which is blessed object.
 It C<isa> JSON::PP::Boolean object.
 
 =head2 JSON::PP::null
 
 Returns C<undef>.
 
 See L<MAPPING>, below, for more information on how JSON values are mapped to
 Perl.
 
 
 =head1 HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER
 
 This section supposes that your perl vresion is 5.8 or later.
 
 If you know a JSON text from an outer world - a network, a file content, and so on,
 is encoded in UTF-8, you should use C<decode_json> or C<JSON> module object
 with C<utf8> enable. And the decoded result will contain UNICODE characters.
 
   # from network
   my $json        = JSON::PP->new->utf8;
   my $json_text   = CGI->new->param( 'json_data' );
   my $perl_scalar = $json->decode( $json_text );
   
   # from file content
   local $/;
   open( my $fh, '<', 'json.data' );
   $json_text   = <$fh>;
   $perl_scalar = decode_json( $json_text );
 
 If an outer data is not encoded in UTF-8, firstly you should C<decode> it.
 
   use Encode;
   local $/;
   open( my $fh, '<', 'json.data' );
   my $encoding = 'cp932';
   my $unicode_json_text = decode( $encoding, <$fh> ); # UNICODE
   
   # or you can write the below code.
   #
   # open( my $fh, "<:encoding($encoding)", 'json.data' );
   # $unicode_json_text = <$fh>;
 
 In this case, C<$unicode_json_text> is of course UNICODE string.
 So you B<cannot> use C<decode_json> nor C<JSON> module object with C<utf8> enable.
 Instead of them, you use C<JSON> module object with C<utf8> disable.
 
   $perl_scalar = $json->utf8(0)->decode( $unicode_json_text );
 
 Or C<encode 'utf8'> and C<decode_json>:
 
   $perl_scalar = decode_json( encode( 'utf8', $unicode_json_text ) );
   # this way is not efficient.
 
 And now, you want to convert your C<$perl_scalar> into JSON data and
 send it to an outer world - a network or a file content, and so on.
 
 Your data usually contains UNICODE strings and you want the converted data to be encoded
 in UTF-8, you should use C<encode_json> or C<JSON> module object with C<utf8> enable.
 
   print encode_json( $perl_scalar ); # to a network? file? or display?
   # or
   print $json->utf8->encode( $perl_scalar );
 
 If C<$perl_scalar> does not contain UNICODE but C<$encoding>-encoded strings
 for some reason, then its characters are regarded as B<latin1> for perl
 (because it does not concern with your $encoding).
 You B<cannot> use C<encode_json> nor C<JSON> module object with C<utf8> enable.
 Instead of them, you use C<JSON> module object with C<utf8> disable.
 Note that the resulted text is a UNICODE string but no problem to print it.
 
   # $perl_scalar contains $encoding encoded string values
   $unicode_json_text = $json->utf8(0)->encode( $perl_scalar );
   # $unicode_json_text consists of characters less than 0x100
   print $unicode_json_text;
 
 Or C<decode $encoding> all string values and C<encode_json>:
 
   $perl_scalar->{ foo } = decode( $encoding, $perl_scalar->{ foo } );
   # ... do it to each string values, then encode_json
   $json_text = encode_json( $perl_scalar );
 
 This method is a proper way but probably not efficient.
 
 See to L<Encode>, L<perluniintro>.
 
 
 =head1 METHODS
 
 Basically, check to L<JSON> or L<JSON::XS>.
 
 =head2 new
 
     $json = JSON::PP->new
 
 Rturns a new JSON::PP object that can be used to de/encode JSON
 strings.
 
 All boolean flags described below are by default I<disabled>.
 
 The mutators for flags all return the JSON object again and thus calls can
 be chained:
 
    my $json = JSON::PP->new->utf8->space_after->encode({a => [1,2]})
    => {"a": [1, 2]}
 
 =head2 ascii
 
     $json = $json->ascii([$enable])
     
     $enabled = $json->get_ascii
 
 If $enable is true (or missing), then the encode method will not generate characters outside
 the code range 0..127. Any Unicode characters outside that range will be escaped using either
 a single \uXXXX or a double \uHHHH\uLLLLL escape sequence, as per RFC4627.
 (See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>).
 
 In Perl 5.005, there is no character having high value (more than 255).
 See to L<UNICODE HANDLING ON PERLS>.
 
 If $enable is false, then the encode method will not escape Unicode characters unless
 required by the JSON syntax or other flags. This results in a faster and more compact format.
 
   JSON::PP->new->ascii(1)->encode([chr 0x10401])
   => ["\ud801\udc01"]
 
 =head2 latin1
 
     $json = $json->latin1([$enable])
     
     $enabled = $json->get_latin1
 
 If $enable is true (or missing), then the encode method will encode the resulting JSON
 text as latin1 (or iso-8859-1), escaping any characters outside the code range 0..255.
 
 If $enable is false, then the encode method will not escape Unicode characters
 unless required by the JSON syntax or other flags.
 
   JSON::XS->new->latin1->encode (["\x{89}\x{abc}"]
   => ["\x{89}\\u0abc"]    # (perl syntax, U+abc escaped, U+89 not)
 
 See to L<UNICODE HANDLING ON PERLS>.
 
 =head2 utf8
 
     $json = $json->utf8([$enable])
     
     $enabled = $json->get_utf8
 
 If $enable is true (or missing), then the encode method will encode the JSON result
 into UTF-8, as required by many protocols, while the decode method expects to be handled
 an UTF-8-encoded string. Please note that UTF-8-encoded strings do not contain any
 characters outside the range 0..255, they are thus useful for bytewise/binary I/O.
 
 (In Perl 5.005, any character outside the range 0..255 does not exist.
 See to L<UNICODE HANDLING ON PERLS>.)
 
 In future versions, enabling this option might enable autodetection of the UTF-16 and UTF-32
 encoding families, as described in RFC4627.
 
 If $enable is false, then the encode method will return the JSON string as a (non-encoded)
 Unicode string, while decode expects thus a Unicode string. Any decoding or encoding
 (e.g. to UTF-8 or UTF-16) needs to be done yourself, e.g. using the Encode module.
 
 Example, output UTF-16BE-encoded JSON:
 
   use Encode;
   $jsontext = encode "UTF-16BE", JSON::PP->new->encode ($object);
 
 Example, decode UTF-32LE-encoded JSON:
 
   use Encode;
   $object = JSON::PP->new->decode (decode "UTF-32LE", $jsontext);
 
 
 =head2 pretty
 
     $json = $json->pretty([$enable])
 
 This enables (or disables) all of the C<indent>, C<space_before> and
 C<space_after> flags in one call to generate the most readable
 (or most compact) form possible.
 
 Equivalent to:
 
    $json->indent->space_before->space_after
 
 =head2 indent
 
     $json = $json->indent([$enable])
     
     $enabled = $json->get_indent
 
 The default indent space length is three.
 You can use C<indent_length> to change the length.
 
 =head2 space_before
 
     $json = $json->space_before([$enable])
     
     $enabled = $json->get_space_before
 
 If C<$enable> is true (or missing), then the C<encode> method will add an extra
 optional space before the C<:> separating keys from values in JSON objects.
 
 If C<$enable> is false, then the C<encode> method will not add any extra
 space at those places.
 
 This setting has no effect when decoding JSON texts.
 
 Example, space_before enabled, space_after and indent disabled:
 
    {"key" :"value"}
 
 =head2 space_after
 
     $json = $json->space_after([$enable])
     
     $enabled = $json->get_space_after
 
 If C<$enable> is true (or missing), then the C<encode> method will add an extra
 optional space after the C<:> separating keys from values in JSON objects
 and extra whitespace after the C<,> separating key-value pairs and array
 members.
 
 If C<$enable> is false, then the C<encode> method will not add any extra
 space at those places.
 
 This setting has no effect when decoding JSON texts.
 
 Example, space_before and indent disabled, space_after enabled:
 
    {"key": "value"}
 
 =head2 relaxed
 
     $json = $json->relaxed([$enable])
     
     $enabled = $json->get_relaxed
 
 If C<$enable> is true (or missing), then C<decode> will accept some
 extensions to normal JSON syntax (see below). C<encode> will not be
 affected in anyway. I<Be aware that this option makes you accept invalid
 JSON texts as if they were valid!>. I suggest only to use this option to
 parse application-specific files written by humans (configuration files,
 resource files etc.)
 
 If C<$enable> is false (the default), then C<decode> will only accept
 valid JSON texts.
 
 Currently accepted extensions are:
 
 =over 4
 
 =item * list items can have an end-comma
 
 JSON I<separates> array elements and key-value pairs with commas. This
 can be annoying if you write JSON texts manually and want to be able to
 quickly append elements, so this extension accepts comma at the end of
 such items not just between them:
 
    [
       1,
       2, <- this comma not normally allowed
    ]
    {
       "k1": "v1",
       "k2": "v2", <- this comma not normally allowed
    }
 
 =item * shell-style '#'-comments
 
 Whenever JSON allows whitespace, shell-style comments are additionally
 allowed. They are terminated by the first carriage-return or line-feed
 character, after which more white-space and comments are allowed.
 
   [
      1, # this comment not allowed in JSON
         # neither this one...
   ]
 
 =back
 
 =head2 canonical
 
     $json = $json->canonical([$enable])
     
     $enabled = $json->get_canonical
 
 If C<$enable> is true (or missing), then the C<encode> method will output JSON objects
 by sorting their keys. This is adding a comparatively high overhead.
 
 If C<$enable> is false, then the C<encode> method will output key-value
 pairs in the order Perl stores them (which will likely change between runs
 of the same script).
 
 This option is useful if you want the same data structure to be encoded as
 the same JSON text (given the same overall settings). If it is disabled,
 the same hash might be encoded differently even if contains the same data,
 as key-value pairs have no inherent ordering in Perl.
 
 This setting has no effect when decoding JSON texts.
 
 If you want your own sorting routine, you can give a code referece
 or a subroutine name to C<sort_by>. See to C<JSON::PP OWN METHODS>.
 
 =head2 allow_nonref
 
     $json = $json->allow_nonref([$enable])
     
     $enabled = $json->get_allow_nonref
 
 If C<$enable> is true (or missing), then the C<encode> method can convert a
 non-reference into its corresponding string, number or null JSON value,
 which is an extension to RFC4627. Likewise, C<decode> will accept those JSON
 values instead of croaking.
 
 If C<$enable> is false, then the C<encode> method will croak if it isn't
 passed an arrayref or hashref, as JSON texts must either be an object
 or array. Likewise, C<decode> will croak if given something that is not a
 JSON object or array.
 
    JSON::PP->new->allow_nonref->encode ("Hello, World!")
    => "Hello, World!"
 
 =head2 allow_unknown
 
     $json = $json->allow_unknown ([$enable])
     
     $enabled = $json->get_allow_unknown
 
 If $enable is true (or missing), then "encode" will *not* throw an
 exception when it encounters values it cannot represent in JSON (for
 example, filehandles) but instead will encode a JSON "null" value.
 Note that blessed objects are not included here and are handled
 separately by c<allow_nonref>.
 
 If $enable is false (the default), then "encode" will throw an
 exception when it encounters anything it cannot encode as JSON.
 
 This option does not affect "decode" in any way, and it is
 recommended to leave it off unless you know your communications
 partner.
 
 =head2 allow_blessed
 
     $json = $json->allow_blessed([$enable])
     
     $enabled = $json->get_allow_blessed
 
 If C<$enable> is true (or missing), then the C<encode> method will not
 barf when it encounters a blessed reference. Instead, the value of the
 B<convert_blessed> option will decide whether C<null> (C<convert_blessed>
 disabled or no C<TO_JSON> method found) or a representation of the
 object (C<convert_blessed> enabled and C<TO_JSON> method found) is being
 encoded. Has no effect on C<decode>.
 
 If C<$enable> is false (the default), then C<encode> will throw an
 exception when it encounters a blessed object.
 
 =head2 convert_blessed
 
     $json = $json->convert_blessed([$enable])
     
     $enabled = $json->get_convert_blessed
 
 If C<$enable> is true (or missing), then C<encode>, upon encountering a
 blessed object, will check for the availability of the C<TO_JSON> method
 on the object's class. If found, it will be called in scalar context
 and the resulting scalar will be encoded instead of the object. If no
 C<TO_JSON> method is found, the value of C<allow_blessed> will decide what
 to do.
 
 The C<TO_JSON> method may safely call die if it wants. If C<TO_JSON>
 returns other blessed objects, those will be handled in the same
 way. C<TO_JSON> must take care of not causing an endless recursion cycle
 (== crash) in this case. The name of C<TO_JSON> was chosen because other
 methods called by the Perl core (== not by the user of the object) are
 usually in upper case letters and to avoid collisions with the C<to_json>
 function or method.
 
 This setting does not yet influence C<decode> in any way.
 
 If C<$enable> is false, then the C<allow_blessed> setting will decide what
 to do when a blessed object is found.
 
 =head2 filter_json_object
 
     $json = $json->filter_json_object([$coderef])
 
 When C<$coderef> is specified, it will be called from C<decode> each
 time it decodes a JSON object. The only argument passed to the coderef
 is a reference to the newly-created hash. If the code references returns
 a single scalar (which need not be a reference), this value
 (i.e. a copy of that scalar to avoid aliasing) is inserted into the
 deserialised data structure. If it returns an empty list
 (NOTE: I<not> C<undef>, which is a valid scalar), the original deserialised
 hash will be inserted. This setting can slow down decoding considerably.
 
 When C<$coderef> is omitted or undefined, any existing callback will
 be removed and C<decode> will not change the deserialised hash in any
 way.
 
 Example, convert all JSON objects into the integer 5:
 
    my $js = JSON::PP->new->filter_json_object (sub { 5 });
    # returns [5]
    $js->decode ('[{}]'); # the given subroutine takes a hash reference.
    # throw an exception because allow_nonref is not enabled
    # so a lone 5 is not allowed.
    $js->decode ('{"a":1, "b":2}');
 
 =head2 filter_json_single_key_object
 
     $json = $json->filter_json_single_key_object($key [=> $coderef])
 
 Works remotely similar to C<filter_json_object>, but is only called for
 JSON objects having a single key named C<$key>.
 
 This C<$coderef> is called before the one specified via
 C<filter_json_object>, if any. It gets passed the single value in the JSON
 object. If it returns a single value, it will be inserted into the data
 structure. If it returns nothing (not even C<undef> but the empty list),
 the callback from C<filter_json_object> will be called next, as if no
 single-key callback were specified.
 
 If C<$coderef> is omitted or undefined, the corresponding callback will be
 disabled. There can only ever be one callback for a given key.
 
 As this callback gets called less often then the C<filter_json_object>
 one, decoding speed will not usually suffer as much. Therefore, single-key
 objects make excellent targets to serialise Perl objects into, especially
 as single-key JSON objects are as close to the type-tagged value concept
 as JSON gets (it's basically an ID/VALUE tuple). Of course, JSON does not
 support this in any way, so you need to make sure your data never looks
 like a serialised Perl hash.
 
 Typical names for the single object key are C<__class_whatever__>, or
 C<$__dollars_are_rarely_used__$> or C<}ugly_brace_placement>, or even
 things like C<__class_md5sum(classname)__>, to reduce the risk of clashing
 with real hashes.
 
 Example, decode JSON objects of the form C<< { "__widget__" => <id> } >>
 into the corresponding C<< $WIDGET{<id>} >> object:
 
    # return whatever is in $WIDGET{5}:
    JSON::PP
       ->new
       ->filter_json_single_key_object (__widget__ => sub {
             $WIDGET{ $_[0] }
          })
       ->decode ('{"__widget__": 5')
 
    # this can be used with a TO_JSON method in some "widget" class
    # for serialisation to json:
    sub WidgetBase::TO_JSON {
       my ($self) = @_;
 
       unless ($self->{id}) {
          $self->{id} = ..get..some..id..;
          $WIDGET{$self->{id}} = $self;
       }
 
       { __widget__ => $self->{id} }
    }
 
 =head2 shrink
 
     $json = $json->shrink([$enable])
     
     $enabled = $json->get_shrink
 
 In JSON::XS, this flag resizes strings generated by either
 C<encode> or C<decode> to their minimum size possible.
 It will also try to downgrade any strings to octet-form if possible.
 
 In JSON::PP, it is noop about resizing strings but tries
 C<utf8::downgrade> to the returned string by C<encode>.
 See to L<utf8>.
 
 See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>
 
 =head2 max_depth
 
     $json = $json->max_depth([$maximum_nesting_depth])
     
     $max_depth = $json->get_max_depth
 
 Sets the maximum nesting level (default C<512>) accepted while encoding
 or decoding. If a higher nesting level is detected in JSON text or a Perl
 data structure, then the encoder and decoder will stop and croak at that
 point.
 
 Nesting level is defined by number of hash- or arrayrefs that the encoder
 needs to traverse to reach a given point or the number of C<{> or C<[>
 characters without their matching closing parenthesis crossed to reach a
 given character in a string.
 
 If no argument is given, the highest possible setting will be used, which
 is rarely useful.
 
 See L<JSON::XS/SSECURITY CONSIDERATIONS> for more info on why this is useful.
 
 When a large value (100 or more) was set and it de/encodes a deep nested object/text,
 it may raise a warning 'Deep recursion on subroutin' at the perl runtime phase.
 
 =head2 max_size
 
     $json = $json->max_size([$maximum_string_size])
     
     $max_size = $json->get_max_size
 
 Set the maximum length a JSON text may have (in bytes) where decoding is
 being attempted. The default is C<0>, meaning no limit. When C<decode>
 is called on a string that is longer then this many bytes, it will not
 attempt to decode the string but throw an exception. This setting has no
 effect on C<encode> (yet).
 
 If no argument is given, the limit check will be deactivated (same as when
 C<0> is specified).
 
 See L<JSON::XS/SSECURITY CONSIDERATIONS> for more info on why this is useful.
 
 =head2 encode
 
     $json_text = $json->encode($perl_scalar)
 
 Converts the given Perl data structure (a simple scalar or a reference
 to a hash or array) to its JSON representation. Simple scalars will be
 converted into JSON string or number sequences, while references to arrays
 become JSON arrays and references to hashes become JSON objects. Undefined
 Perl values (e.g. C<undef>) become JSON C<null> values.
 References to the integers C<0> and C<1> are converted into C<true> and C<false>.
 
 =head2 decode
 
     $perl_scalar = $json->decode($json_text)
 
 The opposite of C<encode>: expects a JSON text and tries to parse it,
 returning the resulting simple scalar or reference. Croaks on error.
 
 JSON numbers and strings become simple Perl scalars. JSON arrays become
 Perl arrayrefs and JSON objects become Perl hashrefs. C<true> becomes
 C<1> (C<JSON::true>), C<false> becomes C<0> (C<JSON::false>) and
 C<null> becomes C<undef>.
 
 =head2 decode_prefix
 
     ($perl_scalar, $characters) = $json->decode_prefix($json_text)
 
 This works like the C<decode> method, but instead of raising an exception
 when there is trailing garbage after the first JSON object, it will
 silently stop parsing there and return the number of characters consumed
 so far.
 
    JSON->new->decode_prefix ("[1] the tail")
    => ([], 3)
 
 =head1 INCREMENTAL PARSING
 
 Most of this section are copied and modified from L<JSON::XS/INCREMENTAL PARSING>.
 
 In some cases, there is the need for incremental parsing of JSON texts.
 This module does allow you to parse a JSON stream incrementally.
 It does so by accumulating text until it has a full JSON object, which
 it then can decode. This process is similar to using C<decode_prefix>
 to see if a full JSON object is available, but is much more efficient
 (and can be implemented with a minimum of method calls).
 
 This module will only attempt to parse the JSON text once it is sure it
 has enough text to get a decisive result, using a very simple but
 truly incremental parser. This means that it sometimes won't stop as
 early as the full parser, for example, it doesn't detect parenthese
 mismatches. The only thing it guarantees is that it starts decoding as
 soon as a syntactically valid JSON text has been seen. This means you need
 to set resource limits (e.g. C<max_size>) to ensure the parser will stop
 parsing in the presence if syntax errors.
 
 The following methods implement this incremental parser.
 
 =head2 incr_parse
 
     $json->incr_parse( [$string] ) # void context
     
     $obj_or_undef = $json->incr_parse( [$string] ) # scalar context
     
     @obj_or_empty = $json->incr_parse( [$string] ) # list context
 
 This is the central parsing function. It can both append new text and
 extract objects from the stream accumulated so far (both of these
 functions are optional).
 
 If C<$string> is given, then this string is appended to the already
 existing JSON fragment stored in the C<$json> object.
 
 After that, if the function is called in void context, it will simply
 return without doing anything further. This can be used to add more text
 in as many chunks as you want.
 
 If the method is called in scalar context, then it will try to extract
 exactly I<one> JSON object. If that is successful, it will return this
 object, otherwise it will return C<undef>. If there is a parse error,
 this method will croak just as C<decode> would do (one can then use
 C<incr_skip> to skip the errornous part). This is the most common way of
 using the method.
 
 And finally, in list context, it will try to extract as many objects
 from the stream as it can find and return them, or the empty list
 otherwise. For this to work, there must be no separators between the JSON
 objects or arrays, instead they must be concatenated back-to-back. If
 an error occurs, an exception will be raised as in the scalar context
 case. Note that in this case, any previously-parsed JSON texts will be
 lost.
 
 Example: Parse some JSON arrays/objects in a given string and return them.
 
     my @objs = JSON->new->incr_parse ("[5][7][1,2]");
 
 =head2 incr_text
 
     $lvalue_string = $json->incr_text
 
 This method returns the currently stored JSON fragment as an lvalue, that
 is, you can manipulate it. This I<only> works when a preceding call to
 C<incr_parse> in I<scalar context> successfully returned an object. Under
 all other circumstances you must not call this function (I mean it.
 although in simple tests it might actually work, it I<will> fail under
 real world conditions). As a special exception, you can also call this
 method before having parsed anything.
 
 This function is useful in two cases: a) finding the trailing text after a
 JSON object or b) parsing multiple JSON objects separated by non-JSON text
 (such as commas).
 
     $json->incr_text =~ s/\s*,\s*//;
 
 In Perl 5.005, C<lvalue> attribute is not available.
 You must write codes like the below:
 
     $string = $json->incr_text;
     $string =~ s/\s*,\s*//;
     $json->incr_text( $string );
 
 =head2 incr_skip
 
     $json->incr_skip
 
 This will reset the state of the incremental parser and will remove the
 parsed text from the input buffer. This is useful after C<incr_parse>
 died, in which case the input buffer and incremental parser state is left
 unchanged, to skip the text parsed so far and to reset the parse state.
 
 =head2 incr_reset
 
     $json->incr_reset
 
 This completely resets the incremental parser, that is, after this call,
 it will be as if the parser had never parsed anything.
 
 This is useful if you want ot repeatedly parse JSON objects and want to
 ignore any trailing data, which means you have to reset the parser after
 each successful decode.
 
 See to L<JSON::XS/INCREMENTAL PARSING> for examples.
 
 
 =head1 JSON::PP OWN METHODS
 
 =head2 allow_singlequote
 
     $json = $json->allow_singlequote([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will accept
 JSON strings quoted by single quotations that are invalid JSON
 format.
 
     $json->allow_singlequote->decode({"foo":'bar'});
     $json->allow_singlequote->decode({'foo':"bar"});
     $json->allow_singlequote->decode({'foo':'bar'});
 
 As same as the C<relaxed> option, this option may be used to parse
 application-specific files written by humans.
 
 
 =head2 allow_barekey
 
     $json = $json->allow_barekey([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will accept
 bare keys of JSON object that are invalid JSON format.
 
 As same as the C<relaxed> option, this option may be used to parse
 application-specific files written by humans.
 
     $json->allow_barekey->decode('{foo:"bar"}');
 
 =head2 allow_bignum
 
     $json = $json->allow_bignum([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will convert
 the big integer Perl cannot handle as integer into a L<Math::BigInt>
 object and convert a floating number (any) into a L<Math::BigFloat>.
 
 On the contary, C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
 objects into JSON numbers with C<allow_blessed> enable.
 
    $json->allow_nonref->allow_blessed->allow_bignum;
    $bigfloat = $json->decode('2.000000000000000000000000001');
    print $json->encode($bigfloat);
    # => 2.000000000000000000000000001
 
 See to L<JSON::XS/MAPPING> aboout the normal conversion of JSON number.
 
 =head2 loose
 
     $json = $json->loose([$enable])
 
 The unescaped [\x00-\x1f\x22\x2f\x5c] strings are invalid in JSON strings
 and the module doesn't allow to C<decode> to these (except for \x2f).
 If C<$enable> is true (or missing), then C<decode>  will accept these
 unescaped strings.
 
     $json->loose->decode(qq|["abc
                                    def"]|);
 
 See L<JSON::XS/SSECURITY CONSIDERATIONS>.
 
 =head2 escape_slash
 
     $json = $json->escape_slash([$enable])
 
 According to JSON Grammar, I<slash> (U+002F) is escaped. But default
 JSON::PP (as same as JSON::XS) encodes strings without escaping slash.
 
 If C<$enable> is true (or missing), then C<encode> will escape slashes.
 
 =head2 indent_length
 
     $json = $json->indent_length($length)
 
 JSON::XS indent space length is 3 and cannot be changed.
 JSON::PP set the indent space length with the given $length.
 The default is 3. The acceptable range is 0 to 15.
 
 =head2 sort_by
 
     $json = $json->sort_by($function_name)
     $json = $json->sort_by($subroutine_ref)
 
 If $function_name or $subroutine_ref are set, its sort routine are used
 in encoding JSON objects.
 
    $js = $pc->sort_by(sub { $JSON::PP::a cmp $JSON::PP::b })->encode($obj);
    # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
 
    $js = $pc->sort_by('own_sort')->encode($obj);
    # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
 
    sub JSON::PP::own_sort { $JSON::PP::a cmp $JSON::PP::b }
 
 As the sorting routine runs in the JSON::PP scope, the given
 subroutine name and the special variables C<$a>, C<$b> will begin
 'JSON::PP::'.
 
 If $integer is set, then the effect is same as C<canonical> on.
 
 =head1 INTERNAL
 
 For developers.
 
 =over
 
 =item PP_encode_box
 
 Returns
 
         {
             depth        => $depth,
             indent_count => $indent_count,
         }
 
 
 =item PP_decode_box
 
 Returns
 
         {
             text    => $text,
             at      => $at,
             ch      => $ch,
             len     => $len,
             depth   => $depth,
             encoding      => $encoding,
             is_valid_utf8 => $is_valid_utf8,
         };
 
 =back
 
 =head1 MAPPING
 
 This section is copied from JSON::XS and modified to C<JSON::PP>.
 JSON::XS and JSON::PP mapping mechanisms are almost equivalent.
 
 See to L<JSON::XS/MAPPING>.
 
 =head2 JSON -> PERL
 
 =over 4
 
 =item object
 
 A JSON object becomes a reference to a hash in Perl. No ordering of object
 keys is preserved (JSON does not preserver object key ordering itself).
 
 =item array
 
 A JSON array becomes a reference to an array in Perl.
 
 =item string
 
 A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON
 are represented by the same codepoints in the Perl string, so no manual
 decoding is necessary.
 
 =item number
 
 A JSON number becomes either an integer, numeric (floating point) or
 string scalar in perl, depending on its range and any fractional parts. On
 the Perl level, there is no difference between those as Perl handles all
 the conversion details, but an integer may take slightly less memory and
 might represent more values exactly than floating point numbers.
 
 If the number consists of digits only, C<JSON> will try to represent
 it as an integer value. If that fails, it will try to represent it as
 a numeric (floating point) value if that is possible without loss of
 precision. Otherwise it will preserve the number as a string value (in
 which case you lose roundtripping ability, as the JSON number will be
 re-encoded toa JSON string).
 
 Numbers containing a fractional or exponential part will always be
 represented as numeric (floating point) values, possibly at a loss of
 precision (in which case you might lose perfect roundtripping ability, but
 the JSON number will still be re-encoded as a JSON number).
 
 Note that precision is not accuracy - binary floating point values cannot
 represent most decimal fractions exactly, and when converting from and to
 floating point, C<JSON> only guarantees precision up to but not including
 the leats significant bit.
 
 When C<allow_bignum> is enable, the big integers 
 and the numeric can be optionally converted into L<Math::BigInt> and
 L<Math::BigFloat> objects.
 
 =item true, false
 
 These JSON atoms become C<JSON::PP::true> and C<JSON::PP::false>,
 respectively. They are overloaded to act almost exactly like the numbers
 C<1> and C<0>. You can check wether a scalar is a JSON boolean by using
 the C<JSON::is_bool> function.
 
    print JSON::PP::true . "\n";
     => true
    print JSON::PP::true + 1;
     => 1
 
    ok(JSON::true eq  '1');
    ok(JSON::true == 1);
 
 C<JSON> will install these missing overloading features to the backend modules.
 
 
 =item null
 
 A JSON null atom becomes C<undef> in Perl.
 
 C<JSON::PP::null> returns C<unddef>.
 
 =back
 
 
 =head2 PERL -> JSON
 
 The mapping from Perl to JSON is slightly more difficult, as Perl is a
 truly typeless language, so we can only guess which JSON type is meant by
 a Perl value.
 
 =over 4
 
 =item hash references
 
 Perl hash references become JSON objects. As there is no inherent ordering
 in hash keys (or JSON objects), they will usually be encoded in a
 pseudo-random order that can change between runs of the same program but
 stays generally the same within a single run of a program. C<JSON>
 optionally sort the hash keys (determined by the I<canonical> flag), so
 the same datastructure will serialise to the same JSON text (given same
 settings and version of JSON::XS), but this incurs a runtime overhead
 and is only rarely useful, e.g. when you want to compare some JSON text
 against another for equality.
 
 
 =item array references
 
 Perl array references become JSON arrays.
 
 =item other references
 
 Other unblessed references are generally not allowed and will cause an
 exception to be thrown, except for references to the integers C<0> and
 C<1>, which get turned into C<false> and C<true> atoms in JSON. You can
 also use C<JSON::false> and C<JSON::true> to improve readability.
 
    to_json [\0,JSON::PP::true]      # yields [false,true]
 
 =item JSON::PP::true, JSON::PP::false, JSON::PP::null
 
 These special values become JSON true and JSON false values,
 respectively. You can also use C<\1> and C<\0> directly if you want.
 
 JSON::PP::null returns C<undef>.
 
 =item blessed objects
 
 Blessed objects are not directly representable in JSON. See the
 C<allow_blessed> and C<convert_blessed> methods on various options on
 how to deal with this: basically, you can choose between throwing an
 exception, encoding the reference as if it weren't blessed, or provide
 your own serialiser method.
 
 See to L<convert_blessed>.
 
 =item simple scalars
 
 Simple Perl scalars (any scalar that is not a reference) are the most
 difficult objects to encode: JSON::XS and JSON::PP will encode undefined scalars as
 JSON C<null> values, scalars that have last been used in a string context
 before encoding as JSON strings, and anything else as number value:
 
    # dump as number
    encode_json [2]                      # yields [2]
    encode_json [-3.0e17]                # yields [-3e+17]
    my $value = 5; encode_json [$value]  # yields [5]
 
    # used as string, so dump as string
    print $value;
    encode_json [$value]                 # yields ["5"]
 
    # undef becomes null
    encode_json [undef]                  # yields [null]
 
 You can force the type to be a string by stringifying it:
 
    my $x = 3.1; # some variable containing a number
    "$x";        # stringified
    $x .= "";    # another, more awkward way to stringify
    print $x;    # perl does it for you, too, quite often
 
 You can force the type to be a number by numifying it:
 
    my $x = "3"; # some variable containing a string
    $x += 0;     # numify it, ensuring it will be dumped as a number
    $x *= 1;     # same thing, the choise is yours.
 
 You can not currently force the type in other, less obscure, ways.
 
 Note that numerical precision has the same meaning as under Perl (so
 binary to decimal conversion follows the same rules as in Perl, which
 can differ to other languages). Also, your perl interpreter might expose
 extensions to the floating point numbers of your platform, such as
 infinities or NaN's - these cannot be represented in JSON, and it is an
 error to pass those in.
 
 =item Big Number
 
 When C<allow_bignum> is enable, 
 C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
 objects into JSON numbers.
 
 
 =back
 
 =head1 UNICODE HANDLING ON PERLS
 
 If you do not know about Unicode on Perl well,
 please check L<JSON::XS/A FEW NOTES ON UNICODE AND PERL>.
 
 =head2 Perl 5.8 and later
 
 Perl can handle Unicode and the JSON::PP de/encode methods also work properly.
 
     $json->allow_nonref->encode(chr hex 3042);
     $json->allow_nonref->encode(chr hex 12345);
 
 Reuturns C<"\u3042"> and C<"\ud808\udf45"> respectively.
 
     $json->allow_nonref->decode('"\u3042"');
     $json->allow_nonref->decode('"\ud808\udf45"');
 
 Returns UTF-8 encoded strings with UTF8 flag, regarded as C<U+3042> and C<U+12345>.
 
 Note that the versions from Perl 5.8.0 to 5.8.2, Perl built-in C<join> was broken,
 so JSON::PP wraps the C<join> with a subroutine. Thus JSON::PP works slow in the versions.
 
 
 =head2 Perl 5.6
 
 Perl can handle Unicode and the JSON::PP de/encode methods also work.
 
 =head2 Perl 5.005
 
 Perl 5.005 is a byte sementics world -- all strings are sequences of bytes.
 That means the unicode handling is not available.
 
 In encoding,
 
     $json->allow_nonref->encode(chr hex 3042);  # hex 3042 is 12354.
     $json->allow_nonref->encode(chr hex 12345); # hex 12345 is 74565.
 
 Returns C<B> and C<E>, as C<chr> takes a value more than 255, it treats
 as C<$value % 256>, so the above codes are equivalent to :
 
     $json->allow_nonref->encode(chr 66);
     $json->allow_nonref->encode(chr 69);
 
 In decoding,
 
     $json->decode('"\u00e3\u0081\u0082"');
 
 The returned is a byte sequence C<0xE3 0x81 0x82> for UTF-8 encoded
 japanese character (C<HIRAGANA LETTER A>).
 And if it is represented in Unicode code point, C<U+3042>.
 
 Next, 
 
     $json->decode('"\u3042"');
 
 We ordinary expect the returned value is a Unicode character C<U+3042>.
 But here is 5.005 world. This is C<0xE3 0x81 0x82>.
 
     $json->decode('"\ud808\udf45"');
 
 This is not a character C<U+12345> but bytes - C<0xf0 0x92 0x8d 0x85>.
 
 
 =head1 TODO
 
 =over
 
 =item speed
 
 =item memory saving
 
 =back
 
 
 =head1 SEE ALSO
 
 Most of the document are copied and modified from JSON::XS doc.
 
 L<JSON::XS>
 
 RFC4627 (L<http://www.ietf.org/rfc/rfc4627.txt>)
 
 =head1 AUTHOR
 
 Makamaka Hannyaharamitu, E<lt>makamaka[at]cpan.orgE<gt>
 
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright 2007-2013 by Makamaka Hannyaharamitu
 
 This library is free software; you can redistribute it and/or modify
 it under the same terms as Perl itself. 
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'JSON/PP/Boolean.pm' => <<'END_OF_FILE',
 =head1 NAME
 
 JSON::PP::Boolean - dummy module providing JSON::PP::Boolean
 
 =head1 SYNOPSIS
 
  # do not "use" yourself
 
 =head1 DESCRIPTION
 
 This module exists only to provide overload resolution for Storable and similar modules. See
 L<JSON::PP> for more info about this class.
 
 =cut
 
 use JSON::PP ();
 use strict;
 
 1;
 
 =head1 AUTHOR
 
 This idea is from L<JSON::XS::Boolean> written by Marc Lehmann <schmorp[at]schmorp.de>
 
 =cut
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo.pm' => <<'END_OF_FILE',
 package Mo;
 $VERSION=0.39;
 no warnings;my$M=__PACKAGE__.'::';*{$M.Object::new}=sub{my$c=shift;my$s=bless{@_},$c;my%n=%{$c.::.':E'};map{$s->{$_}=$n{$_}->()if!exists$s->{$_}}keys%n;$s};*{$M.import}=sub{import warnings;$^H|=1538;my($P,%e,%o)=caller.'::';shift;eval"no Mo::$_",&{$M.$_.::e}($P,\%e,\%o,\@_)for@_;return if$e{M};%e=(extends,sub{eval"no $_[0]()";@{$P.ISA}=$_[0]},has,sub{my$n=shift;my$m=sub{$#_?$_[0]{$n}=$_[1]:$_[0]{$n}};@_=(default,@_)if!($#_%2);$m=$o{$_}->($m,$n,@_)for sort keys%o;*{$P.$n}=$m},%e,);*{$P.$_}=$e{$_}for keys%e;@{$P.ISA}=$M.Object};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/coerce.pm' => <<'END_OF_FILE',
 package Mo::coerce;my$M="Mo::";
 $VERSION=0.39;
 *{$M.'coerce::e'}=sub{my($P,$e,$o)=@_;$o->{coerce}=sub{my($m,$n,%a)=@_;$a{coerce}or return$m;sub{$#_?$m->($_[0],$a{coerce}->($_[1])):$m->(@_)}};my$C=$e->{new}||*{$M.Object::new}{CODE};$e->{new}=sub{my$s=$C->(@_);$s->$_($s->{$_})for keys%$s;$s}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/default.pm' => <<'END_OF_FILE',
 package Mo::default;my$M="Mo::";
 $VERSION=0.39;
 *{$M.'default::e'}=sub{my($P,$e,$o)=@_;$o->{default}=sub{my($m,$n,%a)=@_;exists$a{default}or return$m;my($d,$r)=$a{default};my$g='HASH'eq($r=ref$d)?sub{+{%$d}}:'ARRAY'eq$r?sub{[@$d]}:'CODE'eq$r?$d:sub{$d};my$i=exists$a{lazy}?$a{lazy}:!${$P.':N'};$i or ${$P.':E'}{$n}=$g and return$m;sub{$#_?$m->(@_):!exists$_[0]{$n}?$_[0]{$n}=$g->(@_):$m->(@_)}}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Template/Perlish.pm' => <<'END_OF_FILE',
 package Template::Perlish;
 
 $VERSION = '1.40';
 
 use 5.008_000;
 use warnings;
 use strict;
 use Carp;
 use English qw( -no_match_vars );
 
 # Function-oriented interface
 sub import {
    my $package = shift;
 
    for my $sub (@_) {
       croak "subroutine '$sub' not exportable"
          unless grep { $sub eq $_ } qw( render );
 
       my $caller = caller();
 
       no strict 'refs';
       local $SIG{__WARN__} = \&Carp::carp;
       *{$caller . '::' . $sub} = \&{$package . '::' . $sub};
    }
 
    return;
 }
 
 sub render {
    my $template = shift;
    my (%variables, %params);
    if (@_) {
       %variables = ref($_[0]) ? %{shift @_} : splice @_, 0;
       %params = %{shift @_} if @_;
    }
    return __PACKAGE__->new(%params)->process($template, \%variables);
 }
 
 # Object-oriented interface
 sub new {
    my $self = bless {
       start     => '[%',
       stop      => '%]',
       utf8      => 1,
       variables => {},
      },
      shift;
    %$self = (%$self, @_ == 1 ? %{$_[0]} : @_);
    return $self;
 } ## end sub new
 
 sub process {
    my ($self, $template, $vars) = @_;
    return $self->evaluate($self->compile($template), $vars);
 }
 
 sub evaluate {
    my ($self, $compiled, $vars) = @_;
    $self->_compile_sub($compiled)
       unless exists $compiled->{sub};
    return $compiled->{sub}->($vars);
 } ## end sub evaluate
 
 sub compile {
    my ($self, undef, %args) = @_;
    my $outcome = $self->_compile_code_text($_[1]);
    return $outcome if $args{no_check};
    return $self->_compile_sub($outcome);
 }
 
 sub compile_as_sub {
    my $self = shift;
    return $self->compile($_[0])->{'sub'};
 } ## end sub compile_as_sub
 
 sub _compile_code_text {
    my $self = shift;
    my ($template) = @_;
 
    my $starter = $self->{start};
    my $stopper = $self->{stop};
 
    my $compiled = "# line 1 'input'\n";
    $compiled .= "use utf8;\n\n" if $self->{utf8};
    $compiled .= "print {*STDOUT} '';\n\n";
    my $pos      = 0;
    my $line_no  = 1;
    while ($pos < length $template) {
 
       # Find starter and emit all previous text as simple text
       my $start = index $template, $starter, $pos;
       last if $start < 0;
       my $chunk = substr $template, $pos, $start - $pos;
       $compiled .= _simple_text($chunk)
         if $start > $pos;
 
       # Update scanning variables. The line counter is advanced for
       # the chunk but not yet for the $starter, so that error reporting
       # for unmatched $starter will point to the correct line
       $pos = $start + length $starter;
       $line_no += ($chunk =~ tr/\n//);
 
       # Grab code
       my $stop = index $template, $stopper, $pos;
       if ($stop < 0) { # no matching $stopper, bummer!
          my $section = _extract_section({ template => $template }, $line_no);
          die "unclosed starter '$starter' at line $line_no\n$section";
       }
       my $code = substr $template, $pos, $stop - $pos;
 
       # Now I can advance the line count considering the $starter too
       $line_no += ($starter =~ tr/\n//);
 
       if (length $code) {
          if (my $path = _smart_split($code)) {
             $compiled .= _variable($path);
          }
          elsif (my ($scalar) = $code =~ m{\A\s* (\$ [a-zA-Z_]\w*) \s*\z}mxs) {
             $compiled .= "\nprint {*STDOUT} $scalar; ### straight scalar\n\n";
          }
          elsif (substr($code, 0, 1) eq '=') {
             $compiled .= "\n# line $line_no 'template<3,$line_no>'\n" .
                _expression(substr $code, 1);
          }
          else {
             $compiled .= "\n# line $line_no 'template<0,$line_no>'\n" . $code;
          }
       }
 
       # Update scanning variables
       $pos = $stop + length $stopper;
       $line_no += (($code . $stopper) =~ tr/\n//);
 
    } ## end while ($pos < length $template)
 
    # put last part of input string as simple text
    $compiled .= _simple_text(substr($template, $pos || 0));
 
    return {
       template  => $template,
       code_text => $compiled,
    };
 }
 
 sub _V {
    my $value = shift;
    for my $chunk (@_) {
       if (ref($value) eq 'HASH') {
          $value = $value->{$chunk};
       }
       elsif (ref($value) eq 'ARRAY') {
          $value = $value->[$chunk];
       }
       else {
          return '';
       }
    }
    return defined($value) ? $value : '';
 }
 
 sub V { return '' }
 sub A { return }
 sub H { return }
 sub HK { return }
 sub HV { return }
 
 sub _compile_sub {
    my ($self, $outcome) = @_;
 
    my @warnings;
    {
       my $utf8 = $self->{utf8} ? 1 : 0;
       local $SIG{__WARN__} = sub { push @warnings, @_ };
       $outcome->{sub} = eval <<"END_OF_CODE";
    sub {
       my \%variables = (\%{\$self->{variables}}, \%{shift || {}});
 
       no warnings 'redefine';
       local *V = sub {
          my \$path = _smart_split(shift) or return '';
          return _V(\\\%variables, \@\$path);
       };
       local *A = sub {
          my \$v = V(shift) or return;
          return \@\$v;
       };
       local *H = sub {
          my \$v = V(shift) or return;
          return \%\$v;
       };
       local *HK = sub {
          my \$v = V(shift) or return;
          return keys \%\$v;
       };
       local *HV = sub {
          my \$v = V(shift) or return;
          return values \%\$v;
       };
       use warnings 'redefine';
 
       local *STDOUT;
       open STDOUT, '>', \\my \$___buffer or croak "open(): \$OS_ERROR";
       binmode STDOUT, ':encoding(utf8)' if $utf8;
       my \$___previous_selection = select(STDOUT);
       { # closure to free "my" variables
 $outcome->{code_text}
       }
       select(\$___previous_selection);
       close STDOUT;
       if ($utf8) {
          require Encode;
          \$___buffer = Encode::decode(utf8 => \$___buffer);
       }
       return \$___buffer;
    }
 END_OF_CODE
       return $outcome if $outcome->{sub};
    }
 
    my $error = $EVAL_ERROR;
    my ($offset, $starter, $line_no) =
       $error =~ m{at\ 'template<(\d+),(\d+)>'\ line\ (\d+)}mxs;
    $line_no -= $offset;
    s{at\ 'template<\d+,\d+>'\ line\ (\d+)}{'at line ' . ($1 - $offset)}egmxs
       for @warnings, $error;
    if ($line_no == $starter) {
       s{,\ near\ "\#\ line.*?\n\s+}{, near "}gmxs
          for @warnings, $error;
    }
 
    my $section = _extract_section($outcome, $line_no);
    $error = join '', @warnings, $error, "\n", $section;
 
    die $error;
 } ## end sub compile
 
 sub _extract_section {
    my ($hash, $line_no) = @_;
    $line_no--; # for proper comparison with 0-based array
    my $start = $line_no - 3;
    my $end = $line_no + 3;
 
    my @lines = split /\n/, $hash->{template};
    $start = 0 if $start < 0;
    $end = $#lines if $end > $#lines;
    my $n_chars = length($end + 1);
    return join '', map {
       sprintf "%s%${n_chars}d| %s\n",
          (($_ == $line_no) ? '>>' : '  '),
          ($_ + 1),
          $lines[$_];
    } $start .. $end;
 }
 
 sub _simple_text {
    my $text = shift;
 
    return "print {*STDOUT} '$text';\n\n" if $text !~ /[\n'\\]/;
 
    $text =~ s/^/ /gms; # indent, trick taken from diff -u
    return <<"END_OF_CHUNK";
 ### Verbatim text
 print {*STDOUT} do {
    my \$text = <<'END_OF_INDENTED_TEXT';
 $text
 END_OF_INDENTED_TEXT
    \$text =~ s/^ //gms;      # de-indent
    substr \$text, -1, 1, ''; # get rid of added newline
    \$text;
 };
 
 END_OF_CHUNK
 } ## end sub _simple_text
 
 sub _smart_split {
    my ($input) = @_;
    $input =~ s{\A\s+|\s+\z}{}gmxs;
 
    my $sq = qr{(?mxs: ' [^']* ' )};
    my $dq = qr{(?mxs: " (?:[^\\"] | \\.)* " )};
    my $ud = qr{(?mxs: \w+ )};
    my $chunk = qr{(?mxs: $sq | $dq | $ud)+};
 
    # save and reset current pos() on $input
    my $prepos = pos($input);
    pos($input) = undef;
 
    my @path;
    push @path, $1 while $input =~ m{\G \.? ($chunk) }cgmxs;
 
    # save and restore pos() on $input
    my $postpos = pos($input);
    pos($input) = $prepos;
 
    return unless defined $postpos;
    return if $postpos != length($input);
 
    # cleanup @path components
    for my $part (@path) {
       my @subparts;
       while ((pos($part) || 0) < length($part)) {
          if ($part =~ m{\G ($sq) }cgmxs) {
             push @subparts, substr $1, 1, length($1) - 2;
          }
          elsif ($part =~ m{\G ($dq) }cgmxs) {
             my $subpart = substr $1, 1, length($1) - 2;
             $subpart =~ s{\\(.)}{$1}gmxs;
             push @subparts, $subpart;
          }
          elsif ($part =~ m{\G ($ud) }cgmxs) {
             push @subparts, $1;
          }
          else { # shouldn't happen ever
             return;
          }
       }
       $part = join '', @subparts;
    }
    return \@path;
 }
 
 sub _variable {
    my $path = shift;
    my $DQ = '"';
    $path = join ', ', map { $DQ . quotemeta($_) . $DQ } @$path;
 
    return <<"END_OF_CHUNK";
 ### Variable from \%variables stash
 print {*STDOUT} _V(\\\%variables, $path);
 
 END_OF_CHUNK
 } ## end sub _variable
 
 sub _expression {
    my $expression = shift;
    return <<"END_OF_CHUNK";
 # Expression to be evaluated and printed out
 {
    my \$value = do {{
 $expression
    }};
    print {*STDOUT} \$value if defined \$value;
 }
 
 END_OF_CHUNK
 
 }
 
 1;

END_OF_FILE


# __MOBUNDLE_FILE__

      'YAML/Tiny.pm' => <<'END_OF_FILE',
 use 5.008001; # sane UTF-8 support
 use strict;
 use warnings;
 package YAML::Tiny;
 # git description: v1.63-12-g5dd832a
 $YAML::Tiny::VERSION = '1.64';
 # XXX-INGY is 5.8.1 too old/broken for utf8?
 # XXX-XDG Lancaster consensus was that it was sufficient until
 # proven otherwise
 
 
 #####################################################################
 # The YAML::Tiny API.
 #
 # These are the currently documented API functions/methods and
 # exports:
 
 use Exporter;
 our @ISA       = qw{ Exporter  };
 our @EXPORT    = qw{ Load Dump };
 our @EXPORT_OK = qw{ LoadFile DumpFile freeze thaw };
 
 ###
 # Functional/Export API:
 
 sub Dump {
     return YAML::Tiny->new(@_)->_dump_string;
 }
 
 # XXX-INGY Returning last document seems a bad behavior.
 # XXX-XDG I think first would seem more natural, but I don't know
 # that it's worth changing now
 sub Load {
     my $self = YAML::Tiny->_load_string(@_);
     if ( wantarray ) {
         return @$self;
     } else {
         # To match YAML.pm, return the last document
         return $self->[-1];
     }
 }
 
 # XXX-INGY Do we really need freeze and thaw?
 # XXX-XDG I don't think so.  I'd support deprecating them.
 BEGIN {
     *freeze = \&Dump;
     *thaw   = \&Load;
 }
 
 sub DumpFile {
     my $file = shift;
     return YAML::Tiny->new(@_)->_dump_file($file);
 }
 
 sub LoadFile {
     my $file = shift;
     my $self = YAML::Tiny->_load_file($file);
     if ( wantarray ) {
         return @$self;
     } else {
         # Return only the last document to match YAML.pm,
         return $self->[-1];
     }
 }
 
 
 ###
 # Object Oriented API:
 
 # Create an empty YAML::Tiny object
 # XXX-INGY Why do we use ARRAY object?
 # NOTE: I get it now, but I think it's confusing and not needed.
 # Will change it on a branch later, for review.
 #
 # XXX-XDG I don't support changing it yet.  It's a very well-documented
 # "API" of YAML::Tiny.  I'd support deprecating it, but Adam suggested
 # we not change it until YAML.pm's own OO API is established so that
 # users only have one API change to digest, not two
 sub new {
     my $class = shift;
     bless [ @_ ], $class;
 }
 
 # XXX-INGY It probably doesn't matter, and it's probably too late to
 # change, but 'read/write' are the wrong names. Read and Write
 # are actions that take data from storage to memory
 # characters/strings. These take the data to/from storage to native
 # Perl objects, which the terms dump and load are meant. As long as
 # this is a legacy quirk to YAML::Tiny it's ok, but I'd prefer not
 # to add new {read,write}_* methods to this API.
 
 sub read_string {
     my $self = shift;
     $self->_load_string(@_);
 }
 
 sub write_string {
     my $self = shift;
     $self->_dump_string(@_);
 }
 
 sub read {
     my $self = shift;
     $self->_load_file(@_);
 }
 
 sub write {
     my $self = shift;
     $self->_dump_file(@_);
 }
 
 
 
 
 #####################################################################
 # Constants
 
 # Printed form of the unprintable characters in the lowest range
 # of ASCII characters, listed by ASCII ordinal position.
 my @UNPRINTABLE = qw(
     0    x01  x02  x03  x04  x05  x06  a
     b    t    n    v    f    r    x0E  x0F
     x10  x11  x12  x13  x14  x15  x16  x17
     x18  x19  x1A  e    x1C  x1D  x1E  x1F
 );
 
 # Printable characters for escapes
 my %UNESCAPES = (
     0 => "\x00", z => "\x00", N    => "\x85",
     a => "\x07", b => "\x08", t    => "\x09",
     n => "\x0a", v => "\x0b", f    => "\x0c",
     r => "\x0d", e => "\x1b", '\\' => '\\',
 );
 
 # XXX-INGY
 # I(ngy) need to decide if these values should be quoted in
 # YAML::Tiny or not. Probably yes.
 
 # These 3 values have special meaning when unquoted and using the
 # default YAML schema. They need quotes if they are strings.
 my %QUOTE = map { $_ => 1 } qw{
     null true false
 };
 
 # The commented out form is simpler, but overloaded the Perl regex
 # engine due to recursion and backtracking problems on strings
 # larger than 32,000ish characters. Keep it for reference purposes.
 # qr/\"((?:\\.|[^\"])*)\"/
 my $re_capture_double_quoted = qr/\"([^\\"]*(?:\\.[^\\"]*)*)\"/;
 my $re_capture_single_quoted = qr/\'([^\']*(?:\'\'[^\']*)*)\'/;
 # unquoted re gets trailing space that needs to be stripped
 my $re_capture_unquoted_key  = qr/([^:]+(?::+\S(?:[^:]*|.*?(?=:)))*)(?=\s*\:(?:\s+|$))/;
 my $re_trailing_comment      = qr/(?:\s+\#.*)?/;
 my $re_key_value_separator   = qr/\s*:(?:\s+(?:\#.*)?|$)/;
 
 
 
 
 
 #####################################################################
 # YAML::Tiny Implementation.
 #
 # These are the private methods that do all the work. They may change
 # at any time.
 
 
 ###
 # Loader functions:
 
 # Create an object from a file
 sub _load_file {
     my $class = ref $_[0] ? ref shift : shift;
 
     # Check the file
     my $file = shift or $class->_error( 'You did not specify a file name' );
     $class->_error( "File '$file' does not exist" )
         unless -e $file;
     $class->_error( "'$file' is a directory, not a file" )
         unless -f _;
     $class->_error( "Insufficient permissions to read '$file'" )
         unless -r _;
 
     # Open unbuffered with strict UTF-8 decoding and no translation layers
     open( my $fh, "<:unix:encoding(UTF-8)", $file );
     unless ( $fh ) {
         $class->_error("Failed to open file '$file': $!");
     }
 
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         flock( $fh, Fcntl::LOCK_SH() )
             or warn "Couldn't lock '$file' for reading: $!";
     }
 
     # slurp the contents
     my $contents = eval {
         use warnings FATAL => 'utf8';
         local $/;
         <$fh>
     };
     if ( my $err = $@ ) {
         $class->_error("Error reading from file '$file': $err");
     }
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $class->_error("Failed to close file '$file': $!");
     }
 
     $class->_load_string( $contents );
 }
 
 # Create an object from a string
 sub _load_string {
     my $class  = ref $_[0] ? ref shift : shift;
     my $self   = bless [], $class;
     my $string = $_[0];
     eval {
         unless ( defined $string ) {
             die \"Did not provide a string to load";
         }
 
         # Check if Perl has it marked as characters, but it's internally
         # inconsistent.  E.g. maybe latin1 got read on a :utf8 layer
         if ( utf8::is_utf8($string) && ! utf8::valid($string) ) {
             die \<<'...';
 Read an invalid UTF-8 string (maybe mixed UTF-8 and 8-bit character set).
 Did you decode with lax ":utf8" instead of strict ":encoding(UTF-8)"?
 ...
         }
 
         # Ensure Unicode character semantics, even for 0x80-0xff
         utf8::upgrade($string);
 
         # Check for and strip any leading UTF-8 BOM
         $string =~ s/^\x{FEFF}//;
 
         # Check for some special cases
         return $self unless length $string;
 
         # Split the file into lines
         my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
                 split /(?:\015{1,2}\012|\015|\012)/, $string;
 
         # Strip the initial YAML header
         @lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;
 
         # A nibbling parser
         my $in_document = 0;
         while ( @lines ) {
             # Do we have a document header?
             if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
                 # Handle scalar documents
                 shift @lines;
                 if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
                     push @$self,
                         $self->_load_scalar( "$1", [ undef ], \@lines );
                     next;
                 }
                 $in_document = 1;
             }
 
             if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
                 # A naked document
                 push @$self, undef;
                 while ( @lines and $lines[0] !~ /^---/ ) {
                     shift @lines;
                 }
                 $in_document = 0;
 
             # XXX The final '-+$' is to look for -- which ends up being an
             # error later.
             } elsif ( ! $in_document && @$self ) {
                 # only the first document can be explicit
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             } elsif ( $lines[0] =~ /^\s*\-(?:\s|$|-+$)/ ) {
                 # An array at the root
                 my $document = [ ];
                 push @$self, $document;
                 $self->_load_array( $document, [ 0 ], \@lines );
 
             } elsif ( $lines[0] =~ /^(\s*)\S/ ) {
                 # A hash at the root
                 my $document = { };
                 push @$self, $document;
                 $self->_load_hash( $document, [ length($1) ], \@lines );
 
             } else {
                 # Shouldn't get here.  @lines have whitespace-only lines
                 # stripped, and previous match is a line with any
                 # non-whitespace.  So this clause should only be reachable via
                 # a perlbug where \s is not symmetric with \S
 
                 # uncoverable statement
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             }
         }
     };
     my $err = $@;
     if ( ref $err eq 'SCALAR' ) {
         $self->_error(${$err});
     } elsif ( $err ) {
         $self->_error($err);
     }
 
     return $self;
 }
 
 sub _unquote_single {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\'\'/\'/g;
     return $string;
 }
 
 sub _unquote_double {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\\"/"/g;
     $string =~
         s{\\([Nnever\\fartz0b]|x([0-9a-fA-F]{2}))}
          {(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}}gex;
     return $string;
 }
 
 # Load a YAML scalar string to the actual Perl scalar
 sub _load_scalar {
     my ($self, $string, $indent, $lines) = @_;
 
     # Trim trailing whitespace
     $string =~ s/\s*\z//;
 
     # Explitic null/undef
     return undef if $string eq '~';
 
     # Single quote
     if ( $string =~ /^$re_capture_single_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_single($1);
     }
 
     # Double quote.
     if ( $string =~ /^$re_capture_double_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_double($1);
     }
 
     # Special cases
     if ( $string =~ /^[\'\"!&]/ ) {
         die \"YAML::Tiny does not support a feature in line '$string'";
     }
     return {} if $string =~ /^{}(?:\s+\#.*)?\z/;
     return [] if $string =~ /^\[\](?:\s+\#.*)?\z/;
 
     # Regular unquoted string
     if ( $string !~ /^[>|]/ ) {
         die \"YAML::Tiny found illegal characters in plain scalar: '$string'"
             if $string =~ /^(?:-(?:\s|$)|[\@\%\`])/ or
                 $string =~ /:(?:\s|$)/;
         $string =~ s/\s+#.*\z//;
         return $string;
     }
 
     # Error
     die \"YAML::Tiny failed to find multi-line scalar content" unless @$lines;
 
     # Check the indent depth
     $lines->[0]   =~ /^(\s*)/;
     $indent->[-1] = length("$1");
     if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
         die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
     }
 
     # Pull the lines
     my @multiline = ();
     while ( @$lines ) {
         $lines->[0] =~ /^(\s*)/;
         last unless length($1) >= $indent->[-1];
         push @multiline, substr(shift(@$lines), length($1));
     }
 
     my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
     my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
     return join( $j, @multiline ) . $t;
 }
 
 # Load an array
 sub _load_array {
     my ($self, $array, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
             # Inline nested hash
             my $indent2 = length("$1");
             $lines->[0] =~ s/-/ /;
             push @$array, { };
             $self->_load_hash( $array->[-1], [ @$indent, $indent2 ], $lines );
 
         } elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
             shift @$lines;
             unless ( @$lines ) {
                 push @$array, undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)\-/ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] == $indent2 ) {
                     # Null array entry
                     push @$array, undef;
                 } else {
                     # Naked indenter
                     push @$array, [ ];
                     $self->_load_array(
                         $array->[-1], [ @$indent, $indent2 ], $lines
                     );
                 }
 
             } elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
                 push @$array, { };
                 $self->_load_hash(
                     $array->[-1], [ @$indent, length("$1") ], $lines
                 );
 
             } else {
                 die \"YAML::Tiny failed to classify line '$lines->[0]'";
             }
 
         } elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
             # Array entry with a value
             shift @$lines;
             push @$array, $self->_load_scalar(
                 "$2", [ @$indent, undef ], $lines
             );
 
         } elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
             # This is probably a structure like the following...
             # ---
             # foo:
             # - list
             # bar: value
             #
             # ... so lets return and let the hash parser handle it
             return 1;
 
         } else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
     }
 
     return 1;
 }
 
 # Load a hash
 sub _load_hash {
     my ($self, $hash, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         # Find the key
         my $key;
 
         # Quoted keys
         if ( $lines->[0] =~
             s/^\s*$re_capture_single_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_single($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_double_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_double($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_unquoted_key$re_key_value_separator//
         ) {
             $key = $1;
             $key =~ s/\s+$//;
         }
         elsif ( $lines->[0] =~ /^\s*\?/ ) {
             die \"YAML::Tiny does not support a feature in line '$lines->[0]'";
         }
         else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
 
         if ( exists $hash->{$key} ) {
             die \"YAML::Tiny found a duplicate key '$key' in line '$lines->[0]'";
         }
 
         # Do we have a value?
         if ( length $lines->[0] ) {
             # Yes
             $hash->{$key} = $self->_load_scalar(
                 shift(@$lines), [ @$indent, undef ], $lines
             );
         } else {
             # An indent
             shift @$lines;
             unless ( @$lines ) {
                 $hash->{$key} = undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)-/ ) {
                 $hash->{$key} = [];
                 $self->_load_array(
                     $hash->{$key}, [ @$indent, length($1) ], $lines
                 );
             } elsif ( $lines->[0] =~ /^(\s*)./ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] >= $indent2 ) {
                     # Null hash entry
                     $hash->{$key} = undef;
                 } else {
                     $hash->{$key} = {};
                     $self->_load_hash(
                         $hash->{$key}, [ @$indent, length($1) ], $lines
                     );
                 }
             }
         }
     }
 
     return 1;
 }
 
 
 ###
 # Dumper functions:
 
 # Save an object to a file
 sub _dump_file {
     my $self = shift;
 
     require Fcntl;
 
     # Check the file
     my $file = shift or $self->_error( 'You did not specify a file name' );
 
     my $fh;
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         # Open without truncation (truncate comes after lock)
         my $flags = Fcntl::O_WRONLY()|Fcntl::O_CREAT();
         sysopen( $fh, $file, $flags );
         unless ( $fh ) {
             $self->_error("Failed to open file '$file' for writing: $!");
         }
 
         # Use no translation and strict UTF-8
         binmode( $fh, ":raw:encoding(UTF-8)");
 
         flock( $fh, Fcntl::LOCK_EX() )
             or warn "Couldn't lock '$file' for reading: $!";
 
         # truncate and spew contents
         truncate $fh, 0;
         seek $fh, 0, 0;
     }
     else {
         open $fh, ">:unix:encoding(UTF-8)", $file;
     }
 
     # serialize and spew to the handle
     print {$fh} $self->_dump_string;
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $self->_error("Failed to close file '$file': $!");
     }
 
     return 1;
 }
 
 # Save an object to a string
 sub _dump_string {
     my $self = shift;
     return '' unless ref $self && @$self;
 
     # Iterate over the documents
     my $indent = 0;
     my @lines  = ();
 
     eval {
         foreach my $cursor ( @$self ) {
             push @lines, '---';
 
             # An empty document
             if ( ! defined $cursor ) {
                 # Do nothing
 
             # A scalar document
             } elsif ( ! ref $cursor ) {
                 $lines[-1] .= ' ' . $self->_dump_scalar( $cursor );
 
             # A list at the root
             } elsif ( ref $cursor eq 'ARRAY' ) {
                 unless ( @$cursor ) {
                     $lines[-1] .= ' []';
                     next;
                 }
                 push @lines, $self->_dump_array( $cursor, $indent, {} );
 
             # A hash at the root
             } elsif ( ref $cursor eq 'HASH' ) {
                 unless ( %$cursor ) {
                     $lines[-1] .= ' {}';
                     next;
                 }
                 push @lines, $self->_dump_hash( $cursor, $indent, {} );
 
             } else {
                 die \("Cannot serialize " . ref($cursor));
             }
         }
     };
     if ( ref $@ eq 'SCALAR' ) {
         $self->_error(${$@});
     } elsif ( $@ ) {
         $self->_error($@);
     }
 
     join '', map { "$_\n" } @lines;
 }
 
 sub _has_internal_string_value {
     my $value = shift;
     my $b_obj = B::svref_2object(\$value);  # for round trip problem
     return $b_obj->FLAGS & B::SVf_POK();
 }
 
 sub _dump_scalar {
     my $string = $_[1];
     my $is_key = $_[2];
     # Check this before checking length or it winds up looking like a string!
     my $has_string_flag = _has_internal_string_value($string);
     return '~'  unless defined $string;
     return "''" unless length  $string;
     if (Scalar::Util::looks_like_number($string)) {
         # keys and values that have been used as strings get quoted
         if ( $is_key || $has_string_flag ) {
             return qq['$string'];
         }
         else {
             return $string;
         }
     }
     if ( $string =~ /[\x00-\x09\x0b-\x0d\x0e-\x1f\x7f-\x9f\'\n]/ ) {
         $string =~ s/\\/\\\\/g;
         $string =~ s/"/\\"/g;
         $string =~ s/\n/\\n/g;
         $string =~ s/[\x85]/\\N/g;
         $string =~ s/([\x00-\x1f])/\\$UNPRINTABLE[ord($1)]/g;
         $string =~ s/([\x7f-\x9f])/'\x' . sprintf("%X",ord($1))/ge;
         return qq|"$string"|;
     }
     if ( $string =~ /(?:^[~!@#%&*|>?:,'"`{}\[\]]|^-+$|\s|:\z)/ or
         $QUOTE{$string}
     ) {
         return "'$string'";
     }
     return $string;
 }
 
 sub _dump_array {
     my ($self, $array, $indent, $seen) = @_;
     if ( $seen->{refaddr($array)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $el ( @$array ) {
         my $line = ('  ' x $indent) . '-';
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             die \"YAML::Tiny does not support $type references";
         }
     }
 
     @lines;
 }
 
 sub _dump_hash {
     my ($self, $hash, $indent, $seen) = @_;
     if ( $seen->{refaddr($hash)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $name ( sort keys %$hash ) {
         my $el   = $hash->{$name};
         my $line = ('  ' x $indent) . $self->_dump_scalar($name, 1) . ":";
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             die \"YAML::Tiny does not support $type references";
         }
     }
 
     @lines;
 }
 
 
 
 #####################################################################
 # DEPRECATED API methods:
 
 # Error storage (DEPRECATED as of 1.57)
 our $errstr    = '';
 
 # Set error
 sub _error {
     require Carp;
     $errstr = $_[1];
     $errstr =~ s/ at \S+ line \d+.*//;
     Carp::croak( $errstr );
 }
 
 # Retrieve error
 my $errstr_warned;
 sub errstr {
     require Carp;
     Carp::carp( "YAML::Tiny->errstr and \$YAML::Tiny::errstr is deprecated" )
         unless $errstr_warned++;
     $errstr;
 }
 
 
 
 
 #####################################################################
 # Helper functions. Possibly not needed.
 
 
 # Use to detect nv or iv
 use B;
 
 # XXX-INGY Is flock YAML::Tiny's responsibility?
 # Some platforms can't flock :-(
 # XXX-XDG I think it is.  When reading and writing files, we ought
 # to be locking whenever possible.  People (foolishly) use YAML
 # files for things like session storage, which has race issues.
 my $HAS_FLOCK;
 sub _can_flock {
     if ( defined $HAS_FLOCK ) {
         return $HAS_FLOCK;
     }
     else {
         require Config;
         my $c = \%Config::Config;
         $HAS_FLOCK = grep { $c->{$_} } qw/d_flock d_fcntl_can_lock d_lockf/;
         require Fcntl if $HAS_FLOCK;
         return $HAS_FLOCK;
     }
 }
 
 
 # XXX-INGY Is this core in 5.8.1? Can we remove this?
 # XXX-XDG Scalar::Util 1.18 didn't land until 5.8.8, so we need this
 #####################################################################
 # Use Scalar::Util if possible, otherwise emulate it
 
 use Scalar::Util ();
 BEGIN {
     local $@;
     if ( eval { Scalar::Util->VERSION(1.18); } ) {
         *refaddr = *Scalar::Util::refaddr;
     }
     else {
         eval <<'END_PERL';
 # Scalar::Util failed to load or too old
 sub refaddr {
     my $pkg = ref($_[0]) or return undef;
     if ( !! UNIVERSAL::can($_[0], 'can') ) {
         bless $_[0], 'Scalar::Util::Fake';
     } else {
         $pkg = undef;
     }
     "$_[0]" =~ /0x(\w+)/;
     my $i = do { no warnings 'portable'; hex $1 };
     bless $_[0], $pkg if defined $pkg;
     $i;
 }
 END_PERL
     }
 }
 
 delete $YAML::Tiny::{refaddr};
 
 1;
 
 # XXX-INGY Doc notes I'm putting up here. Changing the doc when it's wrong
 # but leaving grey area stuff up here.
 #
 # I would like to change Read/Write to Load/Dump below without
 # changing the actual API names.
 #
 # It might be better to put Load/Dump API in the SYNOPSIS instead of the
 # dubious OO API.
 #
 # null and bool explanations may be outdated.
 
 __END__
 
 =pod
 
 =head1 NAME
 
 YAML::Tiny - Read/Write YAML files with as little code as possible
 
 =head1 VERSION
 
 version 1.64
 
 =head1 PREAMBLE
 
 The YAML specification is huge. Really, B<really> huge. It contains all the
 functionality of XML, except with flexibility and choice, which makes it
 easier to read, but with a formal specification that is more complex than
 XML.
 
 The original pure-Perl implementation L<YAML> costs just over 4 megabytes
 of memory to load. Just like with Windows F<.ini> files (3 meg to load) and
 CSS (3.5 meg to load) the situation is just asking for a B<YAML::Tiny>
 module, an incomplete but correct and usable subset of the functionality,
 in as little code as possible.
 
 Like the other C<::Tiny> modules, YAML::Tiny has no non-core dependencies,
 does not require a compiler to install, is back-compatible to Perl v5.8.1,
 and can be inlined into other modules if needed.
 
 In exchange for this adding this extreme flexibility, it provides support
 for only a limited subset of YAML. But the subset supported contains most
 of the features for the more common uses of YAML.
 
 =head1 SYNOPSIS
 
 Assuming F<file.yml> like this:
 
     ---
     rootproperty: blah
     section:
       one: two
       three: four
       Foo: Bar
       empty: ~
 
 
 Read and write F<file.yml> like this:
 
     use YAML::Tiny;
 
     # Open the config
     my $yaml = YAML::Tiny->read( 'file.yml' );
 
     # Get a reference to the first document
     my $config = $yaml->[0];
 
     # Or read properties directly
     my $root = $yaml->[0]->{rootproperty};
     my $one  = $yaml->[0]->{section}->{one};
     my $Foo  = $yaml->[0]->{section}->{Foo};
 
     # Change data directly
     $yaml->[0]->{newsection} = { this => 'that' }; # Add a section
     $yaml->[0]->{section}->{Foo} = 'Not Bar!';     # Change a value
     delete $yaml->[0]->{section};                  # Delete a value
 
     # Save the document back to the file
     $yaml->write( 'file.yml' );
 
 To create a new YAML file from scratch:
 
     # Create a new object with a single hashref document
     my $yaml = YAML::Tiny->new( { wibble => "wobble" } );
 
     # Add an arrayref document
     push @$yaml, [ 'foo', 'bar', 'baz' ];
 
     # Save both documents to a file
     $yaml->write( 'data.yml' );
 
 Then F<data.yml> will contain:
 
     ---
     wibble: wobble
     ---
     - foo
     - bar
     - baz
 
 =head1 DESCRIPTION
 
 B<YAML::Tiny> is a perl class for reading and writing YAML-style files,
 written with as little code as possible, reducing load time and memory
 overhead.
 
 Most of the time it is accepted that Perl applications use a lot
 of memory and modules. The B<::Tiny> family of modules is specifically
 intended to provide an ultralight and zero-dependency alternative to
 many more-thorough standard modules.
 
 This module is primarily for reading human-written files (like simple
 config files) and generating very simple human-readable files. Note that
 I said B<human-readable> and not B<geek-readable>. The sort of files that
 your average manager or secretary should be able to look at and make
 sense of.
 
 =for stopwords normalise
 
 L<YAML::Tiny> does not generate comments, it won't necessarily preserve the
 order of your hashes, and it will normalise if reading in and writing out
 again.
 
 It only supports a very basic subset of the full YAML specification.
 
 =for stopwords embeddable
 
 Usage is targeted at files like Perl's META.yml, for which a small and
 easily-embeddable module is extremely attractive.
 
 Features will only be added if they are human readable, and can be written
 in a few lines of code. Please don't be offended if your request is
 refused. Someone has to draw the line, and for YAML::Tiny that someone
 is me.
 
 If you need something with more power move up to L<YAML> (7 megabytes of
 memory overhead) or L<YAML::XS> (6 megabytes memory overhead and requires
 a C compiler).
 
 To restate, L<YAML::Tiny> does B<not> preserve your comments, whitespace,
 or the order of your YAML data. But it should round-trip from Perl
 structure to file and back again just fine.
 
 =head1 METHODS
 
 =for Pod::Coverage HAVE_UTF8 refaddr
 
 =head2 new
 
 The constructor C<new> creates a C<YAML::Tiny> object as a blessed array
 reference.  Any arguments provided are taken as separate documents
 to be serialized.
 
 =head2 read $filename
 
 The C<read> constructor reads a YAML file from a file name,
 and returns a new C<YAML::Tiny> object containing the parsed content.
 
 Returns the object on success or throws an error on failure.
 
 =head2 read_string $string;
 
 The C<read_string> constructor reads YAML data from a character string, and
 returns a new C<YAML::Tiny> object containing the parsed content.  If you have
 read the string from a file yourself, be sure that you have correctly decoded
 it into characters first.
 
 Returns the object on success or throws an error on failure.
 
 =head2 write $filename
 
 The C<write> method generates the file content for the properties, and
 writes it to disk using UTF-8 encoding to the filename specified.
 
 Returns true on success or throws an error on failure.
 
 =head2 write_string
 
 Generates the file content for the object and returns it as a character
 string.  This may contain non-ASCII characters and should be encoded
 before writing it to a file.
 
 Returns true on success or throws an error on failure.
 
 =for stopwords errstr
 
 =head2 errstr (DEPRECATED)
 
 Prior to version 1.57, some errors were fatal and others were available only
 via the C<$YAML::Tiny::errstr> variable, which could be accessed via the
 C<errstr()> method.
 
 Starting with version 1.57, all errors are fatal and throw exceptions.
 
 The C<$errstr> variable is still set when exceptions are thrown, but
 C<$errstr> and the C<errstr()> method are deprecated and may be removed in a
 future release.  The first use of C<errstr()> will issue a deprecation
 warning.
 
 =head1 FUNCTIONS
 
 YAML::Tiny implements a number of functions to add compatibility with
 the L<YAML> API. These should be a drop-in replacement.
 
 =head2 Dump
 
   my $string = Dump(list-of-Perl-data-structures);
 
 Turn Perl data into YAML. This function works very much like
 Data::Dumper::Dumper().
 
 It takes a list of Perl data structures and dumps them into a serialized
 form.
 
 It returns a character string containing the YAML stream.  Be sure to encode
 it as UTF-8 before serializing to a file or socket.
 
 The structures can be references or plain scalars.
 
 Dies on any error.
 
 =head2 Load
 
   my @data_structures = Load(string-containing-a-YAML-stream);
 
 Turn YAML into Perl data. This is the opposite of Dump.
 
 Just like L<Storable>'s thaw() function or the eval() function in relation
 to L<Data::Dumper>.
 
 It parses a character string containing a valid YAML stream into a list of
 Perl data structures representing the individual YAML documents.  Be sure to
 decode the character string  correctly if the string came from a file or
 socket.
 
   my $last_data_structure = Load(string-containing-a-YAML-stream);
 
 For consistency with YAML.pm, when Load is called in scalar context, it
 returns the data structure corresponding to the last of the YAML documents
 found in the input stream.
 
 Dies on any error.
 
 =head2 freeze() and thaw()
 
 Aliases to Dump() and Load() for L<Storable> fans. This will also allow
 YAML::Tiny to be plugged directly into modules like POE.pm, that use the
 freeze/thaw API for internal serialization.
 
 =head2 DumpFile(filepath, list)
 
 Writes the YAML stream to a file with UTF-8 encoding instead of just
 returning a string.
 
 Dies on any error.
 
 =head2 LoadFile(filepath)
 
 Reads the YAML stream from a UTF-8 encoded file instead of a string.
 
 Dies on any error.
 
 =head1 YAML TINY SPECIFICATION
 
 This section of the documentation provides a specification for "YAML Tiny",
 a subset of the YAML specification.
 
 It is based on and described comparatively to the YAML 1.1 Working Draft
 2004-12-28 specification, located at L<http://yaml.org/spec/current.html>.
 
 Terminology and chapter numbers are based on that specification.
 
 =head2 1. Introduction and Goals
 
 The purpose of the YAML Tiny specification is to describe a useful subset
 of the YAML specification that can be used for typical document-oriented
 use cases such as configuration files and simple data structure dumps.
 
 =for stopwords extensibility
 
 Many specification elements that add flexibility or extensibility are
 intentionally removed, as is support for complex data structures, class
 and object-orientation.
 
 In general, the YAML Tiny language targets only those data structures
 available in JSON, with the additional limitation that only simple keys
 are supported.
 
 As a result, all possible YAML Tiny documents should be able to be
 transformed into an equivalent JSON document, although the reverse is
 not necessarily true (but will be true in simple cases).
 
 =for stopwords PCRE
 
 As a result of these simplifications the YAML Tiny specification should
 be implementable in a (relatively) small amount of code in any language
 that supports Perl Compatible Regular Expressions (PCRE).
 
 =head2 2. Introduction
 
 YAML Tiny supports three data structures. These are scalars (in a variety
 of forms), block-form sequences and block-form mappings. Flow-style
 sequences and mappings are not supported, with some minor exceptions
 detailed later.
 
 The use of three dashes "---" to indicate the start of a new document is
 supported, and multiple documents per file/stream is allowed.
 
 Both line and inline comments are supported.
 
 Scalars are supported via the plain style, single quote and double quote,
 as well as literal-style and folded-style multi-line scalars.
 
 The use of explicit tags is not supported.
 
 The use of "null" type scalars is supported via the ~ character.
 
 The use of "bool" type scalars is not supported.
 
 =for stopwords serializer
 
 However, serializer implementations should take care to explicitly escape
 strings that match a "bool" keyword in the following set to prevent other
 implementations that do support "bool" accidentally reading a string as a
 boolean
 
   y|Y|yes|Yes|YES|n|N|no|No|NO
   |true|True|TRUE|false|False|FALSE
   |on|On|ON|off|Off|OFF
 
 The use of anchors and aliases is not supported.
 
 The use of directives is supported only for the %YAML directive.
 
 =head2 3. Processing YAML Tiny Information
 
 B<Processes>
 
 =for stopwords deserialization
 
 The YAML specification dictates three-phase serialization and three-phase
 deserialization.
 
 The YAML Tiny specification does not mandate any particular methodology
 or mechanism for parsing.
 
 Any compliant parser is only required to parse a single document at a
 time. The ability to support streaming documents is optional and most
 likely non-typical.
 
 =for stopwords acyclic
 
 Because anchors and aliases are not supported, the resulting representation
 graph is thus directed but (unlike the main YAML specification) B<acyclic>.
 
 Circular references/pointers are not possible, and any YAML Tiny serializer
 detecting a circular reference should error with an appropriate message.
 
 B<Presentation Stream>
 
 =for stopwords unicode
 
 YAML Tiny reads and write UTF-8 encoded files.  Operations on strings expect
 or produce Unicode characters not UTF-8 encoded bytes.
 
 B<Loading Failure Points>
 
 =for stopwords modality
 
 =for stopwords parsers
 
 YAML Tiny parsers and emitters are not expected to recover from, or
 adapt to, errors. The specific error modality of any implementation is
 not dictated (return codes, exceptions, etc.) but is expected to be
 consistent.
 
 =head2 4. Syntax
 
 B<Character Set>
 
 YAML Tiny streams are processed in memory as Unicode characters and
 read/written with UTF-8 encoding.
 
 The escaping and unescaping of the 8-bit YAML escapes is required.
 
 The escaping and unescaping of 16-bit and 32-bit YAML escapes is not
 required.
 
 B<Indicator Characters>
 
 Support for the "~" null/undefined indicator is required.
 
 Implementations may represent this as appropriate for the underlying
 language.
 
 Support for the "-" block sequence indicator is required.
 
 Support for the "?" mapping key indicator is B<not> required.
 
 Support for the ":" mapping value indicator is required.
 
 Support for the "," flow collection indicator is B<not> required.
 
 Support for the "[" flow sequence indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "]" flow sequence indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "{" flow mapping indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "}" flow mapping indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "#" comment indicator is required.
 
 Support for the "&" anchor indicator is B<not> required.
 
 Support for the "*" alias indicator is B<not> required.
 
 Support for the "!" tag indicator is B<not> required.
 
 Support for the "|" literal block indicator is required.
 
 Support for the ">" folded block indicator is required.
 
 Support for the "'" single quote indicator is required.
 
 Support for the """ double quote indicator is required.
 
 Support for the "%" directive indicator is required, but only
 for the special case of a %YAML version directive before the
 "---" document header, or on the same line as the document header.
 
 For example:
 
   %YAML 1.1
   ---
   - A sequence with a single element
 
 Special Exception:
 
 To provide the ability to support empty sequences
 and mappings, support for the constructs [] (empty sequence) and {}
 (empty mapping) are required.
 
 For example,
 
   %YAML 1.1
   # A document consisting of only an empty mapping
   --- {}
   # A document consisting of only an empty sequence
   --- []
   # A document consisting of an empty mapping within a sequence
   - foo
   - {}
   - bar
 
 B<Syntax Primitives>
 
 Other than the empty sequence and mapping cases described above, YAML Tiny
 supports only the indentation-based block-style group of contexts.
 
 All five scalar contexts are supported.
 
 Indentation spaces work as per the YAML specification in all cases.
 
 Comments work as per the YAML specification in all simple cases.
 Support for indented multi-line comments is B<not> required.
 
 Separation spaces work as per the YAML specification in all cases.
 
 B<YAML Tiny Character Stream>
 
 The only directive supported by the YAML Tiny specification is the
 %YAML language/version identifier. Although detected, this directive
 will have no control over the parsing itself.
 
 =for stopwords recognise
 
 The parser must recognise both the YAML 1.0 and YAML 1.1+ formatting
 of this directive (as well as the commented form, although no explicit
 code should be needed to deal with this case, being a comment anyway)
 
 That is, all of the following should be supported.
 
   --- #YAML:1.0
   - foo
 
   %YAML:1.0
   ---
   - foo
 
   % YAML 1.1
   ---
   - foo
 
 Support for the %TAG directive is B<not> required.
 
 Support for additional directives is B<not> required.
 
 Support for the document boundary marker "---" is required.
 
 Support for the document boundary market "..." is B<not> required.
 
 If necessary, a document boundary should simply by indicated with a
 "---" marker, with not preceding "..." marker.
 
 Support for empty streams (containing no documents) is required.
 
 Support for implicit document starts is required.
 
 That is, the following must be equivalent.
 
  # Full form
  %YAML 1.1
  ---
  foo: bar
 
  # Implicit form
  foo: bar
 
 B<Nodes>
 
 Support for nodes optional anchor and tag properties is B<not> required.
 
 Support for node anchors is B<not> required.
 
 Support for node tags is B<not> required.
 
 Support for alias nodes is B<not> required.
 
 Support for flow nodes is B<not> required.
 
 Support for block nodes is required.
 
 B<Scalar Styles>
 
 Support for all five scalar styles is required as per the YAML
 specification, although support for quoted scalars spanning more
 than one line is B<not> required.
 
 Support for multi-line scalar documents starting on the header
 is not required.
 
 Support for the chomping indicators on multi-line scalar styles
 is required.
 
 B<Collection Styles>
 
 Support for block-style sequences is required.
 
 Support for flow-style sequences is B<not> required.
 
 Support for block-style mappings is required.
 
 Support for flow-style mappings is B<not> required.
 
 Both sequences and mappings should be able to be arbitrarily
 nested.
 
 Support for plain-style mapping keys is required.
 
 Support for quoted keys in mappings is B<not> required.
 
 Support for "?"-indicated explicit keys is B<not> required.
 
 =for stopwords endeth
 
 Here endeth the specification.
 
 =head2 Additional Perl-Specific Notes
 
 For some Perl applications, it's important to know if you really have a
 number and not a string.
 
 That is, in some contexts is important that 3 the number is distinctive
 from "3" the string.
 
 Because even Perl itself is not trivially able to understand the difference
 (certainly without XS-based modules) Perl implementations of the YAML Tiny
 specification are not required to retain the distinctiveness of 3 vs "3".
 
 =head1 SUPPORT
 
 Bugs should be reported via the CPAN bug tracker at
 
 L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=YAML-Tiny>
 
 =begin html
 
 For other issues, or commercial enhancement or support, please contact
 <a href="http://ali.as/">Adam Kennedy</a> directly.
 
 =end html
 
 =head1 AUTHOR
 
 Adam Kennedy E<lt>adamk@cpan.orgE<gt>
 
 =head1 SEE ALSO
 
 =over 4
 
 =item * L<YAML>
 
 =item * L<YAML::Syck>
 
 =item * L<Config::Tiny>
 
 =item * L<CSS::Tiny>
 
 =item * L<http://use.perl.org/use.perl.org/_Alias/journal/29427.html>
 
 =item * L<http://ali.as/>
 
 =back
 
 =head1 COPYRIGHT
 
 Copyright 2006 - 2013 Adam Kennedy.
 
 This program is free software; you can redistribute
 it and/or modify it under the same terms as Perl itself.
 
 The full text of the license can be found in the
 LICENSE file included with this module.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__
   );

   unshift @INC, sub {
      my ($me, $packfile) = @_;
      return unless exists $file_for{$packfile};
      (my $text = $file_for{$packfile}) =~ s/^\ //gmxs;
      chop($text); # added \n at the end
      open my $fh, '<', \$text or die "open(): $!\n";
      return $fh;
   };
} ## end BEGIN
# __MOBUNDLE_INCLUSION__

use Template::Perlish qw< render >;
use Data::Crumbr;

my @YAML_MODULES = qw<
      YAML::XS
      YAML::Syck
      YAML::Tiny
>;
my @JSON_MODULES = qw<
   Cpanel::JSON::XS
   JSON::XS
   JSON::PP
>;

my %config = (
   binmode => ':encoding(UTF-8)',
   define => [],
   input  => [],
   output => '-',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     binmode|b=s
     define|d=s@
     format|f=s
     function|F=s
     input|i=s@
     newline|n!
     output|o=s
     template|t=s
     text|T=s
     variable|v=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

$config{newline} = 1
   if $ENV{TEEPEE_NEWLINE} && ! defined $config{newline};

# Script implementation here
my $vars     = read_inputs(\%config);
my $template = read_template(\%config);
{
   no warnings 'once';
   my $crumbr = sub {
      my ($profile) = @_;
      $profile ||= 'URI';
      my @output;
      Data::Crumbr::crumbr(
         profile => $profile,
         encoder => { output => \*STDOUT },
      )->($vars);
   };
   *Template::Perlish::crumbr_as = $crumbr;
   *Template::Perlish::crumbr = sub { $crumbr->('URI') };
   *Template::Perlish::uri_crumbr = sub { $crumbr->('URI') };
   *Template::Perlish::exact_crumbr = sub { $crumbr->('Default') };
   *Template::Perlish::json_crumbr = sub { $crumbr->('JSON') };
   *Template::Perlish::JSON = sub { JSON($vars) };
   *Template::Perlish::YAML = sub { YAML($vars) };
}
my $ofh      = get_output_fh($config{output}, $config{binmode});
my $output = render($template, $vars);
print {$ofh} $output if defined $output;
print {$ofh} "\n" if $config{newline};

sub get_output_fh {
   my ($filename, $binmode) = @_;

   my $fh = \*STDOUT;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '>', $filename
        or die "output open('$filename'): $OS_ERROR\n";
   }

   $binmode = ':raw' if $binmode eq '';
   binmode $fh, $binmode;

   return $fh;
} ## end sub get_output_fh

sub read_template {
   my $cfg = shift;

   $cfg->{text} = "[%= $cfg->{function} %]"
     if exists $cfg->{function};
   $cfg->{text} = "[% $cfg->{variable} %]"
     if exists $cfg->{variable};
   return octets_to_characters(slurp_octets($cfg->{template}))
     unless exists $cfg->{text};

   require I18N::Langinfo;
   require Encode;
   my $codeset = I18N::Langinfo::langinfo(I18N::Langinfo::CODESET());
   return Encode::decode($codeset, $cfg->{text});
} ## end sub read_template

sub read_inputs {
   my $cfg = shift;
   my %retval;

   my @inputs = @{$cfg->{input}};
   @inputs = '-' unless @inputs;
   for my $filename (@inputs) {
      my $data = read_input($filename, $cfg->{format});
      %retval = (%retval, %$data);
   }

   for my $item (@{$cfg->{define}}) {
      my ($key, $value) = split /=/, $item, 2;
      my $pointer = pointer_to_element(\%retval, split /\./, $key);
      $$pointer = $value;
   }

   return \%retval;
} ## end sub read_inputs

sub read_input {
   my ($filename, $format) = @_;
   my $octets = slurp_octets($filename);
   $format ||= detect_format($filename, $octets);
   die "undefined input format\n" unless defined $format;
   my $function = {
      yaml => \&read_input_yaml,
      yml  => \&read_input_yaml,
      json => \&read_input_json,
      jsn  => \&read_input_json,
   }->{lc($format)};
   die "cannot read input format $format\n" unless defined $function;
   return $function->($octets);
} ## end sub read_input

sub octets_to_characters {
   require Encode;
   return Encode::decode('UTF-8', $_[0]);
}

sub slurp_octets {
   my ($filename) = @_;
   die "undefined filename\n" unless defined $filename;
   my $fh = \*STDIN;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '<', $filename
        or die "input open('$filename'): $OS_ERROR\n";
   }
   binmode $fh, ':raw';
   local $/;
   return <$fh>;
} ## end sub slurp_octets

sub load_any {
   for my $candidate (@_) {
      (my $path = "$candidate.pm") =~ s{(?: :: | ')}{/}gmxs;
      eval { require $path; 1 } and return $candidate;
   }
   die "$EVAL_ERROR\n";
}

sub read_input_yaml {
   my $module = load_any(@YAML_MODULES);

   if ($module eq 'YAML::Tiny') {

      # octets are needed here...
      return YAML::Tiny::Load(octets_to_characters($_[0]));

   }
   elsif ($module eq 'YAML::Syck') {

      # YAML::Syck::Load seems to cope with octets and characters
      # we'll use octets here. Anyway, we want characters back.
      local $YAML::Syck::ImplicitUnicode;
      $YAML::Syck::ImplicitUnicode = 1;
      return YAML::Syck::Load($_[0]);

   }
   else {

      # assuming we just needs calling Load() here
      return $module->can('Load')->($_[0]);

   }
} ## end sub read_input_yaml

sub read_input_json {
   my $module = load_any(@JSON_MODULES);
   return $module->can('decode_json')->($_[0]);
} ## end sub read_input_json

sub detect_format {
   my $filename = shift;
   return 'yaml' if $filename =~ m{\. ya?ml \z}imxs;
   return 'json' if $filename =~ m{\. jso?n \z}imxs;

   # try with content
   return 'json' if $_[0] =~ m/\A{/mxs;
   return 'yaml' if $_[0] =~ m{\A---}mxs;

   # bail out
   die "cannot infer format for file '$filename'\n";
} ## end sub detect_format

# Adapted from http://perlmonks.org/?node_id=443584
sub pointer_to_element {
   return reduce {
      ($b =~ m{\A(?: 0 | [1-9]\d* )\z}mxs) ? \($$a->[$b]) : \($$a->{$b});
   }, \shift, @_;
}

sub JSON {
   my $module = load_any(@JSON_MODULES);
   return $module->new()->pretty()->encode(shift);
}

sub YAML {
   require Storable;
   my $ref = cleanup(Storable::dclone(shift));
   my $module = load_any(@YAML_MODULES);
   return $module->can('Dump')->($ref);
}

sub isa_any {
   my ($object, @candidates) = @_;
   for my $candidate (@candidates) {
      return 1 if $object->isa($candidate);
   }
   return;
}

sub cleanup {
   my $ref = shift;
   traverse($ref, {},
      sub {
         return unless blessed $_[0];
         if (isa_any($_[0], qw<
               Cpanel::JSON::XS::Boolean
               JSON::XS::Boolean
               JSON::PP::Boolean
               >))
         {
            $_[0] = $_[0] ? 'true' : 'false';
         }
         else {
            $_[0] = "$_[0]";
         }
      }
   );
   return $ref;
}

sub traverse {
   my ($ref, $track, $action) = @_;
   my $type = ref($ref) or return;
   die "circular structure not allowed\n"
      if $track->{refaddr($ref)}++;
   if ($type eq 'HASH') {
      for my $v (values %$ref) {
         $action->($v);
         traverse($v, $track, $action);
      }
   }
   elsif ($type eq 'ARRAY') {
      for my $v (@$ref) {
         $action->($v);
         traverse($v, $track, $action);
      }
   }
   return;
}

__END__

=head1 NAME

teepee - extract data from structures

=head1 HURRY UP!

Get the bundled version like this:

   curl -LO https://github.com/polettix/teepee/raw/master/bundle/teepee

or this

   wget https://github.com/polettix/teepee/raw/master/bundle/teepee

or just click here: L<https://github.com/polettix/teepee/raw/master/bundle/teepee>

=head1 USAGE

   teepee [--usage] [--help] [--man] [--version]

   teepee [-b|--binmode setting]
          [-d|--define key=value]
          [-f|--format input-format]
          [-F|--function spec]
          [-i|--input filename]
          [-n|--newline|--no-newline]
          [-o|--output filename]
          [-t|--template filename]
          [-T|--text string]
          [-v|--variable string]

=head1 EXAMPLES

   shell$ teepee -i data.yml -t template.file -o generated
   
   shell$ teepee -i data.json -T 'hello [% customer.name %]'


=head1 DESCRIPTION

C<teepee> allows you to generate data according to a template. Data is
extracted from data structures available in JSON or YAML format, read
from files or from standard input. This should make it easy to extract
the needed data e.g. out of the output from some tool that provides you
structured JSON or YAML text in output.

=head2 Options Overview

Input data structures can be provided via option L<-i | --input>. You
can provide more than one input; in this case, they will be read in
order and merged together. Merging in this case means that whatever is
present in a file provided later in the command line supersedes
whatevever was previously available. If you set the input filename as
C<->, the input will be read from standard input.

You can provide input definitions from the command line too, via option
L</--define>. In this case, you can provide the "path" into the
data structure separating items with a dot C<.>. Any key part that
resembles an integer index starting from 0 will be interpreted as an
array index, otherwise it will be considered a hash key. Definitions
with this options always supersede those read from input files.

The input format can be either specified explicitly via option
L</--format> or deduced implicitly. The heuristic will first check the
file name, then the contents. Suggestion is to specify it if you happen
to know, expecially for programmatic usage.

The template to be expanded can be provided either from a file (via
option L</--template>) or from the command-line directly (via
option L</--text>). Templates can be written according to what
L<Template::Perlish> provides.

All files are supposed to be UTF-8 encoded. When the template is
provided from the command line, module L<I18N::Langinfo> is used to
auto-detect the terminal setting and try to do the right things. If in
doubt, just use a UTF-8 encoded file for your template.

Output is sent to either standard output (by default or if you set the
filename to C<->) or to the filename specified via option C</--output>.
Output will be printed assuming that the receiving end is UTF-8 capable.

=head2 Writing Templates

Templates for extracting data are written according to what
Template::Perlish provides. You should take a look at its documentation
at L<https://metacpan.org/pod/Template::Perlish>. Only a few tricks will
be reported here, just to get your feet wet.

We will suppose to have the following data, represented as YAML:

   ---
   key1: value1
   key2: value2
   array:
      - first
      - second
      - third
      -
         k1: v1
         k2: v2
   hash:
      one: two
      three: four
      five:
         - a
         - b
         - 'see...'
      'complex key': whatever

Values that are neither hashes/objects nor arrays will be called
I<scalars>.

So, we have a hash at the top level, with four keys (C<key1>, C<key2>,
C<array> and C<hash>), two of which are scalars, one is an array and one
is a hash. The array contains four items, the last of which is a hash
with two keys (C<k1> and C<k2>). The hash contains three keys, the first
two (C<one> and C<three>) associated to a scalar value, the last one
being an array with three strings inside.

If you want to just access scalar variable pointed by key C<three>
inside C<hash>, it is sufficient to provide the I<path> to that value as
a sequence of keys starting from the top level and separated by a dot,
like this:

   [% hash.three %]

If you want to access an array's element, the trick is similar but you
will have to use the index (starting from 0) instead of the key. So, for
example, the C<b> in the second array would be accessed like this:

   [% hash.five.1 %]

and the C<v1> like this:

   [% array.3.k1 %]

Please note that, by default, the keys that you can concatenate can only
contain alphanumeric values, plus the underscore. What if you want to
access C<whatever> then? You can insert non-alphanumeric characters
using quotes, like this:

   [% hash.'complex key' %]

As you can imagine, there are ways to also cope with keys that have
quotes inside, so refer to Template::Perlish if you need to know more.

Besides just accessing scalar values, you might want to add some logic
to your templates. You can do this by simply writing Perl code, because
whatever is not recognised as a valid I<path of keys> is considered Perl
code and evaluated accordingly:

   current time: [% print scalar localtime() %]

There is even a shortcut to just print the output of an expression, so
the above example can be written like this:

   current time: [%= scalar localtime() %]

(note that there is an equal sign just after the template opening).

When you are writing Perl code, you can access the data structure
through the hash variable C<%variables>, so the following are
equivalent:

   [% hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]

but of course you can do fancier things with the second one, like this:

   uppercase: [%= uc $variables{hash}{'complex key'} %]

Accessing variables like this can be boring if you have a deeply nested
data structure, because it's a lot of typing and a lot of curly
brackets. To save typing and time, you can use the shortcut function
C<V>, so the following are equivalent:

   [%  hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]
   [%= V("hash.'complex key'") %]

As you are probably guessing, C<V> uses the same algorithm as just
putting a plain sequence of path elements, including its restrictions on
non-alphanumeric characters. This is considered a feature, because it
adds consistency.

Just like you can access any variable with C<V>, you also have a few
additional functions at your disposal for some common tasks. For
example, sometimes you will want to iterate over an array and find just
those elements that have some characteristics, e.g. restricting only to
elements that are hashes containing the C<k1> key. The long version is
this, of course:

   [%
      for my $item (@{$variables{array}}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

You can use the C<V> shortcut, of course:

   [%
      for my $item (@{V('array')}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

although in this case you would probably use C<A> instead:

   [%
      for my $item (A 'array') {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

This takes the element at path C<array> from C<%variables>, expands it
as an array and... well, what you do with it is completely up to you, of
course.

=head2 Feeling Better With C<grep>?

If you're not very comfortable with Perl... you should. There are a lot
of very good resources out there to learn it, the most outstanding
and readily available example is probably Modern Perl
(L<http://onyxneon.com/books/modern_perl/index.html>, look for both the
printed and online version).

Anyway, if you're in a hurry and you prefer to use C<grep>/C<sed> and
all other classical Unix tools, you can turn on I<crumbr> mode and play
with its output.

To understand what crumbr does, let's start from an example, i.e. let's
see what this does when applied to the example data structure described
in L</Writing Templates>. The template is quite straightforward in this
case:

   $ teepee -T '[% crumbr(); %]' -i data.yml

and the output is the following:

   array/0 "first"
   array/1 "second"
   array/2 "third"
   array/3/k1 "v1"
   array/3/k2 "v2"
   hash/complex%20key "whatever"
   hash/five/0 "a"
   hash/five/1 "b"
   hash/five/2 "see..."
   hash/one "two"
   hash/three "four"
   key1 "value1"
   key2 "value2"

Every leaf node is represented on a single line of its own. Each line
contains a URI-shaped path, a space, and a JSON-encoded representation
of the value. Hash keys are sorted lexicographically, array keys are
sorted numerically.

So, are we still looking at the values pointed by key C<k1> inside any
hash under the top-level array? This is how you do it:

   $ teepee -T '[% crumbr(); %]' -i data.yml \
     | grep '^array/[0-9][0-9]*/k1 '

You get the idea.

Why the JSON encoding in the output? Aren't those double quotes
annoying? The answer is probably yes, but they are also needed. In fact,
there are a few cases where you will I<not> see them, namely:

=over

=item * B<< empty arrays >>

are represented as C<[]>, without quotes

=item * B<< empty hashes >>

are represented as C<{}>, without quotes

=item * B<< null/undefined values >>

are represented as I<null>, without quotes (as opposed to
the string I<"null">, that has the quotes).

=back

Example:

   $ cat sample.yaml
   ---
   'plain-value': ciao
   'null-value': ~
   'empty-array': []
   'empty-hash': {}

   $ teepee -T '[% crumbr(); %]' <sample.yaml
   empty-array []
   empty-hash {}
   null-value null
   plain-value "ciao"

You have probably noticed that this does not allow you to clearly
distinguish between hash/object keys and array indexes. Hopefully this
does not concern you because you have a sane input data structure, but
in case you want to remove any space for misunderstanding, you can use
C<exact_crumbr> instead:

   $ teepee -T '[% exact_crumbr(); %]' -i data.yml
   {"array"}[0]:"first"
   {"array"}[1]:"second"
   {"array"}[2]:"third"
   {"array"}[3]{"k1"}:"v1"
   {"array"}[3]{"k2"}:"v2"
   {"hash"}{"complex key"}:"whatever"
   {"hash"}{"five"}[0]:"a"
   {"hash"}{"five"}[1]:"b"
   {"hash"}{"five"}[2]:"see..."
   {"hash"}{"one"}:"two"
   {"hash"}{"three"}:"four"
   {"key1"}:"value1"
   {"key2"}:"value2"

If you like, or need, to play with I<JSON subsets> instead, you might
find C<json_crumbr> interesting:

   $ teepee -T '[% json_crumbr(); %]' -i data.yml
   {"array":["first"]}
   {"array":["second"]}
   {"array":["third"]}
   {"array":[{"k1":"v1"}]}
   {"array":[{"k2":"v2"}]}
   {"hash":{"complex key":"whatever"}}
   {"hash":{"five":["a"]}}
   {"hash":{"five":["b"]}}
   {"hash":{"five":["see..."]}}
   {"hash":{"one":"two"}}
   {"hash":{"three":"four"}}
   {"key1":"value1"}
   {"key2":"value2"}

In this case, each line is a valid JSON data structure with one single
leaf value only.

=head1 OPTIONS

=over

=item -b

=item --binmode

   -b setting
   --binmode setting

set the output encoding using the same rules as Perl's C<binmode>
function. Defaults to C<:encoding(UTF-8)>. When left empty, it is
considered equivalent to C<:raw>.

=item -d

=item --define

   -d key=value
   --define key=value

add the definition of an element in the input data. The following
algorithm applies:

=over

=item *

input definition C<key=value> is split at the first C<=> sign found.
This means that the C<key> cannot contain C<=> signs, while the value
can;

=item *

the C<key> part is divided into sub-keys splitting using the C<.> dot
character. This means that sub-keys cannot contain dots.

=item *

each sub-key is used to traverse the input data, with auto-vivification
when necessary.

=item *

sub-keys that are non-negative integers (i.e. either 0 or any positive
integer) are regarded as array indexes. Otherwise, the sub-key is
regarded as a hash key.

=item *

the C<value> part is assigned as the element I<pointed> by the last
sub-key.

=back

=item -f

=item --format

   -f <yaml|yml|json|jsn>
   --format <yaml|yml|json|jsn>

set the format for input data files. It can be one of C<yml>, C<yaml>,
C<json> or C<jsn> in whatever case.

=item -F

=item --function

   -F spec
   --function spec

set template to a function. This is equivalent to specifying:

   -T '[%= spec %]'

except that it is more concise. You can of course put whatever in
C<spec>, so you are not constrained on using a single function.

Currently available functions are:

=over

=item - C<crumbr_as(type)>

where C<type> can be C<URI>, C<Default> or C<JSON>;

=item - C<crumbr>

alias to C<uri_crumbr>

=item - C<uri_crumbr>

=item - C<exact_crumbr>

=item - C<json_crumbr>

=item - C<JSON>

dumps the input as pretty-printed JSON (so this is more readable)

=item - C<YAML>

dumps the input as YAML (so this is more readable)

=back



=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item -i

=item --input

   -i filename
   --input filename

an input file carrying data for expansion. This option can be set
multiple times, which will trigger (shallow) merging of the data
structures.

If set as C<->, standard input will be read.

Note: only allowed data structures are hashes at the top level.

=item --man

print out the full documentation for the script.

=item -n

=item --newline

=item --no-newline

the first two forms set C<teepee> to always print a newline at the end.
This should make it easier to use in the command line, especially for
casually printing variables on the shell.

The last form is the negation, i.e. newline printing is disabled. This
can come handy when you set the environment variable L</TEEPEE_NEWLINE>
to a non-false value, but you want to disable the newline printing in
one call.

=item -o 

=item --output

   -o filename
   --output filename

set the output channel where data will be sent. By default it is set to
C<->, which means standard output.

Data will be printed assuming the channel is UTF-8 capable.

=item -t 

=item --template

   -t filename
   --template filename

set the input template filename. The input file is assumed to be UTF-8
encoded.

Templates are assumed to be valid L<Template::Perlish> template files,
see that module's documentation for additional help. The default opener
and closer are assumed.

=item -T 

=item --text

set the template to expand directly on the command line.

=item --usage

print a concise usage line and exit.

=item -v string

=item --variable string

   -v some.data.inside
   --variable some.data.inside

expand a variable directly. This is equivalent to specifying:

   -T '[% some.data.inside %]'

but more concise.

=item --version

print the version of the script.

=back

=head1 DIAGNOSTICS

=over

=item C<< output open('%s'): %s >>

errors while opening the output channel, second placeholder carries the
error from the operating system.

=item C<< undefined input format >>

auto-detection of input format failed. You can use option L</--format>
to specify the input format.

=item C<< cannot read input format %s >>

the provided input format is not recognised, see L</--format> for the
allowed values.

=item C<< undefined filename >>

the filename provided for input reading is not defined. This applies
both to data and template inputs.

=item C<< input open('%s'): %s >>

errors while opening an input file, second placeholder carries the
error from the operating system.

=item C<< cannot infer format for file '%s' >>

heuristic to infer the format of the file failed. You can specify the
format to be used using L</--format>

=back


=head1 CONFIGURATION AND ENVIRONMENT

teepee requires no configuration files.

The following environment variables are supported:

=over

=item B<< TEEPEE_NEWLINE >>

when set to a true value, it has the same effect of option
L</--newline>. Anyway, the command line always overrides the environment
variable, so if option L</--no-newline> is set, the newline printig will
be disabled anyway.

=back


=head1 DEPENDENCIES

=over

=item *

L<JSON::PP>

=item *

L<Template::Perlish>

=item *

L<YAML::Tiny>

=back

The bundled version contains all the needed modules.

=head1 BUGS AND LIMITATIONS

No bugs have been reported. Auto-detection of local should probably
extend to output encoding when printing to standard output, as opposed
to assuming UTF-8 is fine.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
