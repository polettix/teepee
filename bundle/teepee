#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.4.1';
use List::Util qw< reduce >;
use I18N::Langinfo qw(langinfo CODESET);
use Scalar::Util qw< refaddr blessed >;

# __MOBUNDLE_INCLUSION__
BEGIN {
   my %file_for = (
# __MOBUNDLE_FILES__


# __MOBUNDLE_FILE__

      'Data/Crumbr.pm' => <<'END_OF_FILE',
 package Data::Crumbr;
 $Data::Crumbr::VERSION = '0.1.1';
 # ABSTRACT: Render data structures for easy searching and parsing
 
 # Inlined Mo
 use Mo qw< default coerce >;
 
 use strict;
 use warnings;
 use Carp;
 use English qw< -no_match_vars >;
 use Exporter qw< import >;
 use Scalar::Util qw< blessed >;
 
 our @EXPORT      = qw< crumbr >;
 our @EXPORT_OK   = @EXPORT;
 our %EXPORT_TAGS = (all => [@EXPORT_OK]);
 
 has encoder => (
    default => sub { __encoder() },
    coerce  => \&__encoder,
 );
 
 sub __load_class {
    my ($class) = @_;
    (my $packname = "$class.pm") =~ s{::}{/}gmxs;
    require $packname;
    return $class;
 } ## end sub __load_class
 
 sub crumbr {
    my %args = (@_ && ref($_[0])) ? %{$_[0]} : @_;
    if (defined(my $name = delete $args{profile})) {
       my $class   = __PACKAGE__ . "::Default::$name";
       my $profile = __load_class($class)->profile();
       my $encoder = delete($args{encoder}) // {};
       %$encoder = (
          %$profile,
          %$encoder,    # allow some overriding
          class => '::Default',    # but not on this one
       );
       %args = (encoder => $encoder);
    } ## end if (defined(my $name =...))
    my $wh = __PACKAGE__->new(%args);
    return sub { $wh->encode(@_) };
 } ## end sub crumbr
 
 sub __encoder {
    my ($e) = @_;
    if (!blessed($e)) {
       my ($class, @parameters) = $e;
       if (ref($e) eq 'HASH') {
          $class      = delete $e->{class};
          @parameters = %$e;
       }
       $class = '::Default' unless defined $class;
       $class = __PACKAGE__ . $class
         if substr($class, 0, 2) eq '::';
       $e = __load_class($class)->new(@parameters);
    } ## end if (!blessed($e))
    return $e;
 } ## end sub __encoder
 
 sub encode {
    my ($self, $data) = @_;
    my $encoder = $self->encoder();
    $encoder->reset();
 
    my @stack = ({closers => ''}, {data => $data, type => ref($data)},);
  ITERATION:
    while (@stack > 1) {    # frame #0 is dummy
       my $frame = $stack[-1];
       if ($frame->{type} eq 'ARRAY') {
          if (!scalar(@{$frame->{data}})) {
             $encoder->array_leaf(\@stack);
          }
          else {
             my $iterator = $frame->{iterator} //=
               $encoder->array_keys_iterator($frame->{data});
             if (defined(my $key = $iterator->())) {
                $frame->{encoded} = $encoder->array_key($key);
                $frame->{closers} =
                  $encoder->array_close() . $stack[-2]{closers};
                my $child_data = $frame->{data}[$key];
                push @stack,
                  {
                   data => $child_data,
                   type => ref($child_data),
                  };
                next ITERATION;
             } ## end if (defined(my $key = ...))
          } ## end else [ if (!scalar(@{$frame->...}))]
       } ## end if ($frame->{type} eq ...)
       elsif ($frame->{type} eq 'HASH') {
          if (!scalar(keys %{$frame->{data}})) {
             $encoder->hash_leaf(\@stack);
          }
          else {
             my $iterator = $frame->{iterator} //=
               $encoder->hash_keys_iterator($frame->{data});
             if (defined(my $key = $iterator->())) {
                $frame->{encoded} = $encoder->hash_key($key);
                $frame->{closers} =
                  $encoder->hash_close() . $stack[-2]{closers};
                my $child_data = $frame->{data}{$key};
                push @stack,
                  {
                   data => $child_data,
                   type => ref($child_data),
                  };
                next ITERATION;
             } ## end if (defined(my $key = ...))
          } ## end else [ if (!scalar(keys %{$frame...}))]
       } ## end elsif ($frame->{type} eq ...)
       else {    # treat as leaf scalar
          $encoder->scalar_leaf(\@stack);
       }
 
       # only leaves or end-of-container arrive here
       pop @stack;
    } ## end ITERATION: while (@stack > 1)
 
    return $encoder->result();
 } ## end sub encode
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default;
 $Data::Crumbr::Default::VERSION = '0.1.1';
 # ABSTRACT: Default renderer for Data::Crumbr
 
 use Mo qw< default coerce >;
 
 use strict;
 use warnings;
 use Carp;
 use English qw< -no_match_vars >;
 use Scalar::Util qw< blessed >;
 use Data::Crumbr::Util;
 
 my $jenc = Data::Crumbr::Util::json_leaf_encoder();
 my $ienc = Data::Crumbr::Util::id_encoder();
 
 has array_open        => (default => sub { '' });
 has array_close       => (default => sub { '' });
 has array_key_prefix  => (default => sub { '[' });
 has array_key_suffix  => (default => sub { ']' });
 has array_key_encoder => (default => sub { $ienc });
 has hash_open         => (default => sub { '' });
 has hash_close        => (default => sub { '' });
 has hash_key_prefix   => (default => sub { '{' });
 has hash_key_suffix   => (default => sub { '}' });
 has hash_key_encoder  => (default => sub { $jenc });
 has value_encoder     => (default => sub { $jenc });
 has keys_separator    => (default => sub { '' });
 has value_separator   => (default => sub { ':' });
 
 has output => (
    default => sub { __output() },
    coerce  => \&__output,
 );
 
 sub __output {
    my ($output) = @_;
    $output //= [];
    my $reftype = ref $output;
 
    if (!$reftype) {    # filename, transform into filehandle
       my $fh = \*STDOUT;
       if ($output ne '-') {
          $fh = undef;
          open $fh, '>', $output
            or croak "open('$output'): $OS_ERROR";
       }
       binmode $fh, ':raw'
         or croak "binmode() on $output: $OS_ERROR";
       $reftype = ref($output = $fh);
    } ## end if (!$reftype)
 
    return sub {
       return unless @_;
       print {$output} $_[0], "\n";
      }
      if $reftype eq 'GLOB';
 
    return sub {
       return $output unless @_;
       push @$output, $_[0];
      }
      if $reftype eq 'ARRAY';
 
    return sub {
       return unless @_;
       $output->print($_[0]);
      }
      if blessed($output);
 
    return sub {
       return unless @_;
       return $output->($_[0]);
      }
      if $reftype eq 'CODE';
 
    croak "invalid output";
 } ## end sub __output
 
 sub leaf {
    my ($self, $stack) = @_;
 
    my $venc       = $self->value_encoder();
    my @components = $venc->($stack->[-1]{data});
 
    my @keys = map { $_->{encoded} } @$stack;
    shift @keys;    # first item of @$stack is dummy
    pop @keys;      # last item of @$stack is the leaf, drop it
 
    my $closers = '';
    if (@keys) {
       unshift @components, join $self->keys_separator(), @keys;
       $closers = $stack->[-2]{closers};
    }
 
    my $record = join $self->value_separator(), @components;
    $self->output()->($record . $closers);
 } ## end sub leaf
 
 {
    no strict 'refs';
    *scalar_leaf = \&leaf;
    *array_leaf  = \&leaf;
    *hash_leaf   = \&leaf;
 }
 
 sub array_keys_iterator {
    my ($self, $aref) = @_;
    my $i   = 0;
    my $sup = @$aref;
    return sub {
       return if $i >= $sup;
       return $i++;
    };
 } ## end sub array_keys_iterator
 
 sub hash_keys_iterator {
    my ($self, $href) = @_;
    my @keys = sort keys %$href;    # memory intensive...
    return sub { return shift @keys };
 }
 
 sub array_key {
    my ($self, $key) = @_;
    return join '', $self->array_open(),
      $self->array_key_prefix(),
      $self->array_key_encoder()->($key),
      $self->array_key_suffix();
 } ## end sub array_key
 
 sub hash_key {
    my ($self, $key) = @_;
    return join '', $self->hash_open(),
      $self->hash_key_prefix(),
      $self->hash_key_encoder()->($key),
      $self->hash_key_suffix();
 } ## end sub hash_key
 
 sub result {
    my ($self) = @_;
    my $output = $self->output()->()
      or return;
    return join "\n", @$output;
 } ## end sub result
 
 sub reset {
    my ($self) = @_;
    my $output = $self->output()->()
      or return;
    @$output = ();
    return;
 } ## end sub reset
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/Default.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::Default;
 $Data::Crumbr::Default::Default::VERSION = '0.1.1';
 # ABSTRACT: "Default" profile for Data::Crumbr::Default
 
 # Default is default... nothing is set here!
 sub profile { return {}; }
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/JSON.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::JSON;
 $Data::Crumbr::Default::JSON::VERSION = '0.1.1';
 # ABSTRACT: "JSON" profile for Data::Crumbr::Default
 use Data::Crumbr::Util;
 
 sub profile {
    my $json_encoder = Data::Crumbr::Util::json_leaf_encoder();
    return {
       hash_open       => '{',
       hash_key_prefix => '',
       hash_key_suffix => ':',
       hash_close      => '}',
 
       array_open       => '[',
       array_key_prefix => '',
       array_key_suffix => '',
       array_close      => ']',
 
       keys_separator    => '',
       value_separator   => '',
       array_key_encoder => sub { },
       hash_key_encoder  => $json_encoder,
       value_encoder     => $json_encoder,
    };
 } ## end sub profile
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Default/URI.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Default::URI;
 $Data::Crumbr::Default::URI::VERSION = '0.1.1';
 # ABSTRACT: "JSON" profile for Data::Crumbr::Default
 use Data::Crumbr::Util;
 
 sub profile {
    my $json_encoder = Data::Crumbr::Util::json_leaf_encoder();
    my $uri_encoder  = Data::Crumbr::Util::uri_encoder();
    return {
       array_open       => '',
       array_close      => '',
       array_key_prefix => '',
       array_key_suffix => '',
 
       hash_open       => '',
       hash_close      => '',
       hash_key_prefix => '',
       hash_key_suffix => '',
 
       keys_separator  => '/',
       value_separator => ' ',
 
       array_key_encoder => $uri_encoder,
       hash_key_encoder  => $uri_encoder,
       value_encoder     => $json_encoder,
    };
 } ## end sub profile
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Data/Crumbr/Util.pm' => <<'END_OF_FILE',
 package Data::Crumbr::Util;
 $Data::Crumbr::Util::VERSION = '0.1.1';
 # ABSTRACT: utility functions for Data::Crumbr
 use strict;
 use Carp;
 use Scalar::Util qw< reftype blessed >;
 
 sub json_leaf_encoder {
    require B;
    return \&_json_leaf_encode;
 }
 
 {
    my $slash_escaped;
 
    BEGIN {
       $slash_escaped = {
          0x22 => '"',
          0x5C => "\\",
          0x2F => '/',
          0x08 => 'b',
          0x0C => 'f',
          0x0A => 'n',
          0x0D => 'r',
          0x09 => 't',
       };
    } ## end BEGIN
 
    sub _json_leaf_encode {
       return 'null' unless defined $_[0];
 
       my $reftype = ref($_[0]);
       return '[]' if $reftype eq 'ARRAY';
       return '{}' if $reftype eq 'HASH';
       return (${$_[0]} ? 'true' : 'false')
         if $reftype eq 'SCALAR';
 
       if (my $package = blessed($_[0])) {
          my $reftype = reftype($_[0]);
          return (${$_[0]} ? 'true' : 'false')
            if ($reftype eq 'SCALAR') && ($package =~ /bool/mxsi);
       }
 
       croak "unsupported ref type $reftype" if $reftype;
 
       my $number_flags = B::SVp_IOK() | B::SVp_NOK();
       return $_[0]
         if (B::svref_2object(\$_[0])->FLAGS() & $number_flags)
         && 0 + $_[0] eq $_[0]
         && $_[0] * 0 == 0;
 
       my $string = join '', map {
          my $cp = ord($_);
 
          if (exists $slash_escaped->{$cp}) {
             "\\$slash_escaped->{$cp}";
          }
          elsif ($cp >= 32 && $cp < 128) {    # ASCII
             $_;
          }
          elsif ($cp < 0x10000) {             # controls & BML
             sprintf "\\u%4.4X", $cp;
          }
          else {                              # beyond BML
             my $hi = ($cp - 0x10000) / 0x400 + 0xD800;
             my $lo = ($cp - 0x10000) % 0x400 + 0xDC00;
             sprintf "\\u%4.4X\\u%4.4X", $hi, $lo;
          }
       } split //, $_[0];
       return qq<"> . $string . qq<">;
    } ## end sub _json_leaf_encode
 }
 
 sub uri_encoder {
    require Encode;
    return \&_uri_encoder;
 }
 
 {
    my %is_unreserved;
 
    BEGIN {
       my @u = ('a' .. 'z', 'A' .. 'Z', '0' .. '9', qw< - _ . ~ >);
       %is_unreserved = map { $_ => 1 } @u;
    }
 
    sub _uri_encoder {
       my $octets = Encode::encode('UTF-8', $_[0], Encode::FB_CROAK());
       return join '',
         map { $is_unreserved{$_} ? $_ : sprintf('%%%2.2X', ord $_); }
         split //, $octets;
    } ## end sub _uri_encoder
 }
 
 sub id_encoder {
    return sub { $_[0] };
 }
 
 1;
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'JSON/PP.pm' => <<'END_OF_FILE',
 package JSON::PP;
 
 # JSON-2.0
 
 use 5.005;
 use strict;
 use base qw(Exporter);
 use overload ();
 
 use Carp ();
 use B ();
 #use Devel::Peek;
 
 $JSON::PP::VERSION = '2.27300';
 
 @JSON::PP::EXPORT = qw(encode_json decode_json from_json to_json);
 
 # instead of hash-access, i tried index-access for speed.
 # but this method is not faster than what i expected. so it will be changed.
 
 use constant P_ASCII                => 0;
 use constant P_LATIN1               => 1;
 use constant P_UTF8                 => 2;
 use constant P_INDENT               => 3;
 use constant P_CANONICAL            => 4;
 use constant P_SPACE_BEFORE         => 5;
 use constant P_SPACE_AFTER          => 6;
 use constant P_ALLOW_NONREF         => 7;
 use constant P_SHRINK               => 8;
 use constant P_ALLOW_BLESSED        => 9;
 use constant P_CONVERT_BLESSED      => 10;
 use constant P_RELAXED              => 11;
 
 use constant P_LOOSE                => 12;
 use constant P_ALLOW_BIGNUM         => 13;
 use constant P_ALLOW_BAREKEY        => 14;
 use constant P_ALLOW_SINGLEQUOTE    => 15;
 use constant P_ESCAPE_SLASH         => 16;
 use constant P_AS_NONBLESSED        => 17;
 
 use constant P_ALLOW_UNKNOWN        => 18;
 
 use constant OLD_PERL => $] < 5.008 ? 1 : 0;
 
 BEGIN {
     my @xs_compati_bit_properties = qw(
             latin1 ascii utf8 indent canonical space_before space_after allow_nonref shrink
             allow_blessed convert_blessed relaxed allow_unknown
     );
     my @pp_bit_properties = qw(
             allow_singlequote allow_bignum loose
             allow_barekey escape_slash as_nonblessed
     );
 
     # Perl version check, Unicode handling is enable?
     # Helper module sets @JSON::PP::_properties.
     if ($] < 5.008 ) {
         my $helper = $] >= 5.006 ? 'JSON::PP::Compat5006' : 'JSON::PP::Compat5005';
         eval qq| require $helper |;
         if ($@) { Carp::croak $@; }
     }
 
     for my $name (@xs_compati_bit_properties, @pp_bit_properties) {
         my $flag_name = 'P_' . uc($name);
 
         eval qq/
             sub $name {
                 my \$enable = defined \$_[1] ? \$_[1] : 1;
 
                 if (\$enable) {
                     \$_[0]->{PROPS}->[$flag_name] = 1;
                 }
                 else {
                     \$_[0]->{PROPS}->[$flag_name] = 0;
                 }
 
                 \$_[0];
             }
 
             sub get_$name {
                 \$_[0]->{PROPS}->[$flag_name] ? 1 : '';
             }
         /;
     }
 
 }
 
 
 
 # Functions
 
 my %encode_allow_method
      = map {($_ => 1)} qw/utf8 pretty allow_nonref latin1 self_encode escape_slash
                           allow_blessed convert_blessed indent indent_length allow_bignum
                           as_nonblessed
                         /;
 my %decode_allow_method
      = map {($_ => 1)} qw/utf8 allow_nonref loose allow_singlequote allow_bignum
                           allow_barekey max_size relaxed/;
 
 
 my $JSON; # cache
 
 sub encode_json ($) { # encode
     ($JSON ||= __PACKAGE__->new->utf8)->encode(@_);
 }
 
 
 sub decode_json { # decode
     ($JSON ||= __PACKAGE__->new->utf8)->decode(@_);
 }
 
 # Obsoleted
 
 sub to_json($) {
    Carp::croak ("JSON::PP::to_json has been renamed to encode_json.");
 }
 
 
 sub from_json($) {
    Carp::croak ("JSON::PP::from_json has been renamed to decode_json.");
 }
 
 
 # Methods
 
 sub new {
     my $class = shift;
     my $self  = {
         max_depth   => 512,
         max_size    => 0,
         indent      => 0,
         FLAGS       => 0,
         fallback      => sub { encode_error('Invalid value. JSON can only reference.') },
         indent_length => 3,
     };
 
     bless $self, $class;
 }
 
 
 sub encode {
     return $_[0]->PP_encode_json($_[1]);
 }
 
 
 sub decode {
     return $_[0]->PP_decode_json($_[1], 0x00000000);
 }
 
 
 sub decode_prefix {
     return $_[0]->PP_decode_json($_[1], 0x00000001);
 }
 
 
 # accessor
 
 
 # pretty printing
 
 sub pretty {
     my ($self, $v) = @_;
     my $enable = defined $v ? $v : 1;
 
     if ($enable) { # indent_length(3) for JSON::XS compatibility
         $self->indent(1)->indent_length(3)->space_before(1)->space_after(1);
     }
     else {
         $self->indent(0)->space_before(0)->space_after(0);
     }
 
     $self;
 }
 
 # etc
 
 sub max_depth {
     my $max  = defined $_[1] ? $_[1] : 0x80000000;
     $_[0]->{max_depth} = $max;
     $_[0];
 }
 
 
 sub get_max_depth { $_[0]->{max_depth}; }
 
 
 sub max_size {
     my $max  = defined $_[1] ? $_[1] : 0;
     $_[0]->{max_size} = $max;
     $_[0];
 }
 
 
 sub get_max_size { $_[0]->{max_size}; }
 
 
 sub filter_json_object {
     $_[0]->{cb_object} = defined $_[1] ? $_[1] : 0;
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub filter_json_single_key_object {
     if (@_ > 1) {
         $_[0]->{cb_sk_object}->{$_[1]} = $_[2];
     }
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub indent_length {
     if (!defined $_[1] or $_[1] > 15 or $_[1] < 0) {
         Carp::carp "The acceptable range of indent_length() is 0 to 15.";
     }
     else {
         $_[0]->{indent_length} = $_[1];
     }
     $_[0];
 }
 
 sub get_indent_length {
     $_[0]->{indent_length};
 }
 
 sub sort_by {
     $_[0]->{sort_by} = defined $_[1] ? $_[1] : 1;
     $_[0];
 }
 
 sub allow_bigint {
     Carp::carp("allow_bigint() is obsoleted. use allow_bignum() insted.");
 }
 
 ###############################
 
 ###
 ### Perl => JSON
 ###
 
 
 { # Convert
 
     my $max_depth;
     my $indent;
     my $ascii;
     my $latin1;
     my $utf8;
     my $space_before;
     my $space_after;
     my $canonical;
     my $allow_blessed;
     my $convert_blessed;
 
     my $indent_length;
     my $escape_slash;
     my $bignum;
     my $as_nonblessed;
 
     my $depth;
     my $indent_count;
     my $keysort;
 
 
     sub PP_encode_json {
         my $self = shift;
         my $obj  = shift;
 
         $indent_count = 0;
         $depth        = 0;
 
         my $idx = $self->{PROPS};
 
         ($ascii, $latin1, $utf8, $indent, $canonical, $space_before, $space_after, $allow_blessed,
             $convert_blessed, $escape_slash, $bignum, $as_nonblessed)
          = @{$idx}[P_ASCII .. P_SPACE_AFTER, P_ALLOW_BLESSED, P_CONVERT_BLESSED,
                     P_ESCAPE_SLASH, P_ALLOW_BIGNUM, P_AS_NONBLESSED];
 
         ($max_depth, $indent_length) = @{$self}{qw/max_depth indent_length/};
 
         $keysort = $canonical ? sub { $a cmp $b } : undef;
 
         if ($self->{sort_by}) {
             $keysort = ref($self->{sort_by}) eq 'CODE' ? $self->{sort_by}
                      : $self->{sort_by} =~ /\D+/       ? $self->{sort_by}
                      : sub { $a cmp $b };
         }
 
         encode_error("hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this)")
              if(!ref $obj and !$idx->[ P_ALLOW_NONREF ]);
 
         my $str  = $self->object_to_json($obj);
 
         $str .= "\n" if ( $indent ); # JSON::XS 2.26 compatible
 
         unless ($ascii or $latin1 or $utf8) {
             utf8::upgrade($str);
         }
 
         if ($idx->[ P_SHRINK ]) {
             utf8::downgrade($str, 1);
         }
 
         return $str;
     }
 
 
     sub object_to_json {
         my ($self, $obj) = @_;
         my $type = ref($obj);
 
         if($type eq 'HASH'){
             return $self->hash_to_json($obj);
         }
         elsif($type eq 'ARRAY'){
             return $self->array_to_json($obj);
         }
         elsif ($type) { # blessed object?
             if (blessed($obj)) {
 
                 return $self->value_to_json($obj) if ( $obj->isa('JSON::PP::Boolean') );
 
                 if ( $convert_blessed and $obj->can('TO_JSON') ) {
                     my $result = $obj->TO_JSON();
                     if ( defined $result and ref( $result ) ) {
                         if ( refaddr( $obj ) eq refaddr( $result ) ) {
                             encode_error( sprintf(
                                 "%s::TO_JSON method returned same object as was passed instead of a new one",
                                 ref $obj
                             ) );
                         }
                     }
 
                     return $self->object_to_json( $result );
                 }
 
                 return "$obj" if ( $bignum and _is_bignum($obj) );
                 return $self->blessed_to_json($obj) if ($allow_blessed and $as_nonblessed); # will be removed.
 
                 encode_error( sprintf("encountered object '%s', but neither allow_blessed "
                     . "nor convert_blessed settings are enabled", $obj)
                 ) unless ($allow_blessed);
 
                 return 'null';
             }
             else {
                 return $self->value_to_json($obj);
             }
         }
         else{
             return $self->value_to_json($obj);
         }
     }
 
 
     sub hash_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
         my $del = ($space_before ? ' ' : '') . ':' . ($space_after ? ' ' : '');
 
         for my $k ( _sort( $obj ) ) {
             if ( OLD_PERL ) { utf8::decode($k) } # key for Perl 5.6 / be optimized
             push @res, string_to_json( $self, $k )
                           .  $del
                           . ( $self->object_to_json( $obj->{$k} ) || $self->value_to_json( $obj->{$k} ) );
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return   '{' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' )  . '}';
     }
 
 
     sub array_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
 
         for my $v (@$obj){
             push @res, $self->object_to_json($v) || $self->value_to_json($v);
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return '[' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' ) . ']';
     }
 
 
     sub value_to_json {
         my ($self, $value) = @_;
 
         return 'null' if(!defined $value);
 
         my $b_obj = B::svref_2object(\$value);  # for round trip problem
         my $flags = $b_obj->FLAGS;
 
         return $value # as is 
             if $flags & ( B::SVp_IOK | B::SVp_NOK ) and !( $flags & B::SVp_POK ); # SvTYPE is IV or NV?
 
         my $type = ref($value);
 
         if(!$type){
             return string_to_json($self, $value);
         }
         elsif( blessed($value) and  $value->isa('JSON::PP::Boolean') ){
             return $$value == 1 ? 'true' : 'false';
         }
         elsif ($type) {
             if ((overload::StrVal($value) =~ /=(\w+)/)[0]) {
                 return $self->value_to_json("$value");
             }
 
             if ($type eq 'SCALAR' and defined $$value) {
                 return   $$value eq '1' ? 'true'
                        : $$value eq '0' ? 'false'
                        : $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ? 'null'
                        : encode_error("cannot encode reference to scalar");
             }
 
              if ( $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ) {
                  return 'null';
              }
              else {
                  if ( $type eq 'SCALAR' or $type eq 'REF' ) {
                     encode_error("cannot encode reference to scalar");
                  }
                  else {
                     encode_error("encountered $value, but JSON can only represent references to arrays or hashes");
                  }
              }
 
         }
         else {
             return $self->{fallback}->($value)
                  if ($self->{fallback} and ref($self->{fallback}) eq 'CODE');
             return 'null';
         }
 
     }
 
 
     my %esc = (
         "\n" => '\n',
         "\r" => '\r',
         "\t" => '\t',
         "\f" => '\f',
         "\b" => '\b',
         "\"" => '\"',
         "\\" => '\\\\',
         "\'" => '\\\'',
     );
 
 
     sub string_to_json {
         my ($self, $arg) = @_;
 
         $arg =~ s/([\x22\x5c\n\r\t\f\b])/$esc{$1}/g;
         $arg =~ s/\//\\\//g if ($escape_slash);
         $arg =~ s/([\x00-\x08\x0b\x0e-\x1f])/'\\u00' . unpack('H2', $1)/eg;
 
         if ($ascii) {
             $arg = JSON_PP_encode_ascii($arg);
         }
 
         if ($latin1) {
             $arg = JSON_PP_encode_latin1($arg);
         }
 
         if ($utf8) {
             utf8::encode($arg);
         }
 
         return '"' . $arg . '"';
     }
 
 
     sub blessed_to_json {
         my $reftype = reftype($_[1]) || '';
         if ($reftype eq 'HASH') {
             return $_[0]->hash_to_json($_[1]);
         }
         elsif ($reftype eq 'ARRAY') {
             return $_[0]->array_to_json($_[1]);
         }
         else {
             return 'null';
         }
     }
 
 
     sub encode_error {
         my $error  = shift;
         Carp::croak "$error";
     }
 
 
     sub _sort {
         defined $keysort ? (sort $keysort (keys %{$_[0]})) : keys %{$_[0]};
     }
 
 
     sub _up_indent {
         my $self  = shift;
         my $space = ' ' x $indent_length;
 
         my ($pre,$post) = ('','');
 
         $post = "\n" . $space x $indent_count;
 
         $indent_count++;
 
         $pre = "\n" . $space x $indent_count;
 
         return ($pre,$post);
     }
 
 
     sub _down_indent { $indent_count--; }
 
 
     sub PP_encode_box {
         {
             depth        => $depth,
             indent_count => $indent_count,
         };
     }
 
 } # Convert
 
 
 sub _encode_ascii {
     join('',
         map {
             $_ <= 127 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_latin1 {
     join('',
         map {
             $_ <= 255 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_surrogates { # from perlunicode
     my $uni = $_[0] - 0x10000;
     return ($uni / 0x400 + 0xD800, $uni % 0x400 + 0xDC00);
 }
 
 
 sub _is_bignum {
     $_[0]->isa('Math::BigInt') or $_[0]->isa('Math::BigFloat');
 }
 
 
 
 #
 # JSON => Perl
 #
 
 my $max_intsize;
 
 BEGIN {
     my $checkint = 1111;
     for my $d (5..64) {
         $checkint .= 1;
         my $int   = eval qq| $checkint |;
         if ($int =~ /[eE]/) {
             $max_intsize = $d - 1;
             last;
         }
     }
 }
 
 { # PARSE 
 
     my %escapes = ( #  by Jeremy Muhlich <jmuhlich [at] bitflood.org>
         b    => "\x8",
         t    => "\x9",
         n    => "\xA",
         f    => "\xC",
         r    => "\xD",
         '\\' => '\\',
         '"'  => '"',
         '/'  => '/',
     );
 
     my $text; # json data
     my $at;   # offset
     my $ch;   # 1chracter
     my $len;  # text length (changed according to UTF8 or NON UTF8)
     # INTERNAL
     my $depth;          # nest counter
     my $encoding;       # json text encoding
     my $is_valid_utf8;  # temp variable
     my $utf8_len;       # utf8 byte length
     # FLAGS
     my $utf8;           # must be utf8
     my $max_depth;      # max nest nubmer of objects and arrays
     my $max_size;
     my $relaxed;
     my $cb_object;
     my $cb_sk_object;
 
     my $F_HOOK;
 
     my $allow_bigint;   # using Math::BigInt
     my $singlequote;    # loosely quoting
     my $loose;          # 
     my $allow_barekey;  # bareKey
 
     # $opt flag
     # 0x00000001 .... decode_prefix
     # 0x10000000 .... incr_parse
 
     sub PP_decode_json {
         my ($self, $opt); # $opt is an effective flag during this decode_json.
 
         ($self, $text, $opt) = @_;
 
         ($at, $ch, $depth) = (0, '', 0);
 
         if ( !defined $text or ref $text ) {
             decode_error("malformed JSON string, neither array, object, number, string or atom");
         }
 
         my $idx = $self->{PROPS};
 
         ($utf8, $relaxed, $loose, $allow_bigint, $allow_barekey, $singlequote)
             = @{$idx}[P_UTF8, P_RELAXED, P_LOOSE .. P_ALLOW_SINGLEQUOTE];
 
         if ( $utf8 ) {
             utf8::downgrade( $text, 1 ) or Carp::croak("Wide character in subroutine entry");
         }
         else {
             utf8::upgrade( $text );
             utf8::encode( $text );
         }
 
         $len = length $text;
 
         ($max_depth, $max_size, $cb_object, $cb_sk_object, $F_HOOK)
              = @{$self}{qw/max_depth  max_size cb_object cb_sk_object F_HOOK/};
 
         if ($max_size > 1) {
             use bytes;
             my $bytes = length $text;
             decode_error(
                 sprintf("attempted decode of JSON text of %s bytes size, but max_size is set to %s"
                     , $bytes, $max_size), 1
             ) if ($bytes > $max_size);
         }
 
         # Currently no effect
         # should use regexp
         my @octets = unpack('C4', $text);
         $encoding =   ( $octets[0] and  $octets[1]) ? 'UTF-8'
                     : (!$octets[0] and  $octets[1]) ? 'UTF-16BE'
                     : (!$octets[0] and !$octets[1]) ? 'UTF-32BE'
                     : ( $octets[2]                ) ? 'UTF-16LE'
                     : (!$octets[2]                ) ? 'UTF-32LE'
                     : 'unknown';
 
         white(); # remove head white space
 
         my $valid_start = defined $ch; # Is there a first character for JSON structure?
 
         my $result = value();
 
         return undef if ( !$result && ( $opt & 0x10000000 ) ); # for incr_parse
 
         decode_error("malformed JSON string, neither array, object, number, string or atom") unless $valid_start;
 
         if ( !$idx->[ P_ALLOW_NONREF ] and !ref $result ) {
                 decode_error(
                 'JSON text must be an object or array (but found number, string, true, false or null,'
                        . ' use allow_nonref to allow this)', 1);
         }
 
         Carp::croak('something wrong.') if $len < $at; # we won't arrive here.
 
         my $consumed = defined $ch ? $at - 1 : $at; # consumed JSON text length
 
         white(); # remove tail white space
 
         if ( $ch ) {
             return ( $result, $consumed ) if ($opt & 0x00000001); # all right if decode_prefix
             decode_error("garbage after JSON object");
         }
 
         ( $opt & 0x00000001 ) ? ( $result, $consumed ) : $result;
     }
 
 
     sub next_chr {
         return $ch = undef if($at >= $len);
         $ch = substr($text, $at++, 1);
     }
 
 
     sub value {
         white();
         return          if(!defined $ch);
         return object() if($ch eq '{');
         return array()  if($ch eq '[');
         return string() if($ch eq '"' or ($singlequote and $ch eq "'"));
         return number() if($ch =~ /[0-9]/ or $ch eq '-');
         return word();
     }
 
     sub string {
         my ($i, $s, $t, $u);
         my $utf16;
         my $is_utf8;
 
         ($is_valid_utf8, $utf8_len) = ('', 0);
 
         $s = ''; # basically UTF8 flag on
 
         if($ch eq '"' or ($singlequote and $ch eq "'")){
             my $boundChar = $ch;
 
             OUTER: while( defined(next_chr()) ){
 
                 if($ch eq $boundChar){
                     next_chr();
 
                     if ($utf16) {
                         decode_error("missing low surrogate character in surrogate pair");
                     }
 
                     utf8::decode($s) if($is_utf8);
 
                     return $s;
                 }
                 elsif($ch eq '\\'){
                     next_chr();
                     if(exists $escapes{$ch}){
                         $s .= $escapes{$ch};
                     }
                     elsif($ch eq 'u'){ # UNICODE handling
                         my $u = '';
 
                         for(1..4){
                             $ch = next_chr();
                             last OUTER if($ch !~ /[0-9a-fA-F]/);
                             $u .= $ch;
                         }
 
                         # U+D800 - U+DBFF
                         if ($u =~ /^[dD][89abAB][0-9a-fA-F]{2}/) { # UTF-16 high surrogate?
                             $utf16 = $u;
                         }
                         # U+DC00 - U+DFFF
                         elsif ($u =~ /^[dD][c-fC-F][0-9a-fA-F]{2}/) { # UTF-16 low surrogate?
                             unless (defined $utf16) {
                                 decode_error("missing high surrogate character in surrogate pair");
                             }
                             $is_utf8 = 1;
                             $s .= JSON_PP_decode_surrogates($utf16, $u) || next;
                             $utf16 = undef;
                         }
                         else {
                             if (defined $utf16) {
                                 decode_error("surrogate pair expected");
                             }
 
                             if ( ( my $hex = hex( $u ) ) > 127 ) {
                                 $is_utf8 = 1;
                                 $s .= JSON_PP_decode_unicode($u) || next;
                             }
                             else {
                                 $s .= chr $hex;
                             }
                         }
 
                     }
                     else{
                         unless ($loose) {
                             $at -= 2;
                             decode_error('illegal backslash escape sequence in string');
                         }
                         $s .= $ch;
                     }
                 }
                 else{
 
                     if ( ord $ch  > 127 ) {
                         unless( $ch = is_valid_utf8($ch) ) {
                             $at -= 1;
                             decode_error("malformed UTF-8 character in JSON string");
                         }
                         else {
                             $at += $utf8_len - 1;
                         }
 
                         $is_utf8 = 1;
                     }
 
                     if (!$loose) {
                         if ($ch =~ /[\x00-\x1f\x22\x5c]/)  { # '/' ok
                             $at--;
                             decode_error('invalid character encountered while parsing JSON string');
                         }
                     }
 
                     $s .= $ch;
                 }
             }
         }
 
         decode_error("unexpected end of string while parsing JSON string");
     }
 
 
     sub white {
         while( defined $ch  ){
             if($ch le ' '){
                 next_chr();
             }
             elsif($ch eq '/'){
                 next_chr();
                 if(defined $ch and $ch eq '/'){
                     1 while(defined(next_chr()) and $ch ne "\n" and $ch ne "\r");
                 }
                 elsif(defined $ch and $ch eq '*'){
                     next_chr();
                     while(1){
                         if(defined $ch){
                             if($ch eq '*'){
                                 if(defined(next_chr()) and $ch eq '/'){
                                     next_chr();
                                     last;
                                 }
                             }
                             else{
                                 next_chr();
                             }
                         }
                         else{
                             decode_error("Unterminated comment");
                         }
                     }
                     next;
                 }
                 else{
                     $at--;
                     decode_error("malformed JSON string, neither array, object, number, string or atom");
                 }
             }
             else{
                 if ($relaxed and $ch eq '#') { # correctly?
                     pos($text) = $at;
                     $text =~ /\G([^\n]*(?:\r\n|\r|\n|$))/g;
                     $at = pos($text);
                     next_chr;
                     next;
                 }
 
                 last;
             }
         }
     }
 
 
     sub array {
         my $a  = $_[0] || []; # you can use this code to use another array ref object.
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                     if (++$depth > $max_depth);
 
         next_chr();
         white();
 
         if(defined $ch and $ch eq ']'){
             --$depth;
             next_chr();
             return $a;
         }
         else {
             while(defined($ch)){
                 push @$a, value();
 
                 white();
 
                 if (!defined $ch) {
                     last;
                 }
 
                 if($ch eq ']'){
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq ']') {
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
             }
         }
 
         decode_error(", or ] expected while parsing array");
     }
 
 
     sub object {
         my $o = $_[0] || {}; # you can use this code to use another hash ref object.
         my $k;
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                 if (++$depth > $max_depth);
         next_chr();
         white();
 
         if(defined $ch and $ch eq '}'){
             --$depth;
             next_chr();
             if ($F_HOOK) {
                 return _json_object_hook($o);
             }
             return $o;
         }
         else {
             while (defined $ch) {
                 $k = ($allow_barekey and $ch ne '"' and $ch ne "'") ? bareKey() : string();
                 white();
 
                 if(!defined $ch or $ch ne ':'){
                     $at--;
                     decode_error("':' expected");
                 }
 
                 next_chr();
                 $o->{$k} = value();
                 white();
 
                 last if (!defined $ch);
 
                 if($ch eq '}'){
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq '}') {
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
             }
 
         }
 
         $at--;
         decode_error(", or } expected while parsing object/hash");
     }
 
 
     sub bareKey { # doesn't strictly follow Standard ECMA-262 3rd Edition
         my $key;
         while($ch =~ /[^\x00-\x23\x25-\x2F\x3A-\x40\x5B-\x5E\x60\x7B-\x7F]/){
             $key .= $ch;
             next_chr();
         }
         return $key;
     }
 
 
     sub word {
         my $word =  substr($text,$at-1,4);
 
         if($word eq 'true'){
             $at += 3;
             next_chr;
             return $JSON::PP::true;
         }
         elsif($word eq 'null'){
             $at += 3;
             next_chr;
             return undef;
         }
         elsif($word eq 'fals'){
             $at += 3;
             if(substr($text,$at,1) eq 'e'){
                 $at++;
                 next_chr;
                 return $JSON::PP::false;
             }
         }
 
         $at--; # for decode_error report
 
         decode_error("'null' expected")  if ($word =~ /^n/);
         decode_error("'true' expected")  if ($word =~ /^t/);
         decode_error("'false' expected") if ($word =~ /^f/);
         decode_error("malformed JSON string, neither array, object, number, string or atom");
     }
 
 
     sub number {
         my $n    = '';
         my $v;
 
         # According to RFC4627, hex or oct digts are invalid.
         if($ch eq '0'){
             my $peek = substr($text,$at,1);
             my $hex  = $peek =~ /[xX]/; # 0 or 1
 
             if($hex){
                 decode_error("malformed number (leading zero must not be followed by another digit)");
                 ($n) = ( substr($text, $at+1) =~ /^([0-9a-fA-F]+)/);
             }
             else{ # oct
                 ($n) = ( substr($text, $at) =~ /^([0-7]+)/);
                 if (defined $n and length $n > 1) {
                     decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
             }
 
             if(defined $n and length($n)){
                 if (!$hex and length($n) == 1) {
                    decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
                 $at += length($n) + $hex;
                 next_chr;
                 return $hex ? hex($n) : oct($n);
             }
         }
 
         if($ch eq '-'){
             $n = '-';
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after initial minus)");
             }
         }
 
         while(defined $ch and $ch =~ /\d/){
             $n .= $ch;
             next_chr;
         }
 
         if(defined $ch and $ch eq '.'){
             $n .= '.';
 
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after decimal point)");
             }
             else {
                 $n .= $ch;
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
         }
 
         if(defined $ch and ($ch eq 'e' or $ch eq 'E')){
             $n .= $ch;
             next_chr;
 
             if(defined($ch) and ($ch eq '+' or $ch eq '-')){
                 $n .= $ch;
                 next_chr;
                 if (!defined $ch or $ch =~ /\D/) {
                     decode_error("malformed number (no digits after exp sign)");
                 }
                 $n .= $ch;
             }
             elsif(defined($ch) and $ch =~ /\d/){
                 $n .= $ch;
             }
             else {
                 decode_error("malformed number (no digits after exp sign)");
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
 
         }
 
         $v .= $n;
 
         if ($v !~ /[.eE]/ and length $v > $max_intsize) {
             if ($allow_bigint) { # from Adam Sussman
                 require Math::BigInt;
                 return Math::BigInt->new($v);
             }
             else {
                 return "$v";
             }
         }
         elsif ($allow_bigint) {
             require Math::BigFloat;
             return Math::BigFloat->new($v);
         }
 
         return 0+$v;
     }
 
 
     sub is_valid_utf8 {
 
         $utf8_len = $_[0] =~ /[\x00-\x7F]/  ? 1
                   : $_[0] =~ /[\xC2-\xDF]/  ? 2
                   : $_[0] =~ /[\xE0-\xEF]/  ? 3
                   : $_[0] =~ /[\xF0-\xF4]/  ? 4
                   : 0
                   ;
 
         return unless $utf8_len;
 
         my $is_valid_utf8 = substr($text, $at - 1, $utf8_len);
 
         return ( $is_valid_utf8 =~ /^(?:
              [\x00-\x7F]
             |[\xC2-\xDF][\x80-\xBF]
             |[\xE0][\xA0-\xBF][\x80-\xBF]
             |[\xE1-\xEC][\x80-\xBF][\x80-\xBF]
             |[\xED][\x80-\x9F][\x80-\xBF]
             |[\xEE-\xEF][\x80-\xBF][\x80-\xBF]
             |[\xF0][\x90-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF4][\x80-\x8F][\x80-\xBF][\x80-\xBF]
         )$/x )  ? $is_valid_utf8 : '';
     }
 
 
     sub decode_error {
         my $error  = shift;
         my $no_rep = shift;
         my $str    = defined $text ? substr($text, $at) : '';
         my $mess   = '';
         my $type   = $] >= 5.008           ? 'U*'
                    : $] <  5.006           ? 'C*'
                    : utf8::is_utf8( $str ) ? 'U*' # 5.6
                    : 'C*'
                    ;
 
         for my $c ( unpack( $type, $str ) ) { # emulate pv_uni_display() ?
             $mess .=  $c == 0x07 ? '\a'
                     : $c == 0x09 ? '\t'
                     : $c == 0x0a ? '\n'
                     : $c == 0x0d ? '\r'
                     : $c == 0x0c ? '\f'
                     : $c <  0x20 ? sprintf('\x{%x}', $c)
                     : $c == 0x5c ? '\\\\'
                     : $c <  0x80 ? chr($c)
                     : sprintf('\x{%x}', $c)
                     ;
             if ( length $mess >= 20 ) {
                 $mess .= '...';
                 last;
             }
         }
 
         unless ( length $mess ) {
             $mess = '(end of string)';
         }
 
         Carp::croak (
             $no_rep ? "$error" : "$error, at character offset $at (before \"$mess\")"
         );
 
     }
 
 
     sub _json_object_hook {
         my $o    = $_[0];
         my @ks = keys %{$o};
 
         if ( $cb_sk_object and @ks == 1 and exists $cb_sk_object->{ $ks[0] } and ref $cb_sk_object->{ $ks[0] } ) {
             my @val = $cb_sk_object->{ $ks[0] }->( $o->{$ks[0]} );
             if (@val == 1) {
                 return $val[0];
             }
         }
 
         my @val = $cb_object->($o) if ($cb_object);
         if (@val == 0 or @val > 1) {
             return $o;
         }
         else {
             return $val[0];
         }
     }
 
 
     sub PP_decode_box {
         {
             text    => $text,
             at      => $at,
             ch      => $ch,
             len     => $len,
             depth   => $depth,
             encoding      => $encoding,
             is_valid_utf8 => $is_valid_utf8,
         };
     }
 
 } # PARSE
 
 
 sub _decode_surrogates { # from perlunicode
     my $uni = 0x10000 + (hex($_[0]) - 0xD800) * 0x400 + (hex($_[1]) - 0xDC00);
     my $un  = pack('U*', $uni);
     utf8::encode( $un );
     return $un;
 }
 
 
 sub _decode_unicode {
     my $un = pack('U', hex shift);
     utf8::encode( $un );
     return $un;
 }
 
 #
 # Setup for various Perl versions (the code from JSON::PP58)
 #
 
 BEGIN {
 
     unless ( defined &utf8::is_utf8 ) {
        require Encode;
        *utf8::is_utf8 = *Encode::is_utf8;
     }
 
     if ( $] >= 5.008 ) {
         *JSON::PP::JSON_PP_encode_ascii      = \&_encode_ascii;
         *JSON::PP::JSON_PP_encode_latin1     = \&_encode_latin1;
         *JSON::PP::JSON_PP_decode_surrogates = \&_decode_surrogates;
         *JSON::PP::JSON_PP_decode_unicode    = \&_decode_unicode;
     }
 
     if ($] >= 5.008 and $] < 5.008003) { # join() in 5.8.0 - 5.8.2 is broken.
         package JSON::PP;
         require subs;
         subs->import('join');
         eval q|
             sub join {
                 return '' if (@_ < 2);
                 my $j   = shift;
                 my $str = shift;
                 for (@_) { $str .= $j . $_; }
                 return $str;
             }
         |;
     }
 
 
     sub JSON::PP::incr_parse {
         local $Carp::CarpLevel = 1;
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_parse( @_ );
     }
 
 
     sub JSON::PP::incr_skip {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_skip;
     }
 
 
     sub JSON::PP::incr_reset {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_reset;
     }
 
     eval q{
         sub JSON::PP::incr_text : lvalue {
             $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new;
 
             if ( $_[0]->{_incr_parser}->{incr_parsing} ) {
                 Carp::croak("incr_text can not be called when the incremental parser already started parsing");
             }
             $_[0]->{_incr_parser}->{incr_text};
         }
     } if ( $] >= 5.006 );
 
 } # Setup for various Perl versions (the code from JSON::PP58)
 
 
 ###############################
 # Utilities
 #
 
 BEGIN {
     eval 'require Scalar::Util';
     unless($@){
         *JSON::PP::blessed = \&Scalar::Util::blessed;
         *JSON::PP::reftype = \&Scalar::Util::reftype;
         *JSON::PP::refaddr = \&Scalar::Util::refaddr;
     }
     else{ # This code is from Sclar::Util.
         # warn $@;
         eval 'sub UNIVERSAL::a_sub_not_likely_to_be_here { ref($_[0]) }';
         *JSON::PP::blessed = sub {
             local($@, $SIG{__DIE__}, $SIG{__WARN__});
             ref($_[0]) ? eval { $_[0]->a_sub_not_likely_to_be_here } : undef;
         };
         my %tmap = qw(
             B::NULL   SCALAR
             B::HV     HASH
             B::AV     ARRAY
             B::CV     CODE
             B::IO     IO
             B::GV     GLOB
             B::REGEXP REGEXP
         );
         *JSON::PP::reftype = sub {
             my $r = shift;
 
             return undef unless length(ref($r));
 
             my $t = ref(B::svref_2object($r));
 
             return
                 exists $tmap{$t} ? $tmap{$t}
               : length(ref($$r)) ? 'REF'
               :                    'SCALAR';
         };
         *JSON::PP::refaddr = sub {
           return undef unless length(ref($_[0]));
 
           my $addr;
           if(defined(my $pkg = blessed($_[0]))) {
             $addr .= bless $_[0], 'Scalar::Util::Fake';
             bless $_[0], $pkg;
           }
           else {
             $addr .= $_[0]
           }
 
           $addr =~ /0x(\w+)/;
           local $^W;
           #no warnings 'portable';
           hex($1);
         }
     }
 }
 
 
 # shamely copied and modified from JSON::XS code.
 
 $JSON::PP::true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
 $JSON::PP::false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
 
 sub is_bool { defined $_[0] and UNIVERSAL::isa($_[0], "JSON::PP::Boolean"); }
 
 sub true  { $JSON::PP::true  }
 sub false { $JSON::PP::false }
 sub null  { undef; }
 
 ###############################
 
 package JSON::PP::Boolean;
 
 use overload (
    "0+"     => sub { ${$_[0]} },
    "++"     => sub { $_[0] = ${$_[0]} + 1 },
    "--"     => sub { $_[0] = ${$_[0]} - 1 },
    fallback => 1,
 );
 
 
 ###############################
 
 package JSON::PP::IncrParser;
 
 use strict;
 
 use constant INCR_M_WS   => 0; # initial whitespace skipping
 use constant INCR_M_STR  => 1; # inside string
 use constant INCR_M_BS   => 2; # inside backslash
 use constant INCR_M_JSON => 3; # outside anything, count nesting
 use constant INCR_M_C0   => 4;
 use constant INCR_M_C1   => 5;
 
 $JSON::PP::IncrParser::VERSION = '1.01';
 
 my $unpack_format = $] < 5.006 ? 'C*' : 'U*';
 
 sub new {
     my ( $class ) = @_;
 
     bless {
         incr_nest    => 0,
         incr_text    => undef,
         incr_parsing => 0,
         incr_p       => 0,
     }, $class;
 }
 
 
 sub incr_parse {
     my ( $self, $coder, $text ) = @_;
 
     $self->{incr_text} = '' unless ( defined $self->{incr_text} );
 
     if ( defined $text ) {
         if ( utf8::is_utf8( $text ) and !utf8::is_utf8( $self->{incr_text} ) ) {
             utf8::upgrade( $self->{incr_text} ) ;
             utf8::decode( $self->{incr_text} ) ;
         }
         $self->{incr_text} .= $text;
     }
 
 
     my $max_size = $coder->get_max_size;
 
     if ( defined wantarray ) {
 
         $self->{incr_mode} = INCR_M_WS unless defined $self->{incr_mode};
 
         if ( wantarray ) {
             my @ret;
 
             $self->{incr_parsing} = 1;
 
             do {
                 push @ret, $self->_incr_parse( $coder, $self->{incr_text} );
 
                 unless ( !$self->{incr_nest} and $self->{incr_mode} == INCR_M_JSON ) {
                     $self->{incr_mode} = INCR_M_WS if $self->{incr_mode} != INCR_M_STR;
                 }
 
             } until ( length $self->{incr_text} >= $self->{incr_p} );
 
             $self->{incr_parsing} = 0;
 
             return @ret;
         }
         else { # in scalar context
             $self->{incr_parsing} = 1;
             my $obj = $self->_incr_parse( $coder, $self->{incr_text} );
             $self->{incr_parsing} = 0 if defined $obj; # pointed by Martin J. Evans
             return $obj ? $obj : undef; # $obj is an empty string, parsing was completed.
         }
 
     }
 
 }
 
 
 sub _incr_parse {
     my ( $self, $coder, $text, $skip ) = @_;
     my $p = $self->{incr_p};
     my $restore = $p;
 
     my @obj;
     my $len = length $text;
 
     if ( $self->{incr_mode} == INCR_M_WS ) {
         while ( $len > $p ) {
             my $s = substr( $text, $p, 1 );
             $p++ and next if ( 0x20 >= unpack($unpack_format, $s) );
             $self->{incr_mode} = INCR_M_JSON;
             last;
        }
     }
 
     while ( $len > $p ) {
         my $s = substr( $text, $p++, 1 );
 
         if ( $s eq '"' ) {
             if (substr( $text, $p - 2, 1 ) eq '\\' ) {
                 next;
             }
 
             if ( $self->{incr_mode} != INCR_M_STR  ) {
                 $self->{incr_mode} = INCR_M_STR;
             }
             else {
                 $self->{incr_mode} = INCR_M_JSON;
                 unless ( $self->{incr_nest} ) {
                     last;
                 }
             }
         }
 
         if ( $self->{incr_mode} == INCR_M_JSON ) {
 
             if ( $s eq '[' or $s eq '{' ) {
                 if ( ++$self->{incr_nest} > $coder->get_max_depth ) {
                     Carp::croak('json text or perl structure exceeds maximum nesting level (max_depth set too low?)');
                 }
             }
             elsif ( $s eq ']' or $s eq '}' ) {
                 last if ( --$self->{incr_nest} <= 0 );
             }
             elsif ( $s eq '#' ) {
                 while ( $len > $p ) {
                     last if substr( $text, $p++, 1 ) eq "\n";
                 }
             }
 
         }
 
     }
 
     $self->{incr_p} = $p;
 
     return if ( $self->{incr_mode} == INCR_M_STR and not $self->{incr_nest} );
     return if ( $self->{incr_mode} == INCR_M_JSON and $self->{incr_nest} > 0 );
 
     return '' unless ( length substr( $self->{incr_text}, 0, $p ) );
 
     local $Carp::CarpLevel = 2;
 
     $self->{incr_p} = $restore;
     $self->{incr_c} = $p;
 
     my ( $obj, $tail ) = $coder->PP_decode_json( substr( $self->{incr_text}, 0, $p ), 0x10000001 );
 
     $self->{incr_text} = substr( $self->{incr_text}, $p );
     $self->{incr_p} = 0;
 
     return $obj || '';
 }
 
 
 sub incr_text {
     if ( $_[0]->{incr_parsing} ) {
         Carp::croak("incr_text can not be called when the incremental parser already started parsing");
     }
     $_[0]->{incr_text};
 }
 
 
 sub incr_skip {
     my $self  = shift;
     $self->{incr_text} = substr( $self->{incr_text}, $self->{incr_c} );
     $self->{incr_p} = 0;
 }
 
 
 sub incr_reset {
     my $self = shift;
     $self->{incr_text}    = undef;
     $self->{incr_p}       = 0;
     $self->{incr_mode}    = 0;
     $self->{incr_nest}    = 0;
     $self->{incr_parsing} = 0;
 }
 
 ###############################
 
 
 1;

END_OF_FILE


# __MOBUNDLE_FILE__

      'JSON/PP/Boolean.pm' => <<'END_OF_FILE',
 =head1 NAME
 
 JSON::PP::Boolean - dummy module providing JSON::PP::Boolean
 
 =head1 SYNOPSIS
 
  # do not "use" yourself
 
 =head1 DESCRIPTION
 
 This module exists only to provide overload resolution for Storable and similar modules. See
 L<JSON::PP> for more info about this class.
 
 =cut
 
 use JSON::PP ();
 use strict;
 
 1;
 
 =head1 AUTHOR
 
 This idea is from L<JSON::XS::Boolean> written by Marc Lehmann <schmorp[at]schmorp.de>
 
 =cut
 

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo.pm' => <<'END_OF_FILE',
 package Mo;
 $VERSION=0.39;
 no warnings;my$M=__PACKAGE__.'::';*{$M.Object::new}=sub{my$c=shift;my$s=bless{@_},$c;my%n=%{$c.::.':E'};map{$s->{$_}=$n{$_}->()if!exists$s->{$_}}keys%n;$s};*{$M.import}=sub{import warnings;$^H|=1538;my($P,%e,%o)=caller.'::';shift;eval"no Mo::$_",&{$M.$_.::e}($P,\%e,\%o,\@_)for@_;return if$e{M};%e=(extends,sub{eval"no $_[0]()";@{$P.ISA}=$_[0]},has,sub{my$n=shift;my$m=sub{$#_?$_[0]{$n}=$_[1]:$_[0]{$n}};@_=(default,@_)if!($#_%2);$m=$o{$_}->($m,$n,@_)for sort keys%o;*{$P.$n}=$m},%e,);*{$P.$_}=$e{$_}for keys%e;@{$P.ISA}=$M.Object};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/coerce.pm' => <<'END_OF_FILE',
 package Mo::coerce;my$M="Mo::";
 $VERSION=0.39;
 *{$M.'coerce::e'}=sub{my($P,$e,$o)=@_;$o->{coerce}=sub{my($m,$n,%a)=@_;$a{coerce}or return$m;sub{$#_?$m->($_[0],$a{coerce}->($_[1])):$m->(@_)}};my$C=$e->{new}||*{$M.Object::new}{CODE};$e->{new}=sub{my$s=$C->(@_);$s->$_($s->{$_})for keys%$s;$s}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/default.pm' => <<'END_OF_FILE',
 package Mo::default;my$M="Mo::";
 $VERSION=0.39;
 *{$M.'default::e'}=sub{my($P,$e,$o)=@_;$o->{default}=sub{my($m,$n,%a)=@_;exists$a{default}or return$m;my($d,$r)=$a{default};my$g='HASH'eq($r=ref$d)?sub{+{%$d}}:'ARRAY'eq$r?sub{[@$d]}:'CODE'eq$r?$d:sub{$d};my$i=exists$a{lazy}?$a{lazy}:!${$P.':N'};$i or ${$P.':E'}{$n}=$g and return$m;sub{$#_?$m->(@_):!exists$_[0]{$n}?$_[0]{$n}=$g->(@_):$m->(@_)}}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Template/Perlish.pm' => <<'END_OF_FILE',
 package Template::Perlish;
 
 use 5.008_000;
 use warnings;
 use strict;
 use Carp;
 use English qw( -no_match_vars );
 use constant ERROR_CONTEXT => 3;
 { our $VERSION = '1.41_04'; }
 
 # Function-oriented interface
 sub import {
    my ($package, @list) = @_;
 
    for my $sub (@list) {
       croak "subroutine '$sub' not exportable"
         unless grep { $sub eq $_ } qw< crumble render traverse >;
 
       my $caller = caller();
 
       no strict 'refs';    ## no critic (ProhibitNoStrict)
       local $SIG{__WARN__} = \&Carp::carp;
       *{$caller . q<::> . $sub} = \&{$package . q<::> . $sub};
    } ## end for my $sub (@list)
 
    return;
 } ## end sub import
 
 sub render {
    my ($template, @rest) = @_;
    my ($variables, %params);
    if (@rest) {
       $variables = ref($rest[0]) ? shift(@rest) : {splice @rest, 0};
       %params = %{shift @rest} if @rest;
    }
    return __PACKAGE__->new(%params)->process($template, $variables);
 } ## end sub render
 
 # Object-oriented interface
 sub new {
    my ($package, @rest) = @_;
    my $self = bless {
       start     => '[%',
       stop      => '%]',
       utf8      => 1,
       variables => {},
      },
      $package;
    %{$self} = (%{$self}, @rest == 1 ? %{$rest[0]} : @rest);
    return $self;
 } ## end sub new
 
 sub process {
    my ($self, $template, $vars) = @_;
    return $self->evaluate($self->compile($template), $vars);
 }
 
 sub evaluate {
    my ($self, $compiled, $vars) = @_;
    $self->_compile_sub($compiled)
      unless exists $compiled->{sub};
    return $compiled->{sub}->($vars);
 } ## end sub evaluate
 
 sub compile {    ## no critic (RequireArgUnpacking)
    my ($self, undef, %args) = @_;
    my $outcome = $self->_compile_code_text($_[1]);
    return $outcome if $args{no_check};
    return $self->_compile_sub($outcome);
 } ## end sub compile
 
 sub compile_as_sub {    ## no critic (RequireArgUnpacking)
    my $self = shift;
    return $self->compile($_[0])->{'sub'};
 }
 
 sub _compile_code_text {
    my ($self, $template) = @_;
 
    my $starter = $self->{start};
    my $stopper = $self->{stop};
 
    my $compiled = "# line 1 'input'\n";
    $compiled .= "use utf8;\n\n" if $self->{utf8};
    $compiled .= "print {*STDOUT} '';\n\n";
    my $pos     = 0;
    my $line_no = 1;
    while ($pos < length $template) {
 
       # Find starter and emit all previous text as simple text
       my $start = index $template, $starter, $pos;
       last if $start < 0;
       my $chunk = substr $template, $pos, $start - $pos;
       $compiled .= _simple_text($chunk)
         if $start > $pos;
 
       # Update scanning variables. The line counter is advanced for
       # the chunk but not yet for the $starter, so that error reporting
       # for unmatched $starter will point to the correct line
       $pos = $start + length $starter;
       $line_no += ($chunk =~ tr/\n//);
 
       # Grab code
       my $stop = index $template, $stopper, $pos;
       if ($stop < 0) {    # no matching $stopper, bummer!
          my $section = _extract_section({template => $template}, $line_no);
          croak "unclosed starter '$starter' at line $line_no\n$section";
       }
       my $code = substr $template, $pos, $stop - $pos;
 
       # Now I can advance the line count considering the $starter too
       $line_no += ($starter =~ tr/\n//);
 
       if (length $code) {
          if (my $path = crumble($code)) {
             $compiled .= _variable($path);
          }
          elsif (my ($scalar) =
             $code =~ m{\A\s* (\$ [[:alpha:]_]\w*) \s*\z}mxs)
          {
             $compiled .=
               "\nprint {*STDOUT} $scalar; ### straight scalar\n\n";
          } ## end elsif (my ($scalar) = $code...)
          elsif (substr($code, 0, 1) eq q<=>) {
             $compiled .= "\n# line $line_no 'template<3,$line_no>'\n"
               . _expression(substr $code, 1);
          }
          else {
             $compiled .=
               "\n# line $line_no 'template<0,$line_no>'\n" . $code;
          }
       } ## end if (length $code)
 
       # Update scanning variables
       $pos = $stop + length $stopper;
       $line_no += (($code . $stopper) =~ tr/\n//);
 
    } ## end while ($pos < length $template)
 
    # put last part of input string as simple text
    $compiled .= _simple_text(substr($template, $pos || 0));
 
    return {
       template  => $template,
       code_text => $compiled,
    };
 } ## end sub _compile_code_text
 
 # The following function is long and complex because it deals with many
 # different cases. It is kept as-is to avoid too many calls to other
 # subroutines; for this reason, it's reasonably commented.
 sub traverse {  ## no critic (RequireArgUnpacking,ProhibitExcessComplexity)
 
    ## no critic (ProhibitDoubleSigils)
    my $iref         = ref($_[0]);
    my $ref_wanted   = ($iref eq 'SCALAR') || ($iref eq 'REF');
    my $ref_to_value = $ref_wanted ? shift : \shift;
    return ($ref_wanted ? $ref_to_value : $$ref_to_value) unless @_;
 
    my $path_input = shift;
    return ($ref_wanted ? undef : '') unless defined $path_input;
 
    my $crumbs;
    if (ref $path_input) {
       $crumbs = $path_input;
    }
    else {
       return ($ref_wanted ? $ref_to_value : $$ref_to_value)
         if defined($path_input) && !length($path_input);
       $crumbs = crumble($path_input);
    }
    return ($ref_wanted ? undef : '') unless defined $crumbs;
 
    # go down the rabbit hole
    for my $crumb (@$crumbs) {
 
       # $key is what we will look into $$ref_to_value. We don't use
       # $crumb directly as we might change $key in the loop, and we
       # don't want to spoil $crumbs
       my $key = $crumb;
 
       # $ref tells me how to look down into $$ref_to_value, i.e. as
       # an ARRAY or a HASH
       my $ref = ref $$ref_to_value;
 
       # if $ref is not true, we hit a wall. How we proceed depends on
       # whether we were asked to auto-vivify or not.
       if (!$ref) {
          return '' unless $ref_wanted;    # don't bother going on
 
          # auto-vivification requested! $key will tell us how to
          # proceed further, hopefully
          $ref = ref $key;
       } ## end if (!$ref)
 
       # if $key is a reference, it will tell us what's expected now
       if (my $key_ref = ref $key) {
 
          # if $key_ref is not the same as $ref there is a mismatch
          # between what's available ($ref) and what' expected ($key_ref)
          return $ref_wanted ? undef : '' if $key_ref ne $ref;
 
          # OK, data and expectations agree. Get the "real" key
          if ($key_ref eq 'ARRAY') {
             $key = $crumb->[0];    # it's an array, key is (only) element
          }
          elsif ($key_ref eq 'HASH') {
             ($key) = keys %$crumb;    # hash... key is (only) key
          }
       } ## end if (my $key_ref = ref ...)
 
       # if $ref is still not true at this point, we're doing
       # auto-vivification and we have a plain key. Some guessing
       # will be needed! Plain non-negative integers resolve to ARRAY,
       # otherwise we'll consider $key as a HASH key
       $ref ||= ($key =~ m{\A (?: 0 | [1-9]\d*) \z}mxs) ? 'ARRAY' : 'HASH';
 
       # time to actually do the next step
       if ($ref eq 'HASH') {
          $ref_to_value = \($$ref_to_value->{$key});
       }
       elsif ($ref eq 'ARRAY') {
          $ref_to_value = \($$ref_to_value->[$key]);
       }
       else {    # don't know what to do with other references!
          return $ref_wanted ? undef : '';
       }
    } ## end for my $crumb (@$crumbs)
 
    # normalize output, substitute undef with '' unless $ref_wanted
    return
        $ref_wanted             ? $ref_to_value
      : defined($$ref_to_value) ? $$ref_to_value
      :                           '';
 
    ## use critic
 } ## end sub traverse
 
 sub V  { return '' }
 sub A  { return }
 sub H  { return }
 sub HK { return }
 sub HV { return }
 
 sub _compile_sub {
    my ($self, $outcome) = @_;
 
    my @warnings;
    {
       my $utf8 = $self->{utf8} ? 1 : 0;
       local $SIG{__WARN__} = sub { push @warnings, @_ };
       my $code = <<"END_OF_CODE";
    sub {
       my \%variables = \%{\$self->{variables}};
       my \$V = \\\%variables; # generic kid, as before by default
 
       {
          my \$vars = shift || {};
          if (ref(\$vars) eq 'HASH') { # old case
             \%variables = (\%variables, \%\$vars);
          }
          else {
             \$V = \$vars;
             \%variables = (HASH => { \%variables }, REF => \$V);
          }
       }
 
       no warnings 'redefine';
       local *V  = sub {
          my \$path = scalar(\@_) ? shift : [];
          my \$input = scalar(\@_) ? shift : \$V;
          return traverse(\$input, \$path);
       };
       local *A  = sub {
          my \$path = scalar(\@_) ? shift : [];
          my \$input = scalar(\@_) ? shift : \$V;
          return \@{traverse(\$input, \$path) || []};
       };
       local *H  = sub {
          my \$path = scalar(\@_) ? shift : [];
          my \$input = scalar(\@_) ? shift : \$V;
          return \%{traverse(\$input, \$path) || {}};
       };
       local *HK = sub {
          my \$path = scalar(\@_) ? shift : [];
          my \$input = scalar(\@_) ? shift : \$V;
          return keys \%{traverse(\$input, \$path) || {}};
       };
       local *HV = sub {
          my \$path = scalar(\@_) ? shift : [];
          my \$input = scalar(\@_) ? shift : \$V;
          return values \%{traverse(\$input, \$path) || {}};
       };
       use warnings 'redefine';
 
       local *STDOUT;
       open STDOUT, '>', \\my \$buffer or croak "open(): \$OS_ERROR";
       binmode STDOUT, ':encoding(utf8)' if $utf8;
       my \$previous_selection = select(STDOUT);
       { # double closure to free "my" variables
          my (\$buffer, \$previous_selection); # hide external ones
          { # this enclusure allows using "my" again
 $outcome->{code_text}
          }
       }
       select(\$previous_selection);
       close STDOUT;
       if ($utf8) {
          require Encode;
          \$buffer = Encode::decode(utf8 => \$buffer);
       }
       return \$buffer;
    }
 END_OF_CODE
 
       # print {*STDOUT} $code; exit 0;
       $outcome->{sub} = eval $code;    ## no critic (ProhibitStringyEval)
       return $outcome if $outcome->{sub};
    }
 
    my $error = $EVAL_ERROR;
    my ($offset, $starter, $line_no) =
      $error =~ m{at[ ]'template<(\d+),(\d+)>'[ ]line[ ](\d+)}mxs;
    $line_no -= $offset;
    s{at[ ]'template<\d+,\d+>'[ ]line[ ](\d+)}
     {'at line ' . ($1 - $offset)}egmxs
      for @warnings, $error;
    if ($line_no == $starter) {
       s{,[ ]near[ ]"[#][ ]line.*?\n\s+}{, near "}gmxs
         for @warnings, $error;
    }
 
    my $section = _extract_section($outcome, $line_no);
    $error = join '', @warnings, $error, "\n", $section;
 
    croak $error;
 } ## end sub _compile_sub
 
 sub _extract_section {
    my ($hash, $line_no) = @_;
    $line_no--;    # for proper comparison with 0-based array
    my $start = $line_no - ERROR_CONTEXT;
    my $end   = $line_no + ERROR_CONTEXT;
 
    my @lines = split /\n/mxs, $hash->{template};
    $start = 0       if $start < 0;
    $end   = $#lines if $end > $#lines;
    my $n_chars = length($end + 1);
    return join '', map {
       sprintf "%s%${n_chars}d| %s\n",
         (($_ == $line_no) ? '>>' : '  '), ($_ + 1), $lines[$_];
    } $start .. $end;
 } ## end sub _extract_section
 
 sub _simple_text {
    my $text = shift;
 
    return "print {*STDOUT} '$text';\n\n" if $text !~ /[\n'\\]/mxs;
 
    $text =~ s/^/ /gmxs;    # indent, trick taken from diff -u
    return <<"END_OF_CHUNK";
 ### Verbatim text
 print {*STDOUT} do {
    my \$text = <<'END_OF_INDENTED_TEXT';
 $text
 END_OF_INDENTED_TEXT
    \$text =~ s/^ //gms;      # de-indent
    substr \$text, -1, 1, ''; # get rid of added newline
    \$text;
 };
 
 END_OF_CHUNK
 } ## end sub _simple_text
 
 sub crumble {
    my ($input) = @_;
    return unless defined $input;
 
    $input =~ s{\A\s+|\s+\z}{}gmxs;
    return [] unless length $input;
 
    my $sq    = qr{(?mxs: ' [^']* ' )}mxs;
    my $dq    = qr{(?mxs: " (?:[^\\"] | \\.)* " )}mxs;
    my $ud    = qr{(?mxs: \w+ )}mxs;
    my $chunk = qr{(?mxs: $sq | $dq | $ud)+}mxs;
 
    # save and reset current pos() on $input
    my $prepos = pos($input);
    pos($input) = undef;
 
    my @path;
    ## no critic (RegularExpressions::ProhibitCaptureWithoutTest)
    push @path, $1 while $input =~ m{\G [.]? ($chunk) }cgmxs;
    ## use critic
 
    # save and restore pos() on $input
    my $postpos = pos($input);
    pos($input) = $prepos;
 
    return unless defined $postpos;
    return if $postpos != length($input);
 
    # cleanup @path components
    for my $part (@path) {
       my @subparts;
       while ((pos($part) || 0) < length($part)) {
          if ($part =~ m{\G ($sq) }cgmxs) {
             push @subparts, substr $1, 1, length($1) - 2;
          }
          elsif ($part =~ m{\G ($dq) }cgmxs) {
             my $subpart = substr $1, 1, length($1) - 2;
             $subpart =~ s{\\(.)}{$1}gmxs;
             push @subparts, $subpart;
          }
          elsif ($part =~ m{\G ($ud) }cgmxs) {
             push @subparts, $1;
          }
          else {    # shouldn't happen ever
             return;
          }
       } ## end while ((pos($part) || 0) ...)
       $part = join '', @subparts;
    } ## end for my $part (@path)
 
    return \@path;
 } ## end sub crumble
 
 sub _variable {
    my $path = shift;
    my $DQ   = q<">;    # double quotes
    $path = join ', ', map { $DQ . quotemeta($_) . $DQ } @{$path};
 
    return <<"END_OF_CHUNK";
 ### Variable from the stash (\$V)
 print {*STDOUT} V([$path]);
 
 END_OF_CHUNK
 } ## end sub _variable
 
 sub _expression {
    my $expression = shift;
    return <<"END_OF_CHUNK";
 # Expression to be evaluated and printed out
 {
    my \$value = do {{
 $expression
    }};
    print {*STDOUT} \$value if defined \$value;
 }
 
 END_OF_CHUNK
 
 } ## end sub _expression
 
 1;

END_OF_FILE


# __MOBUNDLE_FILE__

      'YAML/Tiny.pm' => <<'END_OF_FILE',
 use 5.008001; # sane UTF-8 support
 use strict;
 use warnings;
 package YAML::Tiny; # git description: v1.68-2-gcc5324e
 # XXX-INGY is 5.8.1 too old/broken for utf8?
 # XXX-XDG Lancaster consensus was that it was sufficient until
 # proven otherwise
 
 our $VERSION = '1.69';
 
 #####################################################################
 # The YAML::Tiny API.
 #
 # These are the currently documented API functions/methods and
 # exports:
 
 use Exporter;
 our @ISA       = qw{ Exporter  };
 our @EXPORT    = qw{ Load Dump };
 our @EXPORT_OK = qw{ LoadFile DumpFile freeze thaw };
 
 ###
 # Functional/Export API:
 
 sub Dump {
     return YAML::Tiny->new(@_)->_dump_string;
 }
 
 # XXX-INGY Returning last document seems a bad behavior.
 # XXX-XDG I think first would seem more natural, but I don't know
 # that it's worth changing now
 sub Load {
     my $self = YAML::Tiny->_load_string(@_);
     if ( wantarray ) {
         return @$self;
     } else {
         # To match YAML.pm, return the last document
         return $self->[-1];
     }
 }
 
 # XXX-INGY Do we really need freeze and thaw?
 # XXX-XDG I don't think so.  I'd support deprecating them.
 BEGIN {
     *freeze = \&Dump;
     *thaw   = \&Load;
 }
 
 sub DumpFile {
     my $file = shift;
     return YAML::Tiny->new(@_)->_dump_file($file);
 }
 
 sub LoadFile {
     my $file = shift;
     my $self = YAML::Tiny->_load_file($file);
     if ( wantarray ) {
         return @$self;
     } else {
         # Return only the last document to match YAML.pm,
         return $self->[-1];
     }
 }
 
 
 ###
 # Object Oriented API:
 
 # Create an empty YAML::Tiny object
 # XXX-INGY Why do we use ARRAY object?
 # NOTE: I get it now, but I think it's confusing and not needed.
 # Will change it on a branch later, for review.
 #
 # XXX-XDG I don't support changing it yet.  It's a very well-documented
 # "API" of YAML::Tiny.  I'd support deprecating it, but Adam suggested
 # we not change it until YAML.pm's own OO API is established so that
 # users only have one API change to digest, not two
 sub new {
     my $class = shift;
     bless [ @_ ], $class;
 }
 
 # XXX-INGY It probably doesn't matter, and it's probably too late to
 # change, but 'read/write' are the wrong names. Read and Write
 # are actions that take data from storage to memory
 # characters/strings. These take the data to/from storage to native
 # Perl objects, which the terms dump and load are meant. As long as
 # this is a legacy quirk to YAML::Tiny it's ok, but I'd prefer not
 # to add new {read,write}_* methods to this API.
 
 sub read_string {
     my $self = shift;
     $self->_load_string(@_);
 }
 
 sub write_string {
     my $self = shift;
     $self->_dump_string(@_);
 }
 
 sub read {
     my $self = shift;
     $self->_load_file(@_);
 }
 
 sub write {
     my $self = shift;
     $self->_dump_file(@_);
 }
 
 
 
 
 #####################################################################
 # Constants
 
 # Printed form of the unprintable characters in the lowest range
 # of ASCII characters, listed by ASCII ordinal position.
 my @UNPRINTABLE = qw(
     0    x01  x02  x03  x04  x05  x06  a
     b    t    n    v    f    r    x0E  x0F
     x10  x11  x12  x13  x14  x15  x16  x17
     x18  x19  x1A  e    x1C  x1D  x1E  x1F
 );
 
 # Printable characters for escapes
 my %UNESCAPES = (
     0 => "\x00", z => "\x00", N    => "\x85",
     a => "\x07", b => "\x08", t    => "\x09",
     n => "\x0a", v => "\x0b", f    => "\x0c",
     r => "\x0d", e => "\x1b", '\\' => '\\',
 );
 
 # XXX-INGY
 # I(ngy) need to decide if these values should be quoted in
 # YAML::Tiny or not. Probably yes.
 
 # These 3 values have special meaning when unquoted and using the
 # default YAML schema. They need quotes if they are strings.
 my %QUOTE = map { $_ => 1 } qw{
     null true false
 };
 
 # The commented out form is simpler, but overloaded the Perl regex
 # engine due to recursion and backtracking problems on strings
 # larger than 32,000ish characters. Keep it for reference purposes.
 # qr/\"((?:\\.|[^\"])*)\"/
 my $re_capture_double_quoted = qr/\"([^\\"]*(?:\\.[^\\"]*)*)\"/;
 my $re_capture_single_quoted = qr/\'([^\']*(?:\'\'[^\']*)*)\'/;
 # unquoted re gets trailing space that needs to be stripped
 my $re_capture_unquoted_key  = qr/([^:]+(?::+\S(?:[^:]*|.*?(?=:)))*)(?=\s*\:(?:\s+|$))/;
 my $re_trailing_comment      = qr/(?:\s+\#.*)?/;
 my $re_key_value_separator   = qr/\s*:(?:\s+(?:\#.*)?|$)/;
 
 
 
 
 
 #####################################################################
 # YAML::Tiny Implementation.
 #
 # These are the private methods that do all the work. They may change
 # at any time.
 
 
 ###
 # Loader functions:
 
 # Create an object from a file
 sub _load_file {
     my $class = ref $_[0] ? ref shift : shift;
 
     # Check the file
     my $file = shift or $class->_error( 'You did not specify a file name' );
     $class->_error( "File '$file' does not exist" )
         unless -e $file;
     $class->_error( "'$file' is a directory, not a file" )
         unless -f _;
     $class->_error( "Insufficient permissions to read '$file'" )
         unless -r _;
 
     # Open unbuffered with strict UTF-8 decoding and no translation layers
     open( my $fh, "<:unix:encoding(UTF-8)", $file );
     unless ( $fh ) {
         $class->_error("Failed to open file '$file': $!");
     }
 
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         flock( $fh, Fcntl::LOCK_SH() )
             or warn "Couldn't lock '$file' for reading: $!";
     }
 
     # slurp the contents
     my $contents = eval {
         use warnings FATAL => 'utf8';
         local $/;
         <$fh>
     };
     if ( my $err = $@ ) {
         $class->_error("Error reading from file '$file': $err");
     }
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $class->_error("Failed to close file '$file': $!");
     }
 
     $class->_load_string( $contents );
 }
 
 # Create an object from a string
 sub _load_string {
     my $class  = ref $_[0] ? ref shift : shift;
     my $self   = bless [], $class;
     my $string = $_[0];
     eval {
         unless ( defined $string ) {
             die \"Did not provide a string to load";
         }
 
         # Check if Perl has it marked as characters, but it's internally
         # inconsistent.  E.g. maybe latin1 got read on a :utf8 layer
         if ( utf8::is_utf8($string) && ! utf8::valid($string) ) {
             die \<<'...';
 Read an invalid UTF-8 string (maybe mixed UTF-8 and 8-bit character set).
 Did you decode with lax ":utf8" instead of strict ":encoding(UTF-8)"?
 ...
         }
 
         # Ensure Unicode character semantics, even for 0x80-0xff
         utf8::upgrade($string);
 
         # Check for and strip any leading UTF-8 BOM
         $string =~ s/^\x{FEFF}//;
 
         # Check for some special cases
         return $self unless length $string;
 
         # Split the file into lines
         my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
                 split /(?:\015{1,2}\012|\015|\012)/, $string;
 
         # Strip the initial YAML header
         @lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;
 
         # A nibbling parser
         my $in_document = 0;
         while ( @lines ) {
             # Do we have a document header?
             if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
                 # Handle scalar documents
                 shift @lines;
                 if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
                     push @$self,
                         $self->_load_scalar( "$1", [ undef ], \@lines );
                     next;
                 }
                 $in_document = 1;
             }
 
             if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
                 # A naked document
                 push @$self, undef;
                 while ( @lines and $lines[0] !~ /^---/ ) {
                     shift @lines;
                 }
                 $in_document = 0;
 
             # XXX The final '-+$' is to look for -- which ends up being an
             # error later.
             } elsif ( ! $in_document && @$self ) {
                 # only the first document can be explicit
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             } elsif ( $lines[0] =~ /^\s*\-(?:\s|$|-+$)/ ) {
                 # An array at the root
                 my $document = [ ];
                 push @$self, $document;
                 $self->_load_array( $document, [ 0 ], \@lines );
 
             } elsif ( $lines[0] =~ /^(\s*)\S/ ) {
                 # A hash at the root
                 my $document = { };
                 push @$self, $document;
                 $self->_load_hash( $document, [ length($1) ], \@lines );
 
             } else {
                 # Shouldn't get here.  @lines have whitespace-only lines
                 # stripped, and previous match is a line with any
                 # non-whitespace.  So this clause should only be reachable via
                 # a perlbug where \s is not symmetric with \S
 
                 # uncoverable statement
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             }
         }
     };
     my $err = $@;
     if ( ref $err eq 'SCALAR' ) {
         $self->_error(${$err});
     } elsif ( $err ) {
         $self->_error($err);
     }
 
     return $self;
 }
 
 sub _unquote_single {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\'\'/\'/g;
     return $string;
 }
 
 sub _unquote_double {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\\"/"/g;
     $string =~
         s{\\([Nnever\\fartz0b]|x([0-9a-fA-F]{2}))}
          {(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}}gex;
     return $string;
 }
 
 # Load a YAML scalar string to the actual Perl scalar
 sub _load_scalar {
     my ($self, $string, $indent, $lines) = @_;
 
     # Trim trailing whitespace
     $string =~ s/\s*\z//;
 
     # Explitic null/undef
     return undef if $string eq '~';
 
     # Single quote
     if ( $string =~ /^$re_capture_single_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_single($1);
     }
 
     # Double quote.
     if ( $string =~ /^$re_capture_double_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_double($1);
     }
 
     # Special cases
     if ( $string =~ /^[\'\"!&]/ ) {
         die \"YAML::Tiny does not support a feature in line '$string'";
     }
     return {} if $string =~ /^{}(?:\s+\#.*)?\z/;
     return [] if $string =~ /^\[\](?:\s+\#.*)?\z/;
 
     # Regular unquoted string
     if ( $string !~ /^[>|]/ ) {
         die \"YAML::Tiny found illegal characters in plain scalar: '$string'"
             if $string =~ /^(?:-(?:\s|$)|[\@\%\`])/ or
                 $string =~ /:(?:\s|$)/;
         $string =~ s/\s+#.*\z//;
         return $string;
     }
 
     # Error
     die \"YAML::Tiny failed to find multi-line scalar content" unless @$lines;
 
     # Check the indent depth
     $lines->[0]   =~ /^(\s*)/;
     $indent->[-1] = length("$1");
     if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
         die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
     }
 
     # Pull the lines
     my @multiline = ();
     while ( @$lines ) {
         $lines->[0] =~ /^(\s*)/;
         last unless length($1) >= $indent->[-1];
         push @multiline, substr(shift(@$lines), length($1));
     }
 
     my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
     my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
     return join( $j, @multiline ) . $t;
 }
 
 # Load an array
 sub _load_array {
     my ($self, $array, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
             # Inline nested hash
             my $indent2 = length("$1");
             $lines->[0] =~ s/-/ /;
             push @$array, { };
             $self->_load_hash( $array->[-1], [ @$indent, $indent2 ], $lines );
 
         } elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
             shift @$lines;
             unless ( @$lines ) {
                 push @$array, undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)\-/ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] == $indent2 ) {
                     # Null array entry
                     push @$array, undef;
                 } else {
                     # Naked indenter
                     push @$array, [ ];
                     $self->_load_array(
                         $array->[-1], [ @$indent, $indent2 ], $lines
                     );
                 }
 
             } elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
                 push @$array, { };
                 $self->_load_hash(
                     $array->[-1], [ @$indent, length("$1") ], $lines
                 );
 
             } else {
                 die \"YAML::Tiny failed to classify line '$lines->[0]'";
             }
 
         } elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
             # Array entry with a value
             shift @$lines;
             push @$array, $self->_load_scalar(
                 "$2", [ @$indent, undef ], $lines
             );
 
         } elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
             # This is probably a structure like the following...
             # ---
             # foo:
             # - list
             # bar: value
             #
             # ... so lets return and let the hash parser handle it
             return 1;
 
         } else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
     }
 
     return 1;
 }
 
 # Load a hash
 sub _load_hash {
     my ($self, $hash, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         # Find the key
         my $key;
 
         # Quoted keys
         if ( $lines->[0] =~
             s/^\s*$re_capture_single_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_single($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_double_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_double($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_unquoted_key$re_key_value_separator//
         ) {
             $key = $1;
             $key =~ s/\s+$//;
         }
         elsif ( $lines->[0] =~ /^\s*\?/ ) {
             die \"YAML::Tiny does not support a feature in line '$lines->[0]'";
         }
         else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
 
         if ( exists $hash->{$key} ) {
             warn "YAML::Tiny found a duplicate key '$key' in line '$lines->[0]'";
         }
 
         # Do we have a value?
         if ( length $lines->[0] ) {
             # Yes
             $hash->{$key} = $self->_load_scalar(
                 shift(@$lines), [ @$indent, undef ], $lines
             );
         } else {
             # An indent
             shift @$lines;
             unless ( @$lines ) {
                 $hash->{$key} = undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)-/ ) {
                 $hash->{$key} = [];
                 $self->_load_array(
                     $hash->{$key}, [ @$indent, length($1) ], $lines
                 );
             } elsif ( $lines->[0] =~ /^(\s*)./ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] >= $indent2 ) {
                     # Null hash entry
                     $hash->{$key} = undef;
                 } else {
                     $hash->{$key} = {};
                     $self->_load_hash(
                         $hash->{$key}, [ @$indent, length($1) ], $lines
                     );
                 }
             }
         }
     }
 
     return 1;
 }
 
 
 ###
 # Dumper functions:
 
 # Save an object to a file
 sub _dump_file {
     my $self = shift;
 
     require Fcntl;
 
     # Check the file
     my $file = shift or $self->_error( 'You did not specify a file name' );
 
     my $fh;
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         # Open without truncation (truncate comes after lock)
         my $flags = Fcntl::O_WRONLY()|Fcntl::O_CREAT();
         sysopen( $fh, $file, $flags );
         unless ( $fh ) {
             $self->_error("Failed to open file '$file' for writing: $!");
         }
 
         # Use no translation and strict UTF-8
         binmode( $fh, ":raw:encoding(UTF-8)");
 
         flock( $fh, Fcntl::LOCK_EX() )
             or warn "Couldn't lock '$file' for reading: $!";
 
         # truncate and spew contents
         truncate $fh, 0;
         seek $fh, 0, 0;
     }
     else {
         open $fh, ">:unix:encoding(UTF-8)", $file;
     }
 
     # serialize and spew to the handle
     print {$fh} $self->_dump_string;
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $self->_error("Failed to close file '$file': $!");
     }
 
     return 1;
 }
 
 # Save an object to a string
 sub _dump_string {
     my $self = shift;
     return '' unless ref $self && @$self;
 
     # Iterate over the documents
     my $indent = 0;
     my @lines  = ();
 
     eval {
         foreach my $cursor ( @$self ) {
             push @lines, '---';
 
             # An empty document
             if ( ! defined $cursor ) {
                 # Do nothing
 
             # A scalar document
             } elsif ( ! ref $cursor ) {
                 $lines[-1] .= ' ' . $self->_dump_scalar( $cursor );
 
             # A list at the root
             } elsif ( ref $cursor eq 'ARRAY' ) {
                 unless ( @$cursor ) {
                     $lines[-1] .= ' []';
                     next;
                 }
                 push @lines, $self->_dump_array( $cursor, $indent, {} );
 
             # A hash at the root
             } elsif ( ref $cursor eq 'HASH' ) {
                 unless ( %$cursor ) {
                     $lines[-1] .= ' {}';
                     next;
                 }
                 push @lines, $self->_dump_hash( $cursor, $indent, {} );
 
             } else {
                 die \("Cannot serialize " . ref($cursor));
             }
         }
     };
     if ( ref $@ eq 'SCALAR' ) {
         $self->_error(${$@});
     } elsif ( $@ ) {
         $self->_error($@);
     }
 
     join '', map { "$_\n" } @lines;
 }
 
 sub _has_internal_string_value {
     my $value = shift;
     my $b_obj = B::svref_2object(\$value);  # for round trip problem
     return $b_obj->FLAGS & B::SVf_POK();
 }
 
 sub _dump_scalar {
     my $string = $_[1];
     my $is_key = $_[2];
     # Check this before checking length or it winds up looking like a string!
     my $has_string_flag = _has_internal_string_value($string);
     return '~'  unless defined $string;
     return "''" unless length  $string;
     if (Scalar::Util::looks_like_number($string)) {
         # keys and values that have been used as strings get quoted
         if ( $is_key || $has_string_flag ) {
             return qq['$string'];
         }
         else {
             return $string;
         }
     }
     if ( $string =~ /[\x00-\x09\x0b-\x0d\x0e-\x1f\x7f-\x9f\'\n]/ ) {
         $string =~ s/\\/\\\\/g;
         $string =~ s/"/\\"/g;
         $string =~ s/\n/\\n/g;
         $string =~ s/[\x85]/\\N/g;
         $string =~ s/([\x00-\x1f])/\\$UNPRINTABLE[ord($1)]/g;
         $string =~ s/([\x7f-\x9f])/'\x' . sprintf("%X",ord($1))/ge;
         return qq|"$string"|;
     }
     if ( $string =~ /(?:^[~!@#%&*|>?:,'"`{}\[\]]|^-+$|\s|:\z)/ or
         $QUOTE{$string}
     ) {
         return "'$string'";
     }
     return $string;
 }
 
 sub _dump_array {
     my ($self, $array, $indent, $seen) = @_;
     if ( $seen->{refaddr($array)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $el ( @$array ) {
         my $line = ('  ' x $indent) . '-';
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             die \"YAML::Tiny does not support $type references";
         }
     }
 
     @lines;
 }
 
 sub _dump_hash {
     my ($self, $hash, $indent, $seen) = @_;
     if ( $seen->{refaddr($hash)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $name ( sort keys %$hash ) {
         my $el   = $hash->{$name};
         my $line = ('  ' x $indent) . $self->_dump_scalar($name, 1) . ":";
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             die \"YAML::Tiny does not support $type references";
         }
     }
 
     @lines;
 }
 
 
 
 #####################################################################
 # DEPRECATED API methods:
 
 # Error storage (DEPRECATED as of 1.57)
 our $errstr    = '';
 
 # Set error
 sub _error {
     require Carp;
     $errstr = $_[1];
     $errstr =~ s/ at \S+ line \d+.*//;
     Carp::croak( $errstr );
 }
 
 # Retrieve error
 my $errstr_warned;
 sub errstr {
     require Carp;
     Carp::carp( "YAML::Tiny->errstr and \$YAML::Tiny::errstr is deprecated" )
         unless $errstr_warned++;
     $errstr;
 }
 
 
 
 
 #####################################################################
 # Helper functions. Possibly not needed.
 
 
 # Use to detect nv or iv
 use B;
 
 # XXX-INGY Is flock YAML::Tiny's responsibility?
 # Some platforms can't flock :-(
 # XXX-XDG I think it is.  When reading and writing files, we ought
 # to be locking whenever possible.  People (foolishly) use YAML
 # files for things like session storage, which has race issues.
 my $HAS_FLOCK;
 sub _can_flock {
     if ( defined $HAS_FLOCK ) {
         return $HAS_FLOCK;
     }
     else {
         require Config;
         my $c = \%Config::Config;
         $HAS_FLOCK = grep { $c->{$_} } qw/d_flock d_fcntl_can_lock d_lockf/;
         require Fcntl if $HAS_FLOCK;
         return $HAS_FLOCK;
     }
 }
 
 
 # XXX-INGY Is this core in 5.8.1? Can we remove this?
 # XXX-XDG Scalar::Util 1.18 didn't land until 5.8.8, so we need this
 #####################################################################
 # Use Scalar::Util if possible, otherwise emulate it
 
 use Scalar::Util ();
 BEGIN {
     local $@;
     if ( eval { Scalar::Util->VERSION(1.18); } ) {
         *refaddr = *Scalar::Util::refaddr;
     }
     else {
         eval <<'END_PERL';
 # Scalar::Util failed to load or too old
 sub refaddr {
     my $pkg = ref($_[0]) or return undef;
     if ( !! UNIVERSAL::can($_[0], 'can') ) {
         bless $_[0], 'Scalar::Util::Fake';
     } else {
         $pkg = undef;
     }
     "$_[0]" =~ /0x(\w+)/;
     my $i = do { no warnings 'portable'; hex $1 };
     bless $_[0], $pkg if defined $pkg;
     $i;
 }
 END_PERL
     }
 }
 
 delete $YAML::Tiny::{refaddr};
 
 1;
 
 # XXX-INGY Doc notes I'm putting up here. Changing the doc when it's wrong
 # but leaving grey area stuff up here.
 #
 # I would like to change Read/Write to Load/Dump below without
 # changing the actual API names.
 #
 # It might be better to put Load/Dump API in the SYNOPSIS instead of the
 # dubious OO API.
 #
 # null and bool explanations may be outdated.
 

END_OF_FILE


# __MOBUNDLE_FILE__
   );

   unshift @INC, sub {
      my ($me, $packfile) = @_;
      return unless exists $file_for{$packfile};
      (my $text = $file_for{$packfile}) =~ s/^\ //gmxs;
      chop($text); # added \n at the end
      open my $fh, '<', \$text or die "open(): $!\n";
      return $fh;
   };
} ## end BEGIN
# __MOBUNDLE_INCLUSION__

use Template::Perlish 1.41 qw< render >;
use Data::Crumbr;

my @YAML_MODULES = qw<
  YAML::XS
  YAML::Syck
  YAML::Tiny
>;
my @JSON_MODULES = qw<
  Cpanel::JSON::XS
  JSON::XS
  JSON::PP
>;

my %config = (
   'auto-key-prefix' => '_',
   'auto-key-suffix' => '_',
   binmode           => ':encoding(UTF-8)',
   'default-key'     => '_',
   define            => [],
   input             => [],
   output            => '-',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     auto-key|A!
     auto-key-prefix|P=s
     auto-key-suffix|S=s
     binmode|b=s
     default-key|K=s
     define|d=s@
     format|f=s
     function|F=s
     input|i=s@
     newline|n!
     no-input|N!
     output|o=s
     template|t=s
     text|T=s
     variable|v=s
     >,
     'immediate|I=s@' => sub { push @{$config{input}},          \$_[1]  },
     'json|jsn|j=s@'  => sub { push @{$config{input}}, [json =>  $_[1]] },
     'JSON|JSN|J=s@'  => sub { push @{$config{input}}, [json => \$_[1]] },
     'yaml|yml|y=s@'  => sub { push @{$config{input}}, [yaml =>  $_[1]] },
     'YAML|YML|Y=s@'  => sub { push @{$config{input}}, [yaml => \$_[1]] },
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

$config{newline} = 1
  if $ENV{TEEPEE_NEWLINE} && !defined $config{newline};

# Script implementation here
my ($vars, $has_auto_keys) = read_inputs(\%config);
my $template = read_template(\%config);
{
   no warnings 'once';
   my $crumbr = sub {
      my ($profile, $variables) = @_;
      $profile ||= 'URI';
      my @output;
      Data::Crumbr::crumbr(
         profile => $profile,
         encoder => {output => \*STDOUT},
      )->($variables || $vars);
   };
   my $ic = sub {
      return $_[0] if @_;
      return $vars unless $has_auto_keys;

      # shallow copy will suffice here
      my %retval = %$vars;
      delete $retval{$config{'default-key'}};
      return \%retval;
   };
   *Template::Perlish::crumbr_as    = $crumbr;
   *Template::Perlish::crumbr       = sub { $crumbr->('URI', @_) };
   *Template::Perlish::uri_crumbr   = sub { $crumbr->('URI', @_) };
   *Template::Perlish::exact_crumbr = sub { $crumbr->('Default', @_) };
   *Template::Perlish::json_crumbr  = sub { $crumbr->('JSON', @_) };
   *Template::Perlish::JSON         = sub { JSON($ic->(@_)) };
   *Template::Perlish::YAML         = sub { YAML($ic->(@_)) };
}
my $ofh = get_output_fh($config{output}, $config{binmode});
my $output = render($template, $vars);
print {$ofh} $output if defined $output;
print {$ofh} "\n"    if $config{newline};

sub get_output_fh {
   my ($filename, $binmode) = @_;

   my $fh = \*STDOUT;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '>', $filename
        or die "output open('$filename'): $OS_ERROR\n";
   }

   $binmode = ':raw' if $binmode eq '';
   binmode $fh, $binmode;

   return $fh;
} ## end sub get_output_fh

sub read_template {
   my $cfg = shift;

   $cfg->{text} = "[%= $cfg->{function} %]"
     if exists $cfg->{function};
   $cfg->{text} = "[% $cfg->{variable} %]"
     if exists $cfg->{variable};
   return octets_to_characters(slurp_octets($cfg->{template}))
     unless exists $cfg->{text};

   require I18N::Langinfo;
   require Encode;
   my $codeset = I18N::Langinfo::langinfo(I18N::Langinfo::CODESET());
   return Encode::decode($codeset, $cfg->{text});
} ## end sub read_template

sub read_inputs {
   my $cfg = shift;
   my ($retval, $retvalref);

   my @inputs = @{$cfg->{input}};
   @inputs = '-' if (! scalar(@inputs)) && (! $cfg->{'no-input'});
   my $counter = 0;
   for my $input (@inputs) {
      my ($format, $filename) = (ref($input) eq 'ARRAY')
         ? @$input : (undef, $input);
      my $data = read_input($filename, $format || $cfg->{format});
      if ($cfg->{'auto-key'}) {
         my $prefix = $cfg->{'auto-key-prefix'};
         my $suffix = $cfg->{'auto-key-suffix'};
         $retval->{"$prefix$counter$suffix"} = $data;
         $retval->{$cfg->{'default-key'}} = $data;
         ++$counter;
         $retvalref = 'HASH';
      }
      elsif (! defined $retval) {
         $retval = $data;
         $retvalref = ref $retval;
      }
      elsif ((ref($data) eq 'HASH') && ($retvalref eq 'HASH')){
         %$retval = (%$retval, %$data);
      }
      else {
         pod2usage(
            message => 'only one single input with ARRAY, or use auto-key',
            -verbose => 99, -sections => 'USAGE');
      } ## end else [ if ((ref($data) eq 'HASH'...))]
   } ## end for my $filename (@inputs)

   for my $item (@{$cfg->{define}}) {
      my ($key, $value) = ref($item) ? @$item : split /=/, $item, 2;
      my $path = Template::Perlish::crumble($key);
      my $pointer = Template::Perlish::traverse(\$retval, $key)
       or pod2usage(
         message => "invalid definition key <$key>",
         -verbose => 99, -sections => 'USAGE');
      $$pointer = $value;
   }

   return ($retval, $counter);
} ## end sub read_inputs

sub read_input {
   my ($filename, $format) = @_;
   my $octets = slurp_octets($filename);
   $format ||= detect_format($filename, $octets);
   die "undefined input format\n" unless defined $format;
   my $function = {
      yaml => \&read_input_yaml,
      yml  => \&read_input_yaml,
      json => \&read_input_json,
      jsn  => \&read_input_json,
   }->{lc($format)};
   die "cannot read input format $format\n" unless defined $function;
   return $function->($octets);
} ## end sub read_input

sub octets_to_characters {
   require Encode;
   return Encode::decode('UTF-8', $_[0]);
}

sub slurp_octets {
   my ($filename) = @_;
   die "undefined filename\n" unless defined $filename;
   my $fh = \*STDIN;
   if ($filename ne '-') {
      $fh = undef;
      open $fh, '<', $filename
        or die "input open('$filename'): $OS_ERROR\n";
   }
   binmode $fh, ':raw';
   local $/;
   return <$fh>;
} ## end sub slurp_octets

sub load_any {
   for my $candidate (@_) {
      (my $path = "$candidate.pm") =~ s{(?: :: | ')}{/}gmxs;
      eval { require $path; 1 } and return $candidate;
   }
   die "$EVAL_ERROR\n";
} ## end sub load_any

sub read_input_yaml {
   my $module = load_any(@YAML_MODULES);

   if ($module eq 'YAML::Tiny') {

      # octets are needed here...
      return YAML::Tiny::Load(octets_to_characters($_[0]));

   } ## end if ($module eq 'YAML::Tiny')
   elsif ($module eq 'YAML::Syck') {

      # YAML::Syck::Load seems to cope with octets and characters
      # we'll use octets here. Anyway, we want characters back.
      local $YAML::Syck::ImplicitUnicode;
      $YAML::Syck::ImplicitUnicode = 1;
      return YAML::Syck::Load($_[0]);

   } ## end elsif ($module eq 'YAML::Syck')
   else {

      # assuming we just needs calling Load() here
      return $module->can('Load')->($_[0]);

   } ## end else [ if ($module eq 'YAML::Tiny')]
} ## end sub read_input_yaml

sub read_input_json {
   my $module = load_any(@JSON_MODULES);
   return $module->can('decode_json')->($_[0]);
}

sub detect_format {
   my $filename = shift;
   return 'yaml' if $filename =~ m{\. ya?ml \z}imxs;
   return 'json' if $filename =~ m{\. jso?n \z}imxs;

   # try with content
   return 'json' if $_[0] =~ m/\A\s*[\{\[]/mxs;
   return 'yaml' if $_[0] =~ m{\A---}mxs;

   # bail out
   die "cannot infer format for file '$filename'\n";
} ## end sub detect_format

sub JSON {
   my $module = load_any(@JSON_MODULES);
   return $module->new()->pretty()->encode(shift);
}

sub YAML {
   require Storable;
   my $ref    = cleanup(Storable::dclone(shift));
   my $module = load_any(@YAML_MODULES);
   if ($module eq 'YAML::Tiny') {
      return YAML::Tiny::Dump($ref);
   }
   elsif ($module eq 'YAML::Syck') {
      local $YAML::Syck::ImplicitUnicode;
      $YAML::Syck::ImplicitUnicode = 1;
      return YAML::Syck::Dump($ref);
   }
   else {
      return octets_to_characters($module->can('Dump')->($ref));
   }
} ## end sub YAML

sub isa_any {
   my ($object, @candidates) = @_;
   for my $candidate (@candidates) {
      return 1 if $object->isa($candidate);
   }
   return;
} ## end sub isa_any

sub cleanup {
   my $ref = shift;
   _traverse(
      $ref,
      {},
      sub {
         return unless blessed $_[0];
         if (
            isa_any(
               $_[0], qw<
                 Cpanel::JSON::XS::Boolean
                 JSON::XS::Boolean
                 JSON::PP::Boolean
                 >
            )
           )
         {
            $_[0] = $_[0] ? 'true' : 'false';
         } ## end if (isa_any($_[0], qw<...))
         else {
            $_[0] = "$_[0]";
         }
      }
   );
   return $ref;
} ## end sub cleanup

sub _traverse {
   my ($ref, $track, $action) = @_;
   my $type = ref($ref) or return;
   my $refaddr = refaddr($ref);
   die "circular structure not allowed\n"
     if $track->{$refaddr}++;
   if ($type eq 'HASH') {
      for my $v (values %$ref) {
         $action->($v);
         _traverse($v, $track, $action);
      }
   } ## end if ($type eq 'HASH')
   elsif ($type eq 'ARRAY') {
      for my $v (@$ref) {
         $action->($v);
         _traverse($v, $track, $action);
      }
   } ## end elsif ($type eq 'ARRAY')
   $track->{$refaddr}--; # allow acyclic directed graphs
   return;
} ## end sub _traverse

__END__

=encoding UTF-8

=head1 NAME

teepee - extract data from structures

=head1 HURRY UP!

Get the bundled version like this:

   curl -LO https://github.com/polettix/teepee/raw/master/bundle/teepee

or this

   wget https://github.com/polettix/teepee/raw/master/bundle/teepee

or just click here: L<https://github.com/polettix/teepee/raw/master/bundle/teepee>

=head1 USAGE

   teepee [--usage] [--help] [--man] [--version]

   teepee [-A|--auto-key]
          [-P|--auto-key-prefix string]
          [-S|--auto-key-suffix string]
          [-b|--binmode setting]
          [-K|--default-key string]
          [-d|--define key=value]
          [-f|--format input-format]
          [-F|--function spec]
          [-I|--immediate text]
          [-i|--input filename]
          [-j|--jsn|--json filename]
          [-J|--JSN|--JSON text]
          [-n|--newline|--no-newline]
          [-N|--no-input]
          [-o|--output filename]
          [-t|--template filename]
          [-T|--text string]
          [-v|--variable string]
          [-y|--yml|--yaml filename]
          [-Y|--YML|--YAML text]

=head1 EXAMPLES

   shell$ teepee -i data.yml -t template.file -o generated
   
   shell$ teepee -i data.json -T 'hello [% customer.name %]'


=head1 DESCRIPTION

C<teepee> allows you to generate data according to a template. Data is
extracted from data structures available in JSON or YAML format, read
from files or from standard input. This should make it easy to extract
the needed data e.g. out of the output from some tool that provides you
structured JSON or YAML text in output.

=head2 Options Overview

Input data structures can be provided via option L<-i | --input>. You
can provide more than one input; in this case, they will be read in
order and merged together. Merging in this case means that whatever is
present in a file provided later in the command line supersedes
whatevever was previously available. If you set the input filename as
C<->, the input will be read from standard input.

You can provide input definitions from the command line too, via option
L</--define>. In this case, you can provide the "path" into the
data structure separating items with a dot C<.>. Any key part that
resembles an integer index starting from 0 will be interpreted as an
array index, otherwise it will be considered a hash key. Definitions
with this options always supersede those read from input files.

The input format can be either specified explicitly via option
L</--format> or deduced implicitly. The heuristic will first check the
file name, then the contents. Suggestion is to specify it if you happen
to know, expecially for programmatic usage.

The template to be expanded can be provided either from a file (via
option L</--template>) or from the command-line directly (via option
L</--text>). Templates can be written according to what
L<Template::Perlish> provides. As quick, specialized alternatives to
L</--text>, you can also use L</--function> and L</--variable>.

All files are supposed to be UTF-8 encoded. When the template is
provided from the command line, module L<I18N::Langinfo> is used to
auto-detect the terminal setting and try to do the right things. If in
doubt, just use a UTF-8 encoded file for your template.

Output is sent to either standard output (by default or if you set the
filename to C<->) or to the filename specified via option C</--output>.
Output will be printed assuming that the receiving end is UTF-8 capable.

=head2 Reading Inputs

It's worth noting that input data might come into three forms,
independently of the input format: I<hash> (i.e. I<object> in JSON),
I<array> or I<scalar>. Whatever the input, a big I<hash>/I<object> is
built and eventually consumed by the templates; every time the top-level
element in the input is not a I<hash>, the following applies:
applies:

=over

=item *

a (hopefully) unique key is generated joining L</--auto-key-prefix>, an
increasing integer number starting from C<0>, and L<--auto-key-suffix>.
The value is associated to this key in the top level hash.

=item *

the last value read in this way is always associated to key
L</--default-key>.

=back

By default, the three options are set to the string C<_> (one single
underscore).

For example, if you have two input files with two arrays inside:

   # first input, JSON format
   [ "one", "two", "three" ]

   # second input, JSON format
   [ 1, 2, 3 ]

the resulting overall hash read will be the following when the two
inputs are read in the order above:

   {
      _0_ => [ 'one', 'two', 'three' ],
      _1_ => [ 1, 2, 3 ],
      _   => [ 1, 2, 3 ],
   }

You can change the different options to be able to mix the input arrays
with hashes and preserve key uniqueness.

If you specify input option L<--auto-key>, the above algorithm will
always be applied, also for hash inputs. This allows you get input from
multiple sources without the risk of having keys trump on each other
(which might be or not what you want).


=head2 Writing Templates

Templates for extracting data are written according to what
Template::Perlish provides. You should take a look at its documentation
at L<https://metacpan.org/pod/Template::Perlish>. Only a few tricks will
be reported here, just to get your feet wet.


We will suppose to have the following data, represented as YAML:

   ---
   key1: value1
   key2: value2
   array:
      - first
      - second
      - third
      -
         k1: v1
         k2: v2
   hash:
      one: two
      three: four
      five:
         - a
         - b
         - 'see...'
      'complex key': whatever

Values that are neither hashes/objects nor arrays will be called
I<scalars>.

So, we have a hash at the top level, with four keys (C<key1>, C<key2>,
C<array> and C<hash>), two of which are scalars, one is an array and one
is a hash. The array contains four items, the last of which is a hash
with two keys (C<k1> and C<k2>). The hash contains three keys, the first
two (C<one> and C<three>) associated to a scalar value, the last one
being an array with three strings inside.

If you want to just access scalar variable pointed by key C<three>
inside C<hash>, it is sufficient to provide the I<path> to that value as
a sequence of keys starting from the top level and separated by a dot,
like this:

   [% hash.three %]

If you want to access an array's element, the trick is similar but you
will have to use the index (starting from 0) instead of the key. So, for
example, the C<b> in the second array would be accessed like this:

   [% hash.five.1 %]

and the C<v1> like this:

   [% array.3.k1 %]

Please note that, by default, the keys that you can concatenate can only
contain alphanumeric values, plus the underscore. What if you want to
access C<whatever> then? You can insert non-alphanumeric characters
using quotes, like this:

   [% hash.'complex key' %]

As you can imagine, there are ways to also cope with keys that have
quotes inside, so refer to Template::Perlish if you need to know more.

Besides just accessing scalar values, you might want to add some logic
to your templates. You can do this by simply writing Perl code, because
whatever is not recognised as a valid I<path of keys> is considered Perl
code and evaluated accordingly:

   current time: [% print scalar localtime() %]

There is even a shortcut to just print the output of an expression, so
the above example can be written like this:

   current time: [%= scalar localtime() %]

(note that there is an equal sign just after the template opening).

When you are writing Perl code, you can access the data structure
through the hash variable C<%variables>, so the following are
equivalent:

   [% hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]

but of course you can do fancier things with the second one, like this:

   uppercase: [%= uc $variables{hash}{'complex key'} %]

Accessing variables like this can be boring if you have a deeply nested
data structure, because it's a lot of typing and a lot of curly
brackets. To save typing and time, you can use the shortcut function
C<V>, so the following are equivalent:

   [%  hash.'complex key' %]
   [%= $variables{hash}{'complex key'} %]
   [%= V("hash.'complex key'") %]

As you are probably guessing, C<V> uses the same algorithm as just
putting a plain sequence of path elements, including its restrictions on
non-alphanumeric characters. This is considered a feature, because it
adds consistency.

Just like you can access any variable with C<V>, you also have a few
additional functions at your disposal for some common tasks. For
example, sometimes you will want to iterate over an array and find just
those elements that have some characteristics, e.g. restricting only to
elements that are hashes containing the C<k1> key. The long version is
this, of course:

   [%
      for my $item (@{$variables{array}}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

You can use the C<V> shortcut, of course:

   [%
      for my $item (@{V('array')}) {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

although in this case you would probably use C<A> instead:

   [%
      for my $item (A 'array') {
         next unless ref($item) eq 'HASH';
         next unless exists $item->{k1};
         print $item->{k1};
         last;
      }
   %]

This takes the element at path C<array> from C<%variables>, expands it
as an array and... well, what you do with it is completely up to you, of
course.

=head2 Pretty Printing

Sometimes, especially in an interactive session, you might just want to
take a look at the data structure you have to traverse; this is where
I<pretty-printing> comes handy.

YAML is already quite readable by its own, so chances are that you might
want to have some pretty-printing when your data is represented in
campact JSON format.

There are two functions for pretty-printing: L</YAML> and L</JSON>. As
you might have guessed, they print out the input data structure
respectively as YAML and JSON (so they can also be used to transform one
into the other, of course). It suffices to use the C</-F> option to get
their services:

   # pretty-print JSON as JSON
   $ teepee -FJSON <input.json

   # just dump as YAML
   $ teepee -FYAML <input.whatever

Note that if your input is not an hash, or you are using L</--auto-key>,
your data structure will contain multiple references to the same
objects, which by default is considered a I<circular data reference>.
C<teepee> solves this problem by eliminating the L</--default-key> from
the input hash before doing the pretty-printing.

This will anyway give you something that is different from the real
input data, because of the embedding into the top-level hash.  If you
just want the original data, you can do as follows (this will work only
for the last read input data of course):

   # pretty-print JSON as JSON
   $ teepee -F'JSON(V("_"))' <input.json

   # just dump as YAML
   $ teepee -F'YAML(V("_"))' <input.whatever

This isolates the last read input with an auto-generated key (with
C<V("_")>) and pretty-prints that (passing to the relevant function,
i.e. either C<JSON> or C<YAML>).

=head2 Feeling Better With C<grep>?

If you're not very comfortable with Perl... you should. There are a lot
of very good resources out there to learn it, the most outstanding
and readily available example is probably Modern Perl
(L<http://onyxneon.com/books/modern_perl/index.html>, look for both the
printed and online version).

Anyway, if you're in a hurry and you prefer to use C<grep>/C<sed> and
all other classical Unix tools, you can turn on I<crumbr> mode and play
with its output.

To understand what crumbr does, let's start from an example, i.e. let's
see what this does when applied to the example data structure described
in L</Writing Templates>. The template is quite straightforward in this
case:

   $ teepee -T '[%= crumbr(); %]' -i data.yml

and the output is the following:

   array/0 "first"
   array/1 "second"
   array/2 "third"
   array/3/k1 "v1"
   array/3/k2 "v2"
   hash/complex%20key "whatever"
   hash/five/0 "a"
   hash/five/1 "b"
   hash/five/2 "see..."
   hash/one "two"
   hash/three "four"
   key1 "value1"
   key2 "value2"

Every leaf node is represented on a single line of its own. Each line
contains a URI-shaped path, a space, and a JSON-encoded representation
of the value. Hash keys are sorted lexicographically, array keys are
sorted numerically.

So, are we still looking at the values pointed by key C<k1> inside any
hash under the top-level array? This is how you do it:

   $ teepee -T '[%= crumbr(); %]' -i data.yml \
     | grep '^array/[0-9][0-9]*/k1 '

You get the idea. Typing (or even remembering) that template might be
cumbersome, which is why there is a shorthand option L</-F> that lets
you just write this instead:

   $ teepee -Fcrumbr -i data.yml | grep '^array/[0-9][0-9]*/k1'

See L</--function>/L</-F> for the available functions in addition to
C<crumbr>. We will use this short form from now on.

Why the JSON encoding in the output? Aren't those double quotes
annoying? The answer is probably yes, but they are also needed. In fact,
there are a few cases where you will I<not> see them, namely:

=over

=item * B<< empty arrays >>

are represented as C<[]>, without quotes

=item * B<< empty hashes >>

are represented as C<{}>, without quotes

=item * B<< null/undefined values >>

are represented as I<null>, without quotes (as opposed to
the string I<"null">, that has the quotes).

=back

Example:

   $ cat sample.yaml
   ---
   'plain-value': ciao
   'null-value': ~
   'empty-array': []
   'empty-hash': {}

   $ teepee -Fcrumbr <sample.yaml
   empty-array []
   empty-hash {}
   null-value null
   plain-value "ciao"

You have probably noticed that this does not allow you to clearly
distinguish between hash/object keys and array indexes. Hopefully this
does not concern you because you have a sane input data structure, but
in case you want to remove any space for misunderstanding, you can use
C<exact_crumbr> instead:

   $ teepee -Fexact_crumbr -i data.yml
   {"array"}[0]:"first"
   {"array"}[1]:"second"
   {"array"}[2]:"third"
   {"array"}[3]{"k1"}:"v1"
   {"array"}[3]{"k2"}:"v2"
   {"hash"}{"complex key"}:"whatever"
   {"hash"}{"five"}[0]:"a"
   {"hash"}{"five"}[1]:"b"
   {"hash"}{"five"}[2]:"see..."
   {"hash"}{"one"}:"two"
   {"hash"}{"three"}:"four"
   {"key1"}:"value1"
   {"key2"}:"value2"

If you like, or need, to play with I<JSON subsets> instead, you might
find C<json_crumbr> interesting:

   $ teepee -Fjson_crumbr -i data.yml
   {"array":["first"]}
   {"array":["second"]}
   {"array":["third"]}
   {"array":[{"k1":"v1"}]}
   {"array":[{"k2":"v2"}]}
   {"hash":{"complex key":"whatever"}}
   {"hash":{"five":["a"]}}
   {"hash":{"five":["b"]}}
   {"hash":{"five":["see..."]}}
   {"hash":{"one":"two"}}
   {"hash":{"three":"four"}}
   {"key1":"value1"}
   {"key2":"value2"}

In this case, each line is a valid JSON data structure with one single
leaf value only.

=head1 OPTIONS

=over

=item -A

=item --auto-key

=item --no-auto-key

   -A
   --auto-key
   --no-auto-key

When set (first two options), every input is put into its own sub-value
inside the top-level hash. See L</--auto-key-prefix>,
L<--auto-key-suffix> and L</default-key> for options related to
automatic keys generation.

Defaults to a false value, i.e. hashes will be merged together in the
top level hash, and only array/scalar values will get an automatically
generated key.

=item -P

=item --auto-key-prefix

   -P ITEM-
   --auto-key-prefix ITEM-

Prefix to be applied when auto-generating a key for inserting an input
into the top-level hash. This applies to input top-level arrays/scalars,
unless when C<--auto-key> is set in which case it applies to all
top-level inputs.

Defaults to the single underscore character C<_>.

=item -S

=item --auto-key-suffix

   -S _mine
   --auto-key-suffix _mine

Suffix to be applied when auto-generating a key for inserting an input
into the top-level hash. This applies to input top-level arrays/scalars,
unless when C<--auto-key> is set in which case it applies to all
top-level inputs.

Defaults to the single underscore character C<_>.


=item -b

=item --binmode

   -b setting
   --binmode setting

set the output encoding using the same rules as Perl's C<binmode>
function. Defaults to C<:encoding(UTF-8)>. When left empty, it is
considered equivalent to C<:raw>.

=item -K

=item --default-key

   -K mykey
   --default-key mykey

Key associated to the last top-level input that needs key
auto-generation (depends on L</--auto-key>).

Defaults to the single underscore character C<_>.

=item -d

=item --define

   -d key=value
   --define key=value

add the definition of an element in the input data. The following
algorithm applies:

=over

=item *

input definition C<key=value> is split at the first C<=> sign found.
This means that the C<key> cannot contain C<=> signs, while the value
can;

=item *

the C<key> part is divided into sub-keys splitting using the C<.> dot
character. This means that sub-keys cannot contain dots.

=item *

each sub-key is used to traverse the input data, with auto-vivification
when necessary.

=item *

sub-keys that are non-negative integers (i.e. either 0 or any positive
integer) are regarded as array indexes. Otherwise, the sub-key is
regarded as a hash key.

=item *

the C<value> part is assigned as the element I<pointed> by the last
sub-key.

=back

=item -f

=item --format

   -f <yaml|yml|json|jsn>
   --format <yaml|yml|json|jsn>

set the (default) format for input data files. It can be one of C<yml>,
C<yaml>, C<json> or C<jsn> in whatever case. You can also set the format
in a fine-grained way using either L</--json> or L</--yaml> options.

=item -F

=item --function

   -F spec
   --function spec

set template to a function. This is equivalent to specifying:

   -T '[%= spec %]'

except that it is more concise. You can of course put whatever in
C<spec>, so you are not constrained on using a single function.

Currently available functions are:

=over

=item - C<crumbr_as(type)>

where C<type> can be C<URI>, C<Default> or C<JSON>;

=item - C<crumbr>

alias to C<uri_crumbr>

=item - C<uri_crumbr>

use crumbr with the C<URI> alternative

=item - C<exact_crumbr>

use crumbr with the I<exact> C<Default> alternative

=item - C<json_crumbr>

use crumbr with the C<JSON> alternative

=item - C<JSON>

dumps the input as pretty-printed JSON (so this is more readable)

=item - C<YAML>

dumps the input as YAML (so this is more readable)

=back

The functions above work, by default, on the overall input data. You can
pass an optional (additional) parameter with the data structure you want
it to work upon, e.g. if you just want to pretty-print an item you can
do this:

   $ teepee -i input.json -F'YAML(V("some.inner.hash"))'

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item -I

=item --immediate

   -I '{"ciao":"a tutti"}'
   --immediate '{"hey":"joe"}'

immediate input, whose content is directly in the command line
parameter. Does auto-detection and complies with L</--format> as
L</--input>.

=item -i

=item --input

   -i filename
   --input filename

an input file carrying data for expansion. This option can be set
multiple times, which will trigger (shallow) merging of the data
structures.

If set as C<->, standard input will be read.

Note: only allowed data structures are hashes at the top level.

=item -j

=item --jsn

=item --json

   -j input.json
   --jsn some.json
   --json other.json

add an input file indicating that its format is JSON.

=item -J

=item --JSN

=item --JSON

   -J '{"ciao":"a tutti"}'
   --JSN '{"hi":"there"}'
   --JSON '{"hey":"joe"}'

immediate input, whose content is directly in the command line
parameter, read as JSON.

Note that the case of the option is all uppercase, as opposed to
L</--json>.

This can come handy when you have read your data structure in a shell
variable, and don't want to do tricks with redirections.

=item --man

print out the full documentation for the script.

=item -n

=item --newline

=item --no-newline

the first two forms set C<teepee> to always print a newline at the end.
This should make it easier to use in the command line, especially for
casually printing variables on the shell.

The last form is the negation, i.e. newline printing is disabled. This
can come handy when you set the environment variable L</TEEPEE_NEWLINE>
to a non-false value, but you want to disable the newline printing in
one call.

=item -N

=item --no-input

   -N
   --no-input

boolean option to signal that there is no input at all. This is handy if
you just want to expand a template based on a few variables set directly
on the command line, for example:

   # both "n" for newline and "N" for no-input, then multiple defines
   $ teepee -nN -d a=b -d c=d -T '[% a %] -> [% c %]'
   b -> d


=item -o 

=item --output

   -o filename
   --output filename

set the output channel where data will be sent. By default it is set to
C<->, which means standard output.

Data will be printed assuming the channel is UTF-8 capable.

=item -t 

=item --template

   -t filename
   --template filename

set the input template filename. The input file is assumed to be UTF-8
encoded.

Templates are assumed to be valid L<Template::Perlish> template files,
see that module's documentation for additional help. The default opener
and closer are assumed.

=item -T 

=item --text

set the template to expand directly on the command line.

=item --usage

print a concise usage line and exit.

=item -v string

=item --variable string

   -v some.data.inside
   --variable some.data.inside

expand a variable directly. This is equivalent to specifying:

   -T '[% some.data.inside %]'

but more concise.

=item --version

print the version of the script.

=item -y

=item --yml

=item --yaml

   -y input.yaml
   --yml some.yaml
   --yaml other.yaml

add an input file indicating that its format is YAML.

=item -Y

=item --YML

=item --YAML

   -Y '"ciao": "a tutti"'
   --YML '"hi": "there"'
   --YAML '"hey": "joe"'

immediate input, whose content is directly in the command line
parameter, read as YAML.

Note that the case of the option is all uppercase, as opposed to
L</--yaml>.

This can come handy when you have read your data structure in a shell
variable, and don't want to do tricks with redirections.


=back

=head1 DIAGNOSTICS

=over

=item C<< output open('%s'): %s >>

errors while opening the output channel, second placeholder carries the
error from the operating system.

=item C<< undefined input format >>

auto-detection of input format failed. You can use option L</--format>
to specify the input format.

=item C<< cannot read input format %s >>

the provided input format is not recognised, see L</--format> for the
allowed values.

=item C<< undefined filename >>

the filename provided for input reading is not defined. This applies
both to data and template inputs.

=item C<< input open('%s'): %s >>

errors while opening an input file, second placeholder carries the
error from the operating system.

=item C<< cannot infer format for file '%s' >>

heuristic to infer the format of the file failed. You can specify the
format to be used using L</--format>

=back


=head1 CONFIGURATION AND ENVIRONMENT

teepee requires no configuration files.

The following environment variables are supported:

=over

=item B<< TEEPEE_NEWLINE >>

when set to a true value, it has the same effect of option
L</--newline>. Anyway, the command line always overrides the environment
variable, so if option L</--no-newline> is set, the newline printig will
be disabled anyway.

=back


=head1 DEPENDENCIES

=over

=item *

L<Data::Crumbr> (and sons)

=item *

L<JSON::PP> (with L<JSON::PP::Boolean>)

=item *

L<Mo> (with L<Mo::default> and L<Mo::coerce>)

=item *

L<Template::Perlish>

=item *

L<YAML::Tiny>

=back

The bundled version contains all the needed modules, without
documentation. The following licensing terms apply to the included
modules:

=over

=item L<Data::Crumbr>

Copyright (C) 2015 by Flavio Poletti <polettix@cpan.org>

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=item L<JSON::PP>

Copyright 2007-2014 by Makamaka Hannyaharamitu

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=item L<Mo>

Copyright (c) 2011-2013. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See http://www.perl.com/perl/misc/Artistic.html

=item L<Template::Perlish>

Copyright (c) 2008-2015 by Flavio Poletti polettix@cpan.org.

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=item L<YAML::Tiny>

Copyright 2006 - 2013 Adam Kennedy.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

The full text of the license can be found in the LICENSE file available
at https://metacpan.org/source/ETHER/YAML-Tiny-1.69/LICENSE.


=back




=head1 BUGS AND LIMITATIONS

No bugs have been reported. Auto-detection of local should probably
extend to output encoding when printing to standard output, as opposed
to assuming UTF-8 is fine.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
